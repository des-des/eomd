/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./editor.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../parser/grammar.js":
/*!****************************!*\
  !*** ../parser/grammar.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// Generated automatically by nearley, version 2.15.1\n// http://github.com/Hardmath123/nearley\n(function () {\nfunction id(x) { return x[0]; }\n\nvar appendItem = function (a, b) { return function (d) { return d[a].concat([d[b]]); } };\nvar appendItemChar = function (a, b) { return function (d) { return d[a].concat(d[b]); } };\nvar empty = function (d) { return []; };\nvar emptyStr = function (d) { return \"\"; };\nvar log = text => d => { console.log(text, d); return d ;};\nvar unwrap = d => d[0]\nvar tag = (type, f = d => d) => d => ({ type: typeof type === 'function' ? type(d) : type, value: f(d) })\nvar tagid = type => d => ({ type: type, value: d[0] })\nconst schema = __webpack_require__(/*! ../prose/dist/schema.js */ \"../prose/dist/schema.js\").default\nconst node = (tag, attrs, children) => ({ tag, attrs, children })\nconst textNode = content => node('text', {}, content)\n\nvar flatten = d => [].concat.apply([], ...d)\nconst containsInline = chars => {\n  const l = chars.length\n\n  if (chars[l-1] !== '*') return false\n  if (chars.slice(0, -2).join('').includes('*')) return true // em\n\n  return chars[l-2] === '*' && chars.slice(0, -2).join('').includes('**')\n}\nvar grammar = {\n    Lexer: undefined,\n    ParserRules: [\n    {\"name\": \"block\", \"symbols\": [\"paragraph\"], \"postprocess\": d => node('p', {}, d[0])},\n    {\"name\": \"block\", \"symbols\": [\"title\"], \"postprocess\": id},\n    {\"name\": \"block\", \"symbols\": [\"list\"], \"postprocess\": id},\n    {\"name\": \"block\", \"symbols\": [\"numberlist\"], \"postprocess\": id},\n    {\"name\": \"paragraph\", \"symbols\": [\"text\"], \"postprocess\":  (d, _, r) => {\n          const inner = d[0][0]\n          const text = d[0][0].children\n          if (typeof text !== 'string') return d[0]\n          if (text.match(/^[#]+ /)) return r\n          if (text.match(/^ \\* /)) return r\n          if (text.match(/^ [1-9]+. /)) return r\n        \n          return d[0]\n        }},\n    {\"name\": \"text\", \"symbols\": [\"string\"]},\n    {\"name\": \"text\", \"symbols\": [\"inline\"]},\n    {\"name\": \"text\", \"symbols\": [\"text\", \"inline\"], \"postprocess\": d => d[0].concat(d[1])},\n    {\"name\": \"text\", \"symbols\": [\"inline\", \"text\"]},\n    {\"name\": \"inline\", \"symbols\": [\"bold\"], \"postprocess\": id},\n    {\"name\": \"string$ebnf$1\", \"symbols\": [/[^\\n]/]},\n    {\"name\": \"string$ebnf$1\", \"symbols\": [\"string$ebnf$1\", /[^\\n]/], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"string\", \"symbols\": [\"string$ebnf$1\"], \"postprocess\":  ([chars], _, r) => {\n          const l = chars.length\n          if (containsInline(chars)) return r\n        \n          return textNode(chars.join(\"\"))\n        } },\n    {\"name\": \"title\", \"symbols\": [\"titlehashes\", {\"literal\":\" \"}, \"text\"], \"postprocess\":  d => {\n          const frontText = d[0] + d[1]\n        \n          const children = [textNode(frontText), ...d[2]]\n        \n          const level = d[0].length\n        \n          return node(`h${level}`, {}, children)\n        } },\n    {\"name\": \"titlehashes$ebnf$1\", \"symbols\": [/[#]/]},\n    {\"name\": \"titlehashes$ebnf$1\", \"symbols\": [\"titlehashes$ebnf$1\", /[#]/], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"titlehashes\", \"symbols\": [\"titlehashes$ebnf$1\"], \"postprocess\": d => d[0].join('')},\n    {\"name\": \"list$ebnf$1\", \"symbols\": [\"listitem\"]},\n    {\"name\": \"list$ebnf$1\", \"symbols\": [\"list$ebnf$1\", \"listitem\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"list\", \"symbols\": [\"list$ebnf$1\"], \"postprocess\": tagid('ul')},\n    {\"name\": \"listitem$string$1\", \"symbols\": [{\"literal\":\" \"}, {\"literal\":\"*\"}, {\"literal\":\" \"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"listitem\", \"symbols\": [\"listitem$string$1\", \"text\"], \"postprocess\": tag('li', d => d.slice(0).join(''))},\n    {\"name\": \"numberlist$ebnf$1\", \"symbols\": [\"numberlistitem\"]},\n    {\"name\": \"numberlist$ebnf$1\", \"symbols\": [\"numberlist$ebnf$1\", \"numberlistitem\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"numberlist\", \"symbols\": [\"numberlist$ebnf$1\"], \"postprocess\": tagid('ol')},\n    {\"name\": \"numberlistitem$ebnf$1\", \"symbols\": [/[1-9]/]},\n    {\"name\": \"numberlistitem$ebnf$1\", \"symbols\": [\"numberlistitem$ebnf$1\", /[1-9]/], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"numberlistitem$string$1\", \"symbols\": [{\"literal\":\".\"}, {\"literal\":\" \"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"numberlistitem\", \"symbols\": [{\"literal\":\" \"}, \"numberlistitem$ebnf$1\", \"numberlistitem$string$1\", \"text\"], \"postprocess\": tag('li', d => d.slice(0).join(''))},\n    {\"name\": \"bold$string$1\", \"symbols\": [{\"literal\":\"*\"}, {\"literal\":\"*\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"bold$string$2\", \"symbols\": [{\"literal\":\"*\"}, {\"literal\":\"*\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"bold\", \"symbols\": [\"bold$string$1\", \"string\", \"bold$string$2\"], \"postprocess\":  d => {\n          const text = `**${d[1].children}**`\n        \n          const child = textNode(text)\n          return node('strong', {}, [child])\n          //return node;\n          // return tag('b', d => d.join(''))\n        } }\n]\n  , ParserStart: \"block\"\n}\nif (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {\n   module.exports = grammar;\n} else {\n   window.grammar = grammar;\n}\n})();\n\n\n//# sourceURL=webpack:///../parser/grammar.js?");

/***/ }),

/***/ "../parser/node_modules/nearley/lib/nearley.js":
/*!*****************************************************!*\
  !*** ../parser/node_modules/nearley/lib/nearley.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("(function(root, factory) {\n    if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        root.nearley = factory();\n    }\n}(this, function() {\n\n    function Rule(name, symbols, postprocess) {\n        this.id = ++Rule.highestId;\n        this.name = name;\n        this.symbols = symbols;        // a list of literal | regex class | nonterminal\n        this.postprocess = postprocess;\n        return this;\n    }\n    Rule.highestId = 0;\n\n    Rule.prototype.toString = function(withCursorAt) {\n        function stringifySymbolSequence (e) {\n            return e.literal ? JSON.stringify(e.literal) :\n                   e.type ? '%' + e.type : e.toString();\n        }\n        var symbolSequence = (typeof withCursorAt === \"undefined\")\n                             ? this.symbols.map(stringifySymbolSequence).join(' ')\n                             : (   this.symbols.slice(0, withCursorAt).map(stringifySymbolSequence).join(' ')\n                                 + \" ● \"\n                                 + this.symbols.slice(withCursorAt).map(stringifySymbolSequence).join(' ')     );\n        return this.name + \" → \" + symbolSequence;\n    }\n\n\n    // a State is a rule at a position from a given starting point in the input stream (reference)\n    function State(rule, dot, reference, wantedBy) {\n        this.rule = rule;\n        this.dot = dot;\n        this.reference = reference;\n        this.data = [];\n        this.wantedBy = wantedBy;\n        this.isComplete = this.dot === rule.symbols.length;\n    }\n\n    State.prototype.toString = function() {\n        return \"{\" + this.rule.toString(this.dot) + \"}, from: \" + (this.reference || 0);\n    };\n\n    State.prototype.nextState = function(child) {\n        var state = new State(this.rule, this.dot + 1, this.reference, this.wantedBy);\n        state.left = this;\n        state.right = child;\n        if (state.isComplete) {\n            state.data = state.build();\n        }\n        return state;\n    };\n\n    State.prototype.build = function() {\n        var children = [];\n        var node = this;\n        do {\n            children.push(node.right.data);\n            node = node.left;\n        } while (node.left);\n        children.reverse();\n        return children;\n    };\n\n    State.prototype.finish = function() {\n        if (this.rule.postprocess) {\n            this.data = this.rule.postprocess(this.data, this.reference, Parser.fail);\n        }\n    };\n\n\n    function Column(grammar, index) {\n        this.grammar = grammar;\n        this.index = index;\n        this.states = [];\n        this.wants = {}; // states indexed by the non-terminal they expect\n        this.scannable = []; // list of states that expect a token\n        this.completed = {}; // states that are nullable\n    }\n\n\n    Column.prototype.process = function(nextColumn) {\n        var states = this.states;\n        var wants = this.wants;\n        var completed = this.completed;\n\n        for (var w = 0; w < states.length; w++) { // nb. we push() during iteration\n            var state = states[w];\n\n            if (state.isComplete) {\n                state.finish();\n                if (state.data !== Parser.fail) {\n                    // complete\n                    var wantedBy = state.wantedBy;\n                    for (var i = wantedBy.length; i--; ) { // this line is hot\n                        var left = wantedBy[i];\n                        this.complete(left, state);\n                    }\n\n                    // special-case nullables\n                    if (state.reference === this.index) {\n                        // make sure future predictors of this rule get completed.\n                        var exp = state.rule.name;\n                        (this.completed[exp] = this.completed[exp] || []).push(state);\n                    }\n                }\n\n            } else {\n                // queue scannable states\n                var exp = state.rule.symbols[state.dot];\n                if (typeof exp !== 'string') {\n                    this.scannable.push(state);\n                    continue;\n                }\n\n                // predict\n                if (wants[exp]) {\n                    wants[exp].push(state);\n\n                    if (completed.hasOwnProperty(exp)) {\n                        var nulls = completed[exp];\n                        for (var i = 0; i < nulls.length; i++) {\n                            var right = nulls[i];\n                            this.complete(state, right);\n                        }\n                    }\n                } else {\n                    wants[exp] = [state];\n                    this.predict(exp);\n                }\n            }\n        }\n    }\n\n    Column.prototype.predict = function(exp) {\n        var rules = this.grammar.byName[exp] || [];\n\n        for (var i = 0; i < rules.length; i++) {\n            var r = rules[i];\n            var wantedBy = this.wants[exp];\n            var s = new State(r, 0, this.index, wantedBy);\n            this.states.push(s);\n        }\n    }\n\n    Column.prototype.complete = function(left, right) {\n        var copy = left.nextState(right);\n        this.states.push(copy);\n    }\n\n\n    function Grammar(rules, start) {\n        this.rules = rules;\n        this.start = start || this.rules[0].name;\n        var byName = this.byName = {};\n        this.rules.forEach(function(rule) {\n            if (!byName.hasOwnProperty(rule.name)) {\n                byName[rule.name] = [];\n            }\n            byName[rule.name].push(rule);\n        });\n    }\n\n    // So we can allow passing (rules, start) directly to Parser for backwards compatibility\n    Grammar.fromCompiled = function(rules, start) {\n        var lexer = rules.Lexer;\n        if (rules.ParserStart) {\n          start = rules.ParserStart;\n          rules = rules.ParserRules;\n        }\n        var rules = rules.map(function (r) { return (new Rule(r.name, r.symbols, r.postprocess)); });\n        var g = new Grammar(rules, start);\n        g.lexer = lexer; // nb. storing lexer on Grammar is iffy, but unavoidable\n        return g;\n    }\n\n\n    function StreamLexer() {\n      this.reset(\"\");\n    }\n\n    StreamLexer.prototype.reset = function(data, state) {\n        this.buffer = data;\n        this.index = 0;\n        this.line = state ? state.line : 1;\n        this.lastLineBreak = state ? -state.col : 0;\n    }\n\n    StreamLexer.prototype.next = function() {\n        if (this.index < this.buffer.length) {\n            var ch = this.buffer[this.index++];\n            if (ch === '\\n') {\n              this.line += 1;\n              this.lastLineBreak = this.index;\n            }\n            return {value: ch};\n        }\n    }\n\n    StreamLexer.prototype.save = function() {\n      return {\n        line: this.line,\n        col: this.index - this.lastLineBreak,\n      }\n    }\n\n    StreamLexer.prototype.formatError = function(token, message) {\n        // nb. this gets called after consuming the offending token,\n        // so the culprit is index-1\n        var buffer = this.buffer;\n        if (typeof buffer === 'string') {\n            var nextLineBreak = buffer.indexOf('\\n', this.index);\n            if (nextLineBreak === -1) nextLineBreak = buffer.length;\n            var line = buffer.substring(this.lastLineBreak, nextLineBreak)\n            var col = this.index - this.lastLineBreak;\n            message += \" at line \" + this.line + \" col \" + col + \":\\n\\n\";\n            message += \"  \" + line + \"\\n\"\n            message += \"  \" + Array(col).join(\" \") + \"^\"\n            return message;\n        } else {\n            return message + \" at index \" + (this.index - 1);\n        }\n    }\n\n\n    function Parser(rules, start, options) {\n        if (rules instanceof Grammar) {\n            var grammar = rules;\n            var options = start;\n        } else {\n            var grammar = Grammar.fromCompiled(rules, start);\n        }\n        this.grammar = grammar;\n\n        // Read options\n        this.options = {\n            keepHistory: false,\n            lexer: grammar.lexer || new StreamLexer,\n        };\n        for (var key in (options || {})) {\n            this.options[key] = options[key];\n        }\n\n        // Setup lexer\n        this.lexer = this.options.lexer;\n        this.lexerState = undefined;\n\n        // Setup a table\n        var column = new Column(grammar, 0);\n        var table = this.table = [column];\n\n        // I could be expecting anything.\n        column.wants[grammar.start] = [];\n        column.predict(grammar.start);\n        // TODO what if start rule is nullable?\n        column.process();\n        this.current = 0; // token index\n    }\n\n    // create a reserved token for indicating a parse fail\n    Parser.fail = {};\n\n    Parser.prototype.feed = function(chunk) {\n        var lexer = this.lexer;\n        lexer.reset(chunk, this.lexerState);\n\n        var token;\n        while (token = lexer.next()) {\n            // We add new states to table[current+1]\n            var column = this.table[this.current];\n\n            // GC unused states\n            if (!this.options.keepHistory) {\n                delete this.table[this.current - 1];\n            }\n\n            var n = this.current + 1;\n            var nextColumn = new Column(this.grammar, n);\n            this.table.push(nextColumn);\n\n            // Advance all tokens that expect the symbol\n            var literal = token.text !== undefined ? token.text : token.value;\n            var value = lexer.constructor === StreamLexer ? token.value : token;\n            var scannable = column.scannable;\n            for (var w = scannable.length; w--; ) {\n                var state = scannable[w];\n                var expect = state.rule.symbols[state.dot];\n                // Try to consume the token\n                // either regex or literal\n                if (expect.test ? expect.test(value) :\n                    expect.type ? expect.type === token.type\n                                : expect.literal === literal) {\n                    // Add it\n                    var next = state.nextState({data: value, token: token, isToken: true, reference: n - 1});\n                    nextColumn.states.push(next);\n                }\n            }\n\n            // Next, for each of the rules, we either\n            // (a) complete it, and try to see if the reference row expected that\n            //     rule\n            // (b) predict the next nonterminal it expects by adding that\n            //     nonterminal's start state\n            // To prevent duplication, we also keep track of rules we have already\n            // added\n\n            nextColumn.process();\n\n            // If needed, throw an error:\n            if (nextColumn.states.length === 0) {\n                // No states at all! This is not good.\n                var message = this.lexer.formatError(token, \"invalid syntax\") + \"\\n\";\n                message += \"Unexpected \" + (token.type ? token.type + \" token: \" : \"\");\n                message += JSON.stringify(token.value !== undefined ? token.value : token) + \"\\n\";\n                var err = new Error(message);\n                err.offset = this.current;\n                err.token = token;\n                throw err;\n            }\n\n            // maybe save lexer state\n            if (this.options.keepHistory) {\n              column.lexerState = lexer.save()\n            }\n\n            this.current++;\n        }\n        if (column) {\n          this.lexerState = lexer.save()\n        }\n\n        // Incrementally keep track of results\n        this.results = this.finish();\n\n        // Allow chaining, for whatever it's worth\n        return this;\n    };\n\n    Parser.prototype.save = function() {\n        var column = this.table[this.current];\n        column.lexerState = this.lexerState;\n        return column;\n    };\n\n    Parser.prototype.restore = function(column) {\n        var index = column.index;\n        this.current = index;\n        this.table[index] = column;\n        this.table.splice(index + 1);\n        this.lexerState = column.lexerState;\n\n        // Incrementally keep track of results\n        this.results = this.finish();\n    };\n\n    // nb. deprecated: use save/restore instead!\n    Parser.prototype.rewind = function(index) {\n        if (!this.options.keepHistory) {\n            throw new Error('set option `keepHistory` to enable rewinding')\n        }\n        // nb. recall column (table) indicies fall between token indicies.\n        //        col 0   --   token 0   --   col 1\n        this.restore(this.table[index]);\n    };\n\n    Parser.prototype.finish = function() {\n        // Return the possible parsings\n        var considerations = [];\n        var start = this.grammar.start;\n        var column = this.table[this.table.length - 1]\n        column.states.forEach(function (t) {\n            if (t.rule.name === start\n                    && t.dot === t.rule.symbols.length\n                    && t.reference === 0\n                    && t.data !== Parser.fail) {\n                considerations.push(t);\n            }\n        });\n        return considerations.map(function(c) {return c.data; });\n    };\n\n    return {\n        Parser: Parser,\n        Grammar: Grammar,\n        Rule: Rule,\n    };\n\n}));\n\n\n//# sourceURL=webpack:///../parser/node_modules/nearley/lib/nearley.js?");

/***/ }),

/***/ "../parser/parse.js":
/*!**************************!*\
  !*** ../parser/parse.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var grammar = __webpack_require__(/*! ./grammar.js */ \"../parser/grammar.js\");\nvar nearley = __webpack_require__(/*! nearley */ \"../parser/node_modules/nearley/lib/nearley.js\");\n\nconst parse = text => {\n  var parser = new nearley.Parser(grammar.ParserRules, grammar.ParserStart);\n\n  parser.current = 0;\n  parser.feed(text);\n\n  // console.log(text);\n  // console.log(parser);\n\n  const results = parser.results;\n\n  // console.log({\n  //   input: text,\n  //   results\n  // });\n\n  return results;\n};\n\nmodule.exports = parse;\n\n\n//# sourceURL=webpack:///../parser/parse.js?");

/***/ }),

/***/ "../prose/dist/schema.js":
/*!*******************************!*\
  !*** ../prose/dist/schema.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = \"./schema.js\");\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ \"./node_modules/orderedmap/index.js\":\n/*!******************************************!*\\\n  !*** ./node_modules/orderedmap/index.js ***!\n  \\******************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\neval(\"// ::- Persistent data structure representing an ordered mapping from\\n// strings to values, with some convenient update methods.\\nfunction OrderedMap(content) {\\n  this.content = content\\n}\\n\\nOrderedMap.prototype = {\\n  constructor: OrderedMap,\\n\\n  find: function(key) {\\n    for (var i = 0; i < this.content.length; i += 2)\\n      if (this.content[i] === key) return i\\n    return -1\\n  },\\n\\n  // :: (string) → ?any\\n  // Retrieve the value stored under `key`, or return undefined when\\n  // no such key exists.\\n  get: function(key) {\\n    var found = this.find(key)\\n    return found == -1 ? undefined : this.content[found + 1]\\n  },\\n\\n  // :: (string, any, ?string) → OrderedMap\\n  // Create a new map by replacing the value of `key` with a new\\n  // value, or adding a binding to the end of the map. If `newKey` is\\n  // given, the key of the binding will be replaced with that key.\\n  update: function(key, value, newKey) {\\n    var self = newKey && newKey != key ? this.remove(newKey) : this\\n    var found = self.find(key), content = self.content.slice()\\n    if (found == -1) {\\n      content.push(newKey || key, value)\\n    } else {\\n      content[found + 1] = value\\n      if (newKey) content[found] = newKey\\n    }\\n    return new OrderedMap(content)\\n  },\\n\\n  // :: (string) → OrderedMap\\n  // Return a map with the given key removed, if it existed.\\n  remove: function(key) {\\n    var found = this.find(key)\\n    if (found == -1) return this\\n    var content = this.content.slice()\\n    content.splice(found, 2)\\n    return new OrderedMap(content)\\n  },\\n\\n  // :: (string, any) → OrderedMap\\n  // Add a new key to the start of the map.\\n  addToStart: function(key, value) {\\n    return new OrderedMap([key, value].concat(this.remove(key).content))\\n  },\\n\\n  // :: (string, any) → OrderedMap\\n  // Add a new key to the end of the map.\\n  addToEnd: function(key, value) {\\n    var content = this.remove(key).content.slice()\\n    content.push(key, value)\\n    return new OrderedMap(content)\\n  },\\n\\n  // :: (string, string, any) → OrderedMap\\n  // Add a key after the given key. If `place` is not found, the new\\n  // key is added to the end.\\n  addBefore: function(place, key, value) {\\n    var without = this.remove(key), content = without.content.slice()\\n    var found = without.find(place)\\n    content.splice(found == -1 ? content.length : found, 0, key, value)\\n    return new OrderedMap(content)\\n  },\\n\\n  // :: ((key: string, value: any))\\n  // Call the given function for each key/value pair in the map, in\\n  // order.\\n  forEach: function(f) {\\n    for (var i = 0; i < this.content.length; i += 2)\\n      f(this.content[i], this.content[i + 1])\\n  },\\n\\n  // :: (union<Object, OrderedMap>) → OrderedMap\\n  // Create a new map by prepending the keys in this map that don't\\n  // appear in `map` before the keys in `map`.\\n  prepend: function(map) {\\n    map = OrderedMap.from(map)\\n    if (!map.size) return this\\n    return new OrderedMap(map.content.concat(this.subtract(map).content))\\n  },\\n\\n  // :: (union<Object, OrderedMap>) → OrderedMap\\n  // Create a new map by appending the keys in this map that don't\\n  // appear in `map` after the keys in `map`.\\n  append: function(map) {\\n    map = OrderedMap.from(map)\\n    if (!map.size) return this\\n    return new OrderedMap(this.subtract(map).content.concat(map.content))\\n  },\\n\\n  // :: (union<Object, OrderedMap>) → OrderedMap\\n  // Create a map containing all the keys in this map that don't\\n  // appear in `map`.\\n  subtract: function(map) {\\n    var result = this\\n    map = OrderedMap.from(map)\\n    for (var i = 0; i < map.content.length; i += 2)\\n      result = result.remove(map.content[i])\\n    return result\\n  },\\n\\n  // :: number\\n  // The amount of keys in this map.\\n  get size() {\\n    return this.content.length >> 1\\n  }\\n}\\n\\n// :: (?union<Object, OrderedMap>) → OrderedMap\\n// Return a map with the given content. If null, create an empty\\n// map. If given an ordered map, return that map itself. If given an\\n// object, create a map from the object's properties.\\nOrderedMap.from = function(value) {\\n  if (value instanceof OrderedMap) return value\\n  var content = []\\n  if (value) for (var prop in value) content.push(prop, value[prop])\\n  return new OrderedMap(content)\\n}\\n\\nmodule.exports = OrderedMap\\n\\n\\n//# sourceURL=webpack:///./node_modules/orderedmap/index.js?\");\n\n/***/ }),\n\n/***/ \"./node_modules/prosemirror-model/dist/index.js\":\n/*!******************************************************!*\\\n  !*** ./node_modules/prosemirror-model/dist/index.js ***!\n  \\******************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\neval(\"\\n\\nObject.defineProperty(exports, '__esModule', { value: true });\\n\\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\\n\\nvar OrderedMap = _interopDefault(__webpack_require__(/*! orderedmap */ \\\"./node_modules/orderedmap/index.js\\\"));\\n\\nfunction findDiffStart(a, b, pos) {\\n  for (var i = 0;; i++) {\\n    if (i == a.childCount || i == b.childCount)\\n      { return a.childCount == b.childCount ? null : pos }\\n\\n    var childA = a.child(i), childB = b.child(i);\\n    if (childA == childB) { pos += childA.nodeSize; continue }\\n\\n    if (!childA.sameMarkup(childB)) { return pos }\\n\\n    if (childA.isText && childA.text != childB.text) {\\n      for (var j = 0; childA.text[j] == childB.text[j]; j++)\\n        { pos++; }\\n      return pos\\n    }\\n    if (childA.content.size || childB.content.size) {\\n      var inner = findDiffStart(childA.content, childB.content, pos + 1);\\n      if (inner != null) { return inner }\\n    }\\n    pos += childA.nodeSize;\\n  }\\n}\\n\\nfunction findDiffEnd(a, b, posA, posB) {\\n  for (var iA = a.childCount, iB = b.childCount;;) {\\n    if (iA == 0 || iB == 0)\\n      { return iA == iB ? null : {a: posA, b: posB} }\\n\\n    var childA = a.child(--iA), childB = b.child(--iB), size = childA.nodeSize;\\n    if (childA == childB) {\\n      posA -= size; posB -= size;\\n      continue\\n    }\\n\\n    if (!childA.sameMarkup(childB)) { return {a: posA, b: posB} }\\n\\n    if (childA.isText && childA.text != childB.text) {\\n      var same = 0, minSize = Math.min(childA.text.length, childB.text.length);\\n      while (same < minSize && childA.text[childA.text.length - same - 1] == childB.text[childB.text.length - same - 1]) {\\n        same++; posA--; posB--;\\n      }\\n      return {a: posA, b: posB}\\n    }\\n    if (childA.content.size || childB.content.size) {\\n      var inner = findDiffEnd(childA.content, childB.content, posA - 1, posB - 1);\\n      if (inner) { return inner }\\n    }\\n    posA -= size; posB -= size;\\n  }\\n}\\n\\n// ::- A fragment represents a node's collection of child nodes.\\n//\\n// Like nodes, fragments are persistent data structures, and you\\n// should not mutate them or their content. Rather, you create new\\n// instances whenever needed. The API tries to make this easy.\\nvar Fragment = function Fragment(content, size) {\\n  var this$1 = this;\\n\\n  this.content = content;\\n  // :: number\\n  // The size of the fragment, which is the total of the size of its\\n  // content nodes.\\n  this.size = size || 0;\\n  if (size == null) { for (var i = 0; i < content.length; i++)\\n    { this$1.size += content[i].nodeSize; } }\\n};\\n\\nvar prototypeAccessors$1 = { firstChild: {},lastChild: {},childCount: {} };\\n\\n// :: (number, number, (node: Node, start: number, parent: Node, index: number) → ?bool, ?number)\\n// Invoke a callback for all descendant nodes between the given two\\n// positions (relative to start of this fragment). Doesn't descend\\n// into a node when the callback returns `false`.\\nFragment.prototype.nodesBetween = function nodesBetween (from, to, f, nodeStart, parent) {\\n    var this$1 = this;\\n    if ( nodeStart === void 0 ) nodeStart = 0;\\n\\n  for (var i = 0, pos = 0; pos < to; i++) {\\n    var child = this$1.content[i], end = pos + child.nodeSize;\\n    if (end > from && f(child, nodeStart + pos, parent, i) !== false && child.content.size) {\\n      var start = pos + 1;\\n      child.nodesBetween(Math.max(0, from - start),\\n                         Math.min(child.content.size, to - start),\\n                         f, nodeStart + start);\\n    }\\n    pos = end;\\n  }\\n};\\n\\n// :: ((node: Node, pos: number, parent: Node) → ?bool)\\n// Call the given callback for every descendant node. The callback\\n// may return `false` to prevent traversal of a given node's children.\\nFragment.prototype.descendants = function descendants (f) {\\n  this.nodesBetween(0, this.size, f);\\n};\\n\\n// : (number, number, ?string, ?string) → string\\nFragment.prototype.textBetween = function textBetween (from, to, blockSeparator, leafText) {\\n  var text = \\\"\\\", separated = true;\\n  this.nodesBetween(from, to, function (node, pos) {\\n    if (node.isText) {\\n      text += node.text.slice(Math.max(from, pos) - pos, to - pos);\\n      separated = !blockSeparator;\\n    } else if (node.isLeaf && leafText) {\\n      text += leafText;\\n      separated = !blockSeparator;\\n    } else if (!separated && node.isBlock) {\\n      text += blockSeparator;\\n      separated = true;\\n    }\\n  }, 0);\\n  return text\\n};\\n\\n// :: (Fragment) → Fragment\\n// Create a new fragment containing the combined content of this\\n// fragment and the other.\\nFragment.prototype.append = function append (other) {\\n  if (!other.size) { return this }\\n  if (!this.size) { return other }\\n  var last = this.lastChild, first = other.firstChild, content = this.content.slice(), i = 0;\\n  if (last.isText && last.sameMarkup(first)) {\\n    content[content.length - 1] = last.withText(last.text + first.text);\\n    i = 1;\\n  }\\n  for (; i < other.content.length; i++) { content.push(other.content[i]); }\\n  return new Fragment(content, this.size + other.size)\\n};\\n\\n// :: (number, ?number) → Fragment\\n// Cut out the sub-fragment between the two given positions.\\nFragment.prototype.cut = function cut (from, to) {\\n    var this$1 = this;\\n\\n  if (to == null) { to = this.size; }\\n  if (from == 0 && to == this.size) { return this }\\n  var result = [], size = 0;\\n  if (to > from) { for (var i = 0, pos = 0; pos < to; i++) {\\n    var child = this$1.content[i], end = pos + child.nodeSize;\\n    if (end > from) {\\n      if (pos < from || end > to) {\\n        if (child.isText)\\n          { child = child.cut(Math.max(0, from - pos), Math.min(child.text.length, to - pos)); }\\n        else\\n          { child = child.cut(Math.max(0, from - pos - 1), Math.min(child.content.size, to - pos - 1)); }\\n      }\\n      result.push(child);\\n      size += child.nodeSize;\\n    }\\n    pos = end;\\n  } }\\n  return new Fragment(result, size)\\n};\\n\\nFragment.prototype.cutByIndex = function cutByIndex (from, to) {\\n  if (from == to) { return Fragment.empty }\\n  if (from == 0 && to == this.content.length) { return this }\\n  return new Fragment(this.content.slice(from, to))\\n};\\n\\n// :: (number, Node) → Fragment\\n// Create a new fragment in which the node at the given index is\\n// replaced by the given node.\\nFragment.prototype.replaceChild = function replaceChild (index, node) {\\n  var current = this.content[index];\\n  if (current == node) { return this }\\n  var copy = this.content.slice();\\n  var size = this.size + node.nodeSize - current.nodeSize;\\n  copy[index] = node;\\n  return new Fragment(copy, size)\\n};\\n\\n// : (Node) → Fragment\\n// Create a new fragment by prepending the given node to this\\n// fragment.\\nFragment.prototype.addToStart = function addToStart (node) {\\n  return new Fragment([node].concat(this.content), this.size + node.nodeSize)\\n};\\n\\n// : (Node) → Fragment\\n// Create a new fragment by appending the given node to this\\n// fragment.\\nFragment.prototype.addToEnd = function addToEnd (node) {\\n  return new Fragment(this.content.concat(node), this.size + node.nodeSize)\\n};\\n\\n// :: (Fragment) → bool\\n// Compare this fragment to another one.\\nFragment.prototype.eq = function eq (other) {\\n    var this$1 = this;\\n\\n  if (this.content.length != other.content.length) { return false }\\n  for (var i = 0; i < this.content.length; i++)\\n    { if (!this$1.content[i].eq(other.content[i])) { return false } }\\n  return true\\n};\\n\\n// :: ?Node\\n// The first child of the fragment, or `null` if it is empty.\\nprototypeAccessors$1.firstChild.get = function () { return this.content.length ? this.content[0] : null };\\n\\n// :: ?Node\\n// The last child of the fragment, or `null` if it is empty.\\nprototypeAccessors$1.lastChild.get = function () { return this.content.length ? this.content[this.content.length - 1] : null };\\n\\n// :: number\\n// The number of child nodes in this fragment.\\nprototypeAccessors$1.childCount.get = function () { return this.content.length };\\n\\n// :: (number) → Node\\n// Get the child node at the given index. Raise an error when the\\n// index is out of range.\\nFragment.prototype.child = function child (index) {\\n  var found = this.content[index];\\n  if (!found) { throw new RangeError(\\\"Index \\\" + index + \\\" out of range for \\\" + this) }\\n  return found\\n};\\n\\n// :: (number) → ?Node\\n// Get the child node at the given index, if it exists.\\nFragment.prototype.maybeChild = function maybeChild (index) {\\n  return this.content[index]\\n};\\n\\n// :: ((node: Node, offset: number, index: number))\\n// Call `f` for every child node, passing the node, its offset\\n// into this parent node, and its index.\\nFragment.prototype.forEach = function forEach (f) {\\n    var this$1 = this;\\n\\n  for (var i = 0, p = 0; i < this.content.length; i++) {\\n    var child = this$1.content[i];\\n    f(child, p, i);\\n    p += child.nodeSize;\\n  }\\n};\\n\\n// :: (Fragment) → ?number\\n// Find the first position at which this fragment and another\\n// fragment differ, or `null` if they are the same.\\nFragment.prototype.findDiffStart = function findDiffStart$1 (other, pos) {\\n    if ( pos === void 0 ) pos = 0;\\n\\n  return findDiffStart(this, other, pos)\\n};\\n\\n// :: (Fragment) → ?{a: number, b: number}\\n// Find the first position, searching from the end, at which this\\n// fragment and the given fragment differ, or `null` if they are the\\n// same. Since this position will not be the same in both nodes, an\\n// object with two separate positions is returned.\\nFragment.prototype.findDiffEnd = function findDiffEnd$1 (other, pos, otherPos) {\\n    if ( pos === void 0 ) pos = this.size;\\n    if ( otherPos === void 0 ) otherPos = other.size;\\n\\n  return findDiffEnd(this, other, pos, otherPos)\\n};\\n\\n// : (number, ?number) → {index: number, offset: number}\\n// Find the index and inner offset corresponding to a given relative\\n// position in this fragment. The result object will be reused\\n// (overwritten) the next time the function is called. (Not public.)\\nFragment.prototype.findIndex = function findIndex (pos, round) {\\n    var this$1 = this;\\n    if ( round === void 0 ) round = -1;\\n\\n  if (pos == 0) { return retIndex(0, pos) }\\n  if (pos == this.size) { return retIndex(this.content.length, pos) }\\n  if (pos > this.size || pos < 0) { throw new RangeError((\\\"Position \\\" + pos + \\\" outside of fragment (\\\" + (this) + \\\")\\\")) }\\n  for (var i = 0, curPos = 0;; i++) {\\n    var cur = this$1.child(i), end = curPos + cur.nodeSize;\\n    if (end >= pos) {\\n      if (end == pos || round > 0) { return retIndex(i + 1, end) }\\n      return retIndex(i, curPos)\\n    }\\n    curPos = end;\\n  }\\n};\\n\\n// :: () → string\\n// Return a debugging string that describes this fragment.\\nFragment.prototype.toString = function toString () { return \\\"<\\\" + this.toStringInner() + \\\">\\\" };\\n\\nFragment.prototype.toStringInner = function toStringInner () { return this.content.join(\\\", \\\") };\\n\\n// :: () → ?Object\\n// Create a JSON-serializeable representation of this fragment.\\nFragment.prototype.toJSON = function toJSON () {\\n  return this.content.length ? this.content.map(function (n) { return n.toJSON(); }) : null\\n};\\n\\n// :: (Schema, ?Object) → Fragment\\n// Deserialize a fragment from its JSON representation.\\nFragment.fromJSON = function fromJSON (schema, value) {\\n  if (!value) { return Fragment.empty }\\n  if (!Array.isArray(value)) { throw new RangeError(\\\"Invalid input for Fragment.fromJSON\\\") }\\n  return new Fragment(value.map(schema.nodeFromJSON))\\n};\\n\\n// :: ([Node]) → Fragment\\n// Build a fragment from an array of nodes. Ensures that adjacent\\n// text nodes with the same marks are joined together.\\nFragment.fromArray = function fromArray (array) {\\n  if (!array.length) { return Fragment.empty }\\n  var joined, size = 0;\\n  for (var i = 0; i < array.length; i++) {\\n    var node = array[i];\\n    size += node.nodeSize;\\n    if (i && node.isText && array[i - 1].sameMarkup(node)) {\\n      if (!joined) { joined = array.slice(0, i); }\\n      joined[joined.length - 1] = node.withText(joined[joined.length - 1].text + node.text);\\n    } else if (joined) {\\n      joined.push(node);\\n    }\\n  }\\n  return new Fragment(joined || array, size)\\n};\\n\\n// :: (?union<Fragment, Node, [Node]>) → Fragment\\n// Create a fragment from something that can be interpreted as a set\\n// of nodes. For `null`, it returns the empty fragment. For a\\n// fragment, the fragment itself. For a node or array of nodes, a\\n// fragment containing those nodes.\\nFragment.from = function from (nodes) {\\n  if (!nodes) { return Fragment.empty }\\n  if (nodes instanceof Fragment) { return nodes }\\n  if (Array.isArray(nodes)) { return this.fromArray(nodes) }\\n  return new Fragment([nodes], nodes.nodeSize)\\n};\\n\\nObject.defineProperties( Fragment.prototype, prototypeAccessors$1 );\\n\\nvar found = {index: 0, offset: 0};\\nfunction retIndex(index, offset) {\\n  found.index = index;\\n  found.offset = offset;\\n  return found\\n}\\n\\n// :: Fragment\\n// An empty fragment. Intended to be reused whenever a node doesn't\\n// contain anything (rather than allocating a new empty fragment for\\n// each leaf node).\\nFragment.empty = new Fragment([], 0);\\n\\nfunction compareDeep(a, b) {\\n  if (a === b) { return true }\\n  if (!(a && typeof a == \\\"object\\\") ||\\n      !(b && typeof b == \\\"object\\\")) { return false }\\n  var array = Array.isArray(a);\\n  if (Array.isArray(b) != array) { return false }\\n  if (array) {\\n    if (a.length != b.length) { return false }\\n    for (var i = 0; i < a.length; i++) { if (!compareDeep(a[i], b[i])) { return false } }\\n  } else {\\n    for (var p in a) { if (!(p in b) || !compareDeep(a[p], b[p])) { return false } }\\n    for (var p$1 in b) { if (!(p$1 in a)) { return false } }\\n  }\\n  return true\\n}\\n\\n// ::- A mark is a piece of information that can be attached to a node,\\n// such as it being emphasized, in code font, or a link. It has a type\\n// and optionally a set of attributes that provide further information\\n// (such as the target of the link). Marks are created through a\\n// `Schema`, which controls which types exist and which\\n// attributes they have.\\nvar Mark = function Mark(type, attrs) {\\n  // :: MarkType\\n  // The type of this mark.\\n  this.type = type;\\n  // :: Object\\n  // The attributes associated with this mark.\\n  this.attrs = attrs;\\n};\\n\\n// :: ([Mark]) → [Mark]\\n// Given a set of marks, create a new set which contains this one as\\n// well, in the right position. If this mark is already in the set,\\n// the set itself is returned. If any marks that are set to be\\n// [exclusive](#model.MarkSpec.excludes) with this mark are present,\\n// those are replaced by this one.\\nMark.prototype.addToSet = function addToSet (set) {\\n    var this$1 = this;\\n\\n  var copy, placed = false;\\n  for (var i = 0; i < set.length; i++) {\\n    var other = set[i];\\n    if (this$1.eq(other)) { return set }\\n    if (this$1.type.excludes(other.type)) {\\n      if (!copy) { copy = set.slice(0, i); }\\n    } else if (other.type.excludes(this$1.type)) {\\n      return set\\n    } else {\\n      if (!placed && other.type.rank > this$1.type.rank) {\\n        if (!copy) { copy = set.slice(0, i); }\\n        copy.push(this$1);\\n        placed = true;\\n      }\\n      if (copy) { copy.push(other); }\\n    }\\n  }\\n  if (!copy) { copy = set.slice(); }\\n  if (!placed) { copy.push(this); }\\n  return copy\\n};\\n\\n// :: ([Mark]) → [Mark]\\n// Remove this mark from the given set, returning a new set. If this\\n// mark is not in the set, the set itself is returned.\\nMark.prototype.removeFromSet = function removeFromSet (set) {\\n    var this$1 = this;\\n\\n  for (var i = 0; i < set.length; i++)\\n    { if (this$1.eq(set[i]))\\n      { return set.slice(0, i).concat(set.slice(i + 1)) } }\\n  return set\\n};\\n\\n// :: ([Mark]) → bool\\n// Test whether this mark is in the given set of marks.\\nMark.prototype.isInSet = function isInSet (set) {\\n    var this$1 = this;\\n\\n  for (var i = 0; i < set.length; i++)\\n    { if (this$1.eq(set[i])) { return true } }\\n  return false\\n};\\n\\n// :: (Mark) → bool\\n// Test whether this mark has the same type and attributes as\\n// another mark.\\nMark.prototype.eq = function eq (other) {\\n  return this == other ||\\n    (this.type == other.type && compareDeep(this.attrs, other.attrs))\\n};\\n\\n// :: () → Object\\n// Convert this mark to a JSON-serializeable representation.\\nMark.prototype.toJSON = function toJSON () {\\n    var this$1 = this;\\n\\n  var obj = {type: this.type.name};\\n  for (var _ in this$1.attrs) {\\n    obj.attrs = this$1.attrs;\\n    break\\n  }\\n  return obj\\n};\\n\\n// :: (Schema, Object) → Mark\\nMark.fromJSON = function fromJSON (schema, json) {\\n  if (!json) { throw new RangeError(\\\"Invalid input for Mark.fromJSON\\\") }\\n  var type = schema.marks[json.type];\\n  if (!type) { throw new RangeError((\\\"There is no mark type \\\" + (json.type) + \\\" in this schema\\\")) }\\n  return type.create(json.attrs)\\n};\\n\\n// :: ([Mark], [Mark]) → bool\\n// Test whether two sets of marks are identical.\\nMark.sameSet = function sameSet (a, b) {\\n  if (a == b) { return true }\\n  if (a.length != b.length) { return false }\\n  for (var i = 0; i < a.length; i++)\\n    { if (!a[i].eq(b[i])) { return false } }\\n  return true\\n};\\n\\n// :: (?union<Mark, [Mark]>) → [Mark]\\n// Create a properly sorted mark set from null, a single mark, or an\\n// unsorted array of marks.\\nMark.setFrom = function setFrom (marks) {\\n  if (!marks || marks.length == 0) { return Mark.none }\\n  if (marks instanceof Mark) { return [marks] }\\n  var copy = marks.slice();\\n  copy.sort(function (a, b) { return a.type.rank - b.type.rank; });\\n  return copy\\n};\\n\\n// :: [Mark] The empty set of marks.\\nMark.none = [];\\n\\n// ReplaceError:: class extends Error\\n// Error type raised by [`Node.replace`](#model.Node.replace) when\\n// given an invalid replacement.\\n\\nfunction ReplaceError(message) {\\n  var err = Error.call(this, message);\\n  err.__proto__ = ReplaceError.prototype;\\n  return err\\n}\\n\\nReplaceError.prototype = Object.create(Error.prototype);\\nReplaceError.prototype.constructor = ReplaceError;\\nReplaceError.prototype.name = \\\"ReplaceError\\\";\\n\\n// ::- A slice represents a piece cut out of a larger document. It\\n// stores not only a fragment, but also the depth up to which nodes on\\n// both side are ‘open’ (cut through).\\nvar Slice = function Slice(content, openStart, openEnd) {\\n  // :: Fragment The slice's content.\\n  this.content = content;\\n  // :: number The open depth at the start.\\n  this.openStart = openStart;\\n  // :: number The open depth at the end.\\n  this.openEnd = openEnd;\\n};\\n\\nvar prototypeAccessors$2 = { size: {} };\\n\\n// :: number\\n// The size this slice would add when inserted into a document.\\nprototypeAccessors$2.size.get = function () {\\n  return this.content.size - this.openStart - this.openEnd\\n};\\n\\nSlice.prototype.insertAt = function insertAt (pos, fragment) {\\n  var content = insertInto(this.content, pos + this.openStart, fragment, null);\\n  return content && new Slice(content, this.openStart, this.openEnd)\\n};\\n\\nSlice.prototype.removeBetween = function removeBetween (from, to) {\\n  return new Slice(removeRange(this.content, from + this.openStart, to + this.openStart), this.openStart, this.openEnd)\\n};\\n\\n// :: (Slice) → bool\\n// Tests whether this slice is equal to another slice.\\nSlice.prototype.eq = function eq (other) {\\n  return this.content.eq(other.content) && this.openStart == other.openStart && this.openEnd == other.openEnd\\n};\\n\\nSlice.prototype.toString = function toString () {\\n  return this.content + \\\"(\\\" + this.openStart + \\\",\\\" + this.openEnd + \\\")\\\"\\n};\\n\\n// :: () → ?Object\\n// Convert a slice to a JSON-serializable representation.\\nSlice.prototype.toJSON = function toJSON () {\\n  if (!this.content.size) { return null }\\n  var json = {content: this.content.toJSON()};\\n  if (this.openStart > 0) { json.openStart = this.openStart; }\\n  if (this.openEnd > 0) { json.openEnd = this.openEnd; }\\n  return json\\n};\\n\\n// :: (Schema, ?Object) → Slice\\n// Deserialize a slice from its JSON representation.\\nSlice.fromJSON = function fromJSON (schema, json) {\\n  if (!json) { return Slice.empty }\\n  var openStart = json.openStart || 0, openEnd = json.openEnd || 0;\\n  if (typeof openStart != \\\"number\\\" || typeof openEnd != \\\"number\\\")\\n    { throw new RangeError(\\\"Invalid input for Slice.fromJSON\\\") }\\n  return new Slice(Fragment.fromJSON(schema, json.content), json.openStart || 0, json.openEnd || 0)\\n};\\n\\n// :: (Fragment, ?bool) → Slice\\n// Create a slice from a fragment by taking the maximum possible\\n// open value on both side of the fragment.\\nSlice.maxOpen = function maxOpen (fragment, openIsolating) {\\n    if ( openIsolating === void 0 ) openIsolating=true;\\n\\n  var openStart = 0, openEnd = 0;\\n  for (var n = fragment.firstChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.firstChild) { openStart++; }\\n  for (var n$1 = fragment.lastChild; n$1 && !n$1.isLeaf && (openIsolating || !n$1.type.spec.isolating); n$1 = n$1.lastChild) { openEnd++; }\\n  return new Slice(fragment, openStart, openEnd)\\n};\\n\\nObject.defineProperties( Slice.prototype, prototypeAccessors$2 );\\n\\nfunction removeRange(content, from, to) {\\n  var ref = content.findIndex(from);\\n  var index = ref.index;\\n  var offset = ref.offset;\\n  var child = content.maybeChild(index);\\n  var ref$1 = content.findIndex(to);\\n  var indexTo = ref$1.index;\\n  var offsetTo = ref$1.offset;\\n  if (offset == from || child.isText) {\\n    if (offsetTo != to && !content.child(indexTo).isText) { throw new RangeError(\\\"Removing non-flat range\\\") }\\n    return content.cut(0, from).append(content.cut(to))\\n  }\\n  if (index != indexTo) { throw new RangeError(\\\"Removing non-flat range\\\") }\\n  return content.replaceChild(index, child.copy(removeRange(child.content, from - offset - 1, to - offset - 1)))\\n}\\n\\nfunction insertInto(content, dist, insert, parent) {\\n  var ref = content.findIndex(dist);\\n  var index = ref.index;\\n  var offset = ref.offset;\\n  var child = content.maybeChild(index);\\n  if (offset == dist || child.isText) {\\n    if (parent && !parent.canReplace(index, index, insert)) { return null }\\n    return content.cut(0, dist).append(insert).append(content.cut(dist))\\n  }\\n  var inner = insertInto(child.content, dist - offset - 1, insert);\\n  return inner && content.replaceChild(index, child.copy(inner))\\n}\\n\\n// :: Slice\\n// The empty slice.\\nSlice.empty = new Slice(Fragment.empty, 0, 0);\\n\\nfunction replace($from, $to, slice) {\\n  if (slice.openStart > $from.depth)\\n    { throw new ReplaceError(\\\"Inserted content deeper than insertion position\\\") }\\n  if ($from.depth - slice.openStart != $to.depth - slice.openEnd)\\n    { throw new ReplaceError(\\\"Inconsistent open depths\\\") }\\n  return replaceOuter($from, $to, slice, 0)\\n}\\n\\nfunction replaceOuter($from, $to, slice, depth) {\\n  var index = $from.index(depth), node = $from.node(depth);\\n  if (index == $to.index(depth) && depth < $from.depth - slice.openStart) {\\n    var inner = replaceOuter($from, $to, slice, depth + 1);\\n    return node.copy(node.content.replaceChild(index, inner))\\n  } else if (!slice.content.size) {\\n    return close(node, replaceTwoWay($from, $to, depth))\\n  } else if (!slice.openStart && !slice.openEnd && $from.depth == depth && $to.depth == depth) { // Simple, flat case\\n    var parent = $from.parent, content = parent.content;\\n    return close(parent, content.cut(0, $from.parentOffset).append(slice.content).append(content.cut($to.parentOffset)))\\n  } else {\\n    var ref = prepareSliceForReplace(slice, $from);\\n    var start = ref.start;\\n    var end = ref.end;\\n    return close(node, replaceThreeWay($from, start, end, $to, depth))\\n  }\\n}\\n\\nfunction checkJoin(main, sub) {\\n  if (!sub.type.compatibleContent(main.type))\\n    { throw new ReplaceError(\\\"Cannot join \\\" + sub.type.name + \\\" onto \\\" + main.type.name) }\\n}\\n\\nfunction joinable($before, $after, depth) {\\n  var node = $before.node(depth);\\n  checkJoin(node, $after.node(depth));\\n  return node\\n}\\n\\nfunction addNode(child, target) {\\n  var last = target.length - 1;\\n  if (last >= 0 && child.isText && child.sameMarkup(target[last]))\\n    { target[last] = child.withText(target[last].text + child.text); }\\n  else\\n    { target.push(child); }\\n}\\n\\nfunction addRange($start, $end, depth, target) {\\n  var node = ($end || $start).node(depth);\\n  var startIndex = 0, endIndex = $end ? $end.index(depth) : node.childCount;\\n  if ($start) {\\n    startIndex = $start.index(depth);\\n    if ($start.depth > depth) {\\n      startIndex++;\\n    } else if ($start.textOffset) {\\n      addNode($start.nodeAfter, target);\\n      startIndex++;\\n    }\\n  }\\n  for (var i = startIndex; i < endIndex; i++) { addNode(node.child(i), target); }\\n  if ($end && $end.depth == depth && $end.textOffset)\\n    { addNode($end.nodeBefore, target); }\\n}\\n\\nfunction close(node, content) {\\n  if (!node.type.validContent(content))\\n    { throw new ReplaceError(\\\"Invalid content for node \\\" + node.type.name) }\\n  return node.copy(content)\\n}\\n\\nfunction replaceThreeWay($from, $start, $end, $to, depth) {\\n  var openStart = $from.depth > depth && joinable($from, $start, depth + 1);\\n  var openEnd = $to.depth > depth && joinable($end, $to, depth + 1);\\n\\n  var content = [];\\n  addRange(null, $from, depth, content);\\n  if (openStart && openEnd && $start.index(depth) == $end.index(depth)) {\\n    checkJoin(openStart, openEnd);\\n    addNode(close(openStart, replaceThreeWay($from, $start, $end, $to, depth + 1)), content);\\n  } else {\\n    if (openStart)\\n      { addNode(close(openStart, replaceTwoWay($from, $start, depth + 1)), content); }\\n    addRange($start, $end, depth, content);\\n    if (openEnd)\\n      { addNode(close(openEnd, replaceTwoWay($end, $to, depth + 1)), content); }\\n  }\\n  addRange($to, null, depth, content);\\n  return new Fragment(content)\\n}\\n\\nfunction replaceTwoWay($from, $to, depth) {\\n  var content = [];\\n  addRange(null, $from, depth, content);\\n  if ($from.depth > depth) {\\n    var type = joinable($from, $to, depth + 1);\\n    addNode(close(type, replaceTwoWay($from, $to, depth + 1)), content);\\n  }\\n  addRange($to, null, depth, content);\\n  return new Fragment(content)\\n}\\n\\nfunction prepareSliceForReplace(slice, $along) {\\n  var extra = $along.depth - slice.openStart, parent = $along.node(extra);\\n  var node = parent.copy(slice.content);\\n  for (var i = extra - 1; i >= 0; i--)\\n    { node = $along.node(i).copy(Fragment.from(node)); }\\n  return {start: node.resolveNoCache(slice.openStart + extra),\\n          end: node.resolveNoCache(node.content.size - slice.openEnd - extra)}\\n}\\n\\n// ::- You can [_resolve_](#model.Node.resolve) a position to get more\\n// information about it. Objects of this class represent such a\\n// resolved position, providing various pieces of context information,\\n// and some helper methods.\\n//\\n// Throughout this interface, methods that take an optional `depth`\\n// parameter will interpret undefined as `this.depth` and negative\\n// numbers as `this.depth + value`.\\nvar ResolvedPos = function ResolvedPos(pos, path, parentOffset) {\\n  // :: number The position that was resolved.\\n  this.pos = pos;\\n  this.path = path;\\n  // :: number\\n  // The number of levels the parent node is from the root. If this\\n  // position points directly into the root node, it is 0. If it\\n  // points into a top-level paragraph, 1, and so on.\\n  this.depth = path.length / 3 - 1;\\n  // :: number The offset this position has into its parent node.\\n  this.parentOffset = parentOffset;\\n};\\n\\nvar prototypeAccessors$3 = { parent: {},doc: {},textOffset: {},nodeAfter: {},nodeBefore: {} };\\n\\nResolvedPos.prototype.resolveDepth = function resolveDepth (val) {\\n  if (val == null) { return this.depth }\\n  if (val < 0) { return this.depth + val }\\n  return val\\n};\\n\\n// :: Node\\n// The parent node that the position points into. Note that even if\\n// a position points into a text node, that node is not considered\\n// the parent—text nodes are ‘flat’ in this model, and have no content.\\nprototypeAccessors$3.parent.get = function () { return this.node(this.depth) };\\n\\n// :: Node\\n// The root node in which the position was resolved.\\nprototypeAccessors$3.doc.get = function () { return this.node(0) };\\n\\n// :: (?number) → Node\\n// The ancestor node at the given level. `p.node(p.depth)` is the\\n// same as `p.parent`.\\nResolvedPos.prototype.node = function node (depth) { return this.path[this.resolveDepth(depth) * 3] };\\n\\n// :: (?number) → number\\n// The index into the ancestor at the given level. If this points at\\n// the 3rd node in the 2nd paragraph on the top level, for example,\\n// `p.index(0)` is 2 and `p.index(1)` is 3.\\nResolvedPos.prototype.index = function index (depth) { return this.path[this.resolveDepth(depth) * 3 + 1] };\\n\\n// :: (?number) → number\\n// The index pointing after this position into the ancestor at the\\n// given level.\\nResolvedPos.prototype.indexAfter = function indexAfter (depth) {\\n  depth = this.resolveDepth(depth);\\n  return this.index(depth) + (depth == this.depth && !this.textOffset ? 0 : 1)\\n};\\n\\n// :: (?number) → number\\n// The (absolute) position at the start of the node at the given\\n// level.\\nResolvedPos.prototype.start = function start (depth) {\\n  depth = this.resolveDepth(depth);\\n  return depth == 0 ? 0 : this.path[depth * 3 - 1] + 1\\n};\\n\\n// :: (?number) → number\\n// The (absolute) position at the end of the node at the given\\n// level.\\nResolvedPos.prototype.end = function end (depth) {\\n  depth = this.resolveDepth(depth);\\n  return this.start(depth) + this.node(depth).content.size\\n};\\n\\n// :: (?number) → number\\n// The (absolute) position directly before the wrapping node at the\\n// given level, or, when `level` is `this.depth + 1`, the original\\n// position.\\nResolvedPos.prototype.before = function before (depth) {\\n  depth = this.resolveDepth(depth);\\n  if (!depth) { throw new RangeError(\\\"There is no position before the top-level node\\\") }\\n  return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1]\\n};\\n\\n// :: (?number) → number\\n// The (absolute) position directly after the wrapping node at the\\n// given level, or the original position when `level` is `this.depth + 1`.\\nResolvedPos.prototype.after = function after (depth) {\\n  depth = this.resolveDepth(depth);\\n  if (!depth) { throw new RangeError(\\\"There is no position after the top-level node\\\") }\\n  return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1] + this.path[depth * 3].nodeSize\\n};\\n\\n// :: number\\n// When this position points into a text node, this returns the\\n// distance between the position and the start of the text node.\\n// Will be zero for positions that point between nodes.\\nprototypeAccessors$3.textOffset.get = function () { return this.pos - this.path[this.path.length - 1] };\\n\\n// :: ?Node\\n// Get the node directly after the position, if any. If the position\\n// points into a text node, only the part of that node after the\\n// position is returned.\\nprototypeAccessors$3.nodeAfter.get = function () {\\n  var parent = this.parent, index = this.index(this.depth);\\n  if (index == parent.childCount) { return null }\\n  var dOff = this.pos - this.path[this.path.length - 1], child = parent.child(index);\\n  return dOff ? parent.child(index).cut(dOff) : child\\n};\\n\\n// :: ?Node\\n// Get the node directly before the position, if any. If the\\n// position points into a text node, only the part of that node\\n// before the position is returned.\\nprototypeAccessors$3.nodeBefore.get = function () {\\n  var index = this.index(this.depth);\\n  var dOff = this.pos - this.path[this.path.length - 1];\\n  if (dOff) { return this.parent.child(index).cut(0, dOff) }\\n  return index == 0 ? null : this.parent.child(index - 1)\\n};\\n\\n// :: () → [Mark]\\n// Get the marks at this position, factoring in the surrounding\\n// marks' [`inclusive`](#model.MarkSpec.inclusive) property. If the\\n// position is at the start of a non-empty node, the marks of the\\n// node after it (if any) are returned.\\nResolvedPos.prototype.marks = function marks () {\\n  var parent = this.parent, index = this.index();\\n\\n  // In an empty parent, return the empty array\\n  if (parent.content.size == 0) { return Mark.none }\\n\\n  // When inside a text node, just return the text node's marks\\n  if (this.textOffset) { return parent.child(index).marks }\\n\\n  var main = parent.maybeChild(index - 1), other = parent.maybeChild(index);\\n  // If the `after` flag is true of there is no node before, make\\n  // the node after this position the main reference.\\n  if (!main) { var tmp = main; main = other; other = tmp; }\\n\\n  // Use all marks in the main node, except those that have\\n  // `inclusive` set to false and are not present in the other node.\\n  var marks = main.marks;\\n  for (var i = 0; i < marks.length; i++)\\n    { if (marks[i].type.spec.inclusive === false && (!other || !marks[i].isInSet(other.marks)))\\n      { marks = marks[i--].removeFromSet(marks); } }\\n\\n  return marks\\n};\\n\\n// :: (ResolvedPos) → ?[Mark]\\n// Get the marks after the current position, if any, except those\\n// that are non-inclusive and not present at position `$end`. This\\n// is mostly useful for getting the set of marks to preserve after a\\n// deletion. Will return `null` if this position is at the end of\\n// its parent node or its parent node isn't a textblock (in which\\n// case no marks should be preserved).\\nResolvedPos.prototype.marksAcross = function marksAcross ($end) {\\n  var after = this.parent.maybeChild(this.index());\\n  if (!after || !after.isInline) { return null }\\n\\n  var marks = after.marks, next = $end.parent.maybeChild($end.index());\\n  for (var i = 0; i < marks.length; i++)\\n    { if (marks[i].type.spec.inclusive === false && (!next || !marks[i].isInSet(next.marks)))\\n      { marks = marks[i--].removeFromSet(marks); } }\\n  return marks\\n};\\n\\n// :: (number) → number\\n// The depth up to which this position and the given (non-resolved)\\n// position share the same parent nodes.\\nResolvedPos.prototype.sharedDepth = function sharedDepth (pos) {\\n    var this$1 = this;\\n\\n  for (var depth = this.depth; depth > 0; depth--)\\n    { if (this$1.start(depth) <= pos && this$1.end(depth) >= pos) { return depth } }\\n  return 0\\n};\\n\\n// :: (?ResolvedPos, ?(Node) → bool) → ?NodeRange\\n// Returns a range based on the place where this position and the\\n// given position diverge around block content. If both point into\\n// the same textblock, for example, a range around that textblock\\n// will be returned. If they point into different blocks, the range\\n// around those blocks in their shared ancestor is returned. You can\\n// pass in an optional predicate that will be called with a parent\\n// node to see if a range into that parent is acceptable.\\nResolvedPos.prototype.blockRange = function blockRange (other, pred) {\\n    var this$1 = this;\\n    if ( other === void 0 ) other = this;\\n\\n  if (other.pos < this.pos) { return other.blockRange(this) }\\n  for (var d = this.depth - (this.parent.inlineContent || this.pos == other.pos ? 1 : 0); d >= 0; d--)\\n    { if (other.pos <= this$1.end(d) && (!pred || pred(this$1.node(d))))\\n      { return new NodeRange(this$1, other, d) } }\\n};\\n\\n// :: (ResolvedPos) → bool\\n// Query whether the given position shares the same parent node.\\nResolvedPos.prototype.sameParent = function sameParent (other) {\\n  return this.pos - this.parentOffset == other.pos - other.parentOffset\\n};\\n\\n// :: (ResolvedPos) → ResolvedPos\\n// Return the greater of this and the given position.\\nResolvedPos.prototype.max = function max (other) {\\n  return other.pos > this.pos ? other : this\\n};\\n\\n// :: (ResolvedPos) → ResolvedPos\\n// Return the smaller of this and the given position.\\nResolvedPos.prototype.min = function min (other) {\\n  return other.pos < this.pos ? other : this\\n};\\n\\nResolvedPos.prototype.toString = function toString () {\\n    var this$1 = this;\\n\\n  var str = \\\"\\\";\\n  for (var i = 1; i <= this.depth; i++)\\n    { str += (str ? \\\"/\\\" : \\\"\\\") + this$1.node(i).type.name + \\\"_\\\" + this$1.index(i - 1); }\\n  return str + \\\":\\\" + this.parentOffset\\n};\\n\\nResolvedPos.resolve = function resolve (doc, pos) {\\n  if (!(pos >= 0 && pos <= doc.content.size)) { throw new RangeError(\\\"Position \\\" + pos + \\\" out of range\\\") }\\n  var path = [];\\n  var start = 0, parentOffset = pos;\\n  for (var node = doc;;) {\\n    var ref = node.content.findIndex(parentOffset);\\n      var index = ref.index;\\n      var offset = ref.offset;\\n    var rem = parentOffset - offset;\\n    path.push(node, index, start + offset);\\n    if (!rem) { break }\\n    node = node.child(index);\\n    if (node.isText) { break }\\n    parentOffset = rem - 1;\\n    start += offset + 1;\\n  }\\n  return new ResolvedPos(pos, path, parentOffset)\\n};\\n\\nResolvedPos.resolveCached = function resolveCached (doc, pos) {\\n  for (var i = 0; i < resolveCache.length; i++) {\\n    var cached = resolveCache[i];\\n    if (cached.pos == pos && cached.doc == doc) { return cached }\\n  }\\n  var result = resolveCache[resolveCachePos] = ResolvedPos.resolve(doc, pos);\\n  resolveCachePos = (resolveCachePos + 1) % resolveCacheSize;\\n  return result\\n};\\n\\nObject.defineProperties( ResolvedPos.prototype, prototypeAccessors$3 );\\n\\nvar resolveCache = [];\\nvar resolveCachePos = 0;\\nvar resolveCacheSize = 12;\\n\\n// ::- Represents a flat range of content, i.e. one that starts and\\n// ends in the same node.\\nvar NodeRange = function NodeRange($from, $to, depth) {\\n  // :: ResolvedPos A resolved position along the start of the\\n  // content. May have a `depth` greater than this object's `depth`\\n  // property, since these are the positions that were used to\\n  // compute the range, not re-resolved positions directly at its\\n  // boundaries.\\n  this.$from = $from;\\n  // :: ResolvedPos A position along the end of the content. See\\n  // caveat for [`$from`](#model.NodeRange.$from).\\n  this.$to = $to;\\n  // :: number The depth of the node that this range points into.\\n  this.depth = depth;\\n};\\n\\nvar prototypeAccessors$1$1 = { start: {},end: {},parent: {},startIndex: {},endIndex: {} };\\n\\n// :: number The position at the start of the range.\\nprototypeAccessors$1$1.start.get = function () { return this.$from.before(this.depth + 1) };\\n// :: number The position at the end of the range.\\nprototypeAccessors$1$1.end.get = function () { return this.$to.after(this.depth + 1) };\\n\\n// :: Node The parent node that the range points into.\\nprototypeAccessors$1$1.parent.get = function () { return this.$from.node(this.depth) };\\n// :: number The start index of the range in the parent node.\\nprototypeAccessors$1$1.startIndex.get = function () { return this.$from.index(this.depth) };\\n// :: number The end index of the range in the parent node.\\nprototypeAccessors$1$1.endIndex.get = function () { return this.$to.indexAfter(this.depth) };\\n\\nObject.defineProperties( NodeRange.prototype, prototypeAccessors$1$1 );\\n\\nvar emptyAttrs = Object.create(null);\\n\\n// ::- This class represents a node in the tree that makes up a\\n// ProseMirror document. So a document is an instance of `Node`, with\\n// children that are also instances of `Node`.\\n//\\n// Nodes are persistent data structures. Instead of changing them, you\\n// create new ones with the content you want. Old ones keep pointing\\n// at the old document shape. This is made cheaper by sharing\\n// structure between the old and new data as much as possible, which a\\n// tree shape like this (without back pointers) makes easy.\\n//\\n// **Do not** directly mutate the properties of a `Node` object. See\\n// [the guide](/docs/guide/#doc) for more information.\\nvar Node = function Node(type, attrs, content, marks) {\\n  // :: NodeType\\n  // The type of node that this is.\\n  this.type = type;\\n\\n  // :: Object\\n  // An object mapping attribute names to values. The kind of\\n  // attributes allowed and required are\\n  // [determined](#model.NodeSpec.attrs) by the node type.\\n  this.attrs = attrs;\\n\\n  // :: Fragment\\n  // A container holding the node's children.\\n  this.content = content || Fragment.empty;\\n\\n  // :: [Mark]\\n  // The marks (things like whether it is emphasized or part of a\\n  // link) applied to this node.\\n  this.marks = marks || Mark.none;\\n};\\n\\nvar prototypeAccessors = { nodeSize: {},childCount: {},textContent: {},firstChild: {},lastChild: {},isBlock: {},isTextblock: {},inlineContent: {},isInline: {},isText: {},isLeaf: {},isAtom: {} };\\n\\n// text:: ?string\\n// For text nodes, this contains the node's text content.\\n\\n// :: number\\n// The size of this node, as defined by the integer-based [indexing\\n// scheme](/docs/guide/#doc.indexing). For text nodes, this is the\\n// amount of characters. For other leaf nodes, it is one. For\\n// non-leaf nodes, it is the size of the content plus two (the start\\n// and end token).\\nprototypeAccessors.nodeSize.get = function () { return this.isLeaf ? 1 : 2 + this.content.size };\\n\\n// :: number\\n// The number of children that the node has.\\nprototypeAccessors.childCount.get = function () { return this.content.childCount };\\n\\n// :: (number) → Node\\n// Get the child node at the given index. Raises an error when the\\n// index is out of range.\\nNode.prototype.child = function child (index) { return this.content.child(index) };\\n\\n// :: (number) → ?Node\\n// Get the child node at the given index, if it exists.\\nNode.prototype.maybeChild = function maybeChild (index) { return this.content.maybeChild(index) };\\n\\n// :: ((node: Node, offset: number, index: number))\\n// Call `f` for every child node, passing the node, its offset\\n// into this parent node, and its index.\\nNode.prototype.forEach = function forEach (f) { this.content.forEach(f); };\\n\\n// :: (number, number, (node: Node, pos: number, parent: Node, index: number) → ?bool, ?number)\\n// Invoke a callback for all descendant nodes recursively between\\n// the given two positions that are relative to start of this node's\\n// content. The callback is invoked with the node, its\\n// parent-relative position, its parent node, and its child index.\\n// When the callback returns false for a given node, that node's\\n// children will not be recursed over. The last parameter can be\\n// used to specify a starting position to count from.\\nNode.prototype.nodesBetween = function nodesBetween (from, to, f, startPos) {\\n    if ( startPos === void 0 ) startPos = 0;\\n\\n  this.content.nodesBetween(from, to, f, startPos, this);\\n};\\n\\n// :: ((node: Node, pos: number, parent: Node) → ?bool)\\n// Call the given callback for every descendant node. Doesn't\\n// descend into a node when the callback returns `false`.\\nNode.prototype.descendants = function descendants (f) {\\n  this.nodesBetween(0, this.content.size, f);\\n};\\n\\n// :: string\\n// Concatenates all the text nodes found in this fragment and its\\n// children.\\nprototypeAccessors.textContent.get = function () { return this.textBetween(0, this.content.size, \\\"\\\") };\\n\\n// :: (number, number, ?string, ?string) → string\\n// Get all text between positions `from` and `to`. When\\n// `blockSeparator` is given, it will be inserted whenever a new\\n// block node is started. When `leafText` is given, it'll be\\n// inserted for every non-text leaf node encountered.\\nNode.prototype.textBetween = function textBetween (from, to, blockSeparator, leafText) {\\n  return this.content.textBetween(from, to, blockSeparator, leafText)\\n};\\n\\n// :: ?Node\\n// Returns this node's first child, or `null` if there are no\\n// children.\\nprototypeAccessors.firstChild.get = function () { return this.content.firstChild };\\n\\n// :: ?Node\\n// Returns this node's last child, or `null` if there are no\\n// children.\\nprototypeAccessors.lastChild.get = function () { return this.content.lastChild };\\n\\n// :: (Node) → bool\\n// Test whether two nodes represent the same piece of document.\\nNode.prototype.eq = function eq (other) {\\n  return this == other || (this.sameMarkup(other) && this.content.eq(other.content))\\n};\\n\\n// :: (Node) → bool\\n// Compare the markup (type, attributes, and marks) of this node to\\n// those of another. Returns `true` if both have the same markup.\\nNode.prototype.sameMarkup = function sameMarkup (other) {\\n  return this.hasMarkup(other.type, other.attrs, other.marks)\\n};\\n\\n// :: (NodeType, ?Object, ?[Mark]) → bool\\n// Check whether this node's markup correspond to the given type,\\n// attributes, and marks.\\nNode.prototype.hasMarkup = function hasMarkup (type, attrs, marks) {\\n  return this.type == type &&\\n    compareDeep(this.attrs, attrs || type.defaultAttrs || emptyAttrs) &&\\n    Mark.sameSet(this.marks, marks || Mark.none)\\n};\\n\\n// :: (?Fragment) → Node\\n// Create a new node with the same markup as this node, containing\\n// the given content (or empty, if no content is given).\\nNode.prototype.copy = function copy (content) {\\n    if ( content === void 0 ) content = null;\\n\\n  if (content == this.content) { return this }\\n  return new this.constructor(this.type, this.attrs, content, this.marks)\\n};\\n\\n// :: ([Mark]) → Node\\n// Create a copy of this node, with the given set of marks instead\\n// of the node's own marks.\\nNode.prototype.mark = function mark (marks) {\\n  return marks == this.marks ? this : new this.constructor(this.type, this.attrs, this.content, marks)\\n};\\n\\n// :: (number, ?number) → Node\\n// Create a copy of this node with only the content between the\\n// given positions. If `to` is not given, it defaults to the end of\\n// the node.\\nNode.prototype.cut = function cut (from, to) {\\n  if (from == 0 && to == this.content.size) { return this }\\n  return this.copy(this.content.cut(from, to))\\n};\\n\\n// :: (number, ?number) → Slice\\n// Cut out the part of the document between the given positions, and\\n// return it as a `Slice` object.\\nNode.prototype.slice = function slice (from, to, includeParents) {\\n    if ( to === void 0 ) to = this.content.size;\\n    if ( includeParents === void 0 ) includeParents = false;\\n\\n  if (from == to) { return Slice.empty }\\n\\n  var $from = this.resolve(from), $to = this.resolve(to);\\n  var depth = includeParents ? 0 : $from.sharedDepth(to);\\n  var start = $from.start(depth), node = $from.node(depth);\\n  var content = node.content.cut($from.pos - start, $to.pos - start);\\n  return new Slice(content, $from.depth - depth, $to.depth - depth)\\n};\\n\\n// :: (number, number, Slice) → Node\\n// Replace the part of the document between the given positions with\\n// the given slice. The slice must 'fit', meaning its open sides\\n// must be able to connect to the surrounding content, and its\\n// content nodes must be valid children for the node they are placed\\n// into. If any of this is violated, an error of type\\n// [`ReplaceError`](#model.ReplaceError) is thrown.\\nNode.prototype.replace = function replace$1 (from, to, slice) {\\n  return replace(this.resolve(from), this.resolve(to), slice)\\n};\\n\\n// :: (number) → ?Node\\n// Find the node directly after the given position.\\nNode.prototype.nodeAt = function nodeAt (pos) {\\n  for (var node = this;;) {\\n    var ref = node.content.findIndex(pos);\\n      var index = ref.index;\\n      var offset = ref.offset;\\n    node = node.maybeChild(index);\\n    if (!node) { return null }\\n    if (offset == pos || node.isText) { return node }\\n    pos -= offset + 1;\\n  }\\n};\\n\\n// :: (number) → {node: ?Node, index: number, offset: number}\\n// Find the (direct) child node after the given offset, if any,\\n// and return it along with its index and offset relative to this\\n// node.\\nNode.prototype.childAfter = function childAfter (pos) {\\n  var ref = this.content.findIndex(pos);\\n    var index = ref.index;\\n    var offset = ref.offset;\\n  return {node: this.content.maybeChild(index), index: index, offset: offset}\\n};\\n\\n// :: (number) → {node: ?Node, index: number, offset: number}\\n// Find the (direct) child node before the given offset, if any,\\n// and return it along with its index and offset relative to this\\n// node.\\nNode.prototype.childBefore = function childBefore (pos) {\\n  if (pos == 0) { return {node: null, index: 0, offset: 0} }\\n  var ref = this.content.findIndex(pos);\\n    var index = ref.index;\\n    var offset = ref.offset;\\n  if (offset < pos) { return {node: this.content.child(index), index: index, offset: offset} }\\n  var node = this.content.child(index - 1);\\n  return {node: node, index: index - 1, offset: offset - node.nodeSize}\\n};\\n\\n// :: (number) → ResolvedPos\\n// Resolve the given position in the document, returning an\\n// [object](#model.ResolvedPos) with information about its context.\\nNode.prototype.resolve = function resolve (pos) { return ResolvedPos.resolveCached(this, pos) };\\n\\nNode.prototype.resolveNoCache = function resolveNoCache (pos) { return ResolvedPos.resolve(this, pos) };\\n\\n// :: (number, number, MarkType) → bool\\n// Test whether a mark of the given type occurs in this document\\n// between the two given positions.\\nNode.prototype.rangeHasMark = function rangeHasMark (from, to, type) {\\n  var found = false;\\n  if (to > from) { this.nodesBetween(from, to, function (node) {\\n    if (type.isInSet(node.marks)) { found = true; }\\n    return !found\\n  }); }\\n  return found\\n};\\n\\n// :: bool\\n// True when this is a block (non-inline node)\\nprototypeAccessors.isBlock.get = function () { return this.type.isBlock };\\n\\n// :: bool\\n// True when this is a textblock node, a block node with inline\\n// content.\\nprototypeAccessors.isTextblock.get = function () { return this.type.isTextblock };\\n\\n// :: bool\\n// True when this node has inline content.\\nprototypeAccessors.inlineContent.get = function () { return this.type.inlineContent };\\n\\n// :: bool\\n// True when this is an inline node (a text node or a node that can\\n// appear among text).\\nprototypeAccessors.isInline.get = function () { return this.type.isInline };\\n\\n// :: bool\\n// True when this is a text node.\\nprototypeAccessors.isText.get = function () { return this.type.isText };\\n\\n// :: bool\\n// True when this is a leaf node.\\nprototypeAccessors.isLeaf.get = function () { return this.type.isLeaf };\\n\\n// :: bool\\n// True when this is an atom, i.e. when it does not have directly\\n// editable content. This is usually the same as `isLeaf`, but can\\n// be configured with the [`atom` property](#model.NodeSpec.atom) on\\n// a node's spec (typically used when the node is displayed as an\\n// uneditable [node view](#view.NodeView)).\\nprototypeAccessors.isAtom.get = function () { return this.type.isAtom };\\n\\n// :: () → string\\n// Return a string representation of this node for debugging\\n// purposes.\\nNode.prototype.toString = function toString () {\\n  if (this.type.spec.toDebugString) { return this.type.spec.toDebugString(this) }\\n  var name = this.type.name;\\n  if (this.content.size)\\n    { name += \\\"(\\\" + this.content.toStringInner() + \\\")\\\"; }\\n  return wrapMarks(this.marks, name)\\n};\\n\\n// :: (number) → ContentMatch\\n// Get the content match in this node at the given index.\\nNode.prototype.contentMatchAt = function contentMatchAt (index) {\\n  var match = this.type.contentMatch.matchFragment(this.content, 0, index);\\n  if (!match) { throw new Error(\\\"Called contentMatchAt on a node with invalid content\\\") }\\n  return match\\n};\\n\\n// :: (number, number, ?Fragment, ?number, ?number) → bool\\n// Test whether replacing the range between `from` and `to` (by\\n// child index) with the given replacement fragment (which defaults\\n// to the empty fragment) would leave the node's content valid. You\\n// can optionally pass `start` and `end` indices into the\\n// replacement fragment.\\nNode.prototype.canReplace = function canReplace (from, to, replacement, start, end) {\\n    var this$1 = this;\\n    if ( replacement === void 0 ) replacement = Fragment.empty;\\n    if ( start === void 0 ) start = 0;\\n    if ( end === void 0 ) end = replacement.childCount;\\n\\n  var one = this.contentMatchAt(from).matchFragment(replacement, start, end);\\n  var two = one && one.matchFragment(this.content, to);\\n  if (!two || !two.validEnd) { return false }\\n  for (var i = start; i < end; i++) { if (!this$1.type.allowsMarks(replacement.child(i).marks)) { return false } }\\n  return true\\n};\\n\\n// :: (number, number, NodeType, ?[Mark]) → bool\\n// Test whether replacing the range `from` to `to` (by index) with a\\n// node of the given type would leave the node's content valid.\\nNode.prototype.canReplaceWith = function canReplaceWith (from, to, type, marks) {\\n  if (marks && !this.type.allowsMarks(marks)) { return false }\\n  var start = this.contentMatchAt(from).matchType(type);\\n  var end = start && start.matchFragment(this.content, to);\\n  return end ? end.validEnd : false\\n};\\n\\n// :: (Node) → bool\\n// Test whether the given node's content could be appended to this\\n// node. If that node is empty, this will only return true if there\\n// is at least one node type that can appear in both nodes (to avoid\\n// merging completely incompatible nodes).\\nNode.prototype.canAppend = function canAppend (other) {\\n  if (other.content.size) { return this.canReplace(this.childCount, this.childCount, other.content) }\\n  else { return this.type.compatibleContent(other.type) }\\n};\\n\\n// Unused. Left for backwards compatibility.\\nNode.prototype.defaultContentType = function defaultContentType (at) {\\n  return this.contentMatchAt(at).defaultType\\n};\\n\\n// :: ()\\n// Check whether this node and its descendants conform to the\\n// schema, and raise error when they do not.\\nNode.prototype.check = function check () {\\n  if (!this.type.validContent(this.content))\\n    { throw new RangeError((\\\"Invalid content for node \\\" + (this.type.name) + \\\": \\\" + (this.content.toString().slice(0, 50)))) }\\n  this.content.forEach(function (node) { return node.check(); });\\n};\\n\\n// :: () → Object\\n// Return a JSON-serializeable representation of this node.\\nNode.prototype.toJSON = function toJSON () {\\n    var this$1 = this;\\n\\n  var obj = {type: this.type.name};\\n  for (var _ in this$1.attrs) {\\n    obj.attrs = this$1.attrs;\\n    break\\n  }\\n  if (this.content.size)\\n    { obj.content = this.content.toJSON(); }\\n  if (this.marks.length)\\n    { obj.marks = this.marks.map(function (n) { return n.toJSON(); }); }\\n  return obj\\n};\\n\\n// :: (Schema, Object) → Node\\n// Deserialize a node from its JSON representation.\\nNode.fromJSON = function fromJSON (schema, json) {\\n  if (!json) { throw new RangeError(\\\"Invalid input for Node.fromJSON\\\") }\\n  var marks = null;\\n  if (json.marks) {\\n    if (!Array.isArray(json.marks)) { throw new RangeError(\\\"Invalid mark data for Node.fromJSON\\\") }\\n    marks = json.marks.map(schema.markFromJSON);\\n  }\\n  if (json.type == \\\"text\\\") {\\n    if (typeof json.text != \\\"string\\\") { throw new RangeError(\\\"Invalid text node in JSON\\\") }\\n    return schema.text(json.text, marks)\\n  }\\n  var content = Fragment.fromJSON(schema, json.content);\\n  return schema.nodeType(json.type).create(json.attrs, content, marks)\\n};\\n\\nObject.defineProperties( Node.prototype, prototypeAccessors );\\n\\nvar TextNode = (function (Node) {\\n  function TextNode(type, attrs, content, marks) {\\n    Node.call(this, type, attrs, null, marks);\\n\\n    if (!content) { throw new RangeError(\\\"Empty text nodes are not allowed\\\") }\\n\\n    this.text = content;\\n  }\\n\\n  if ( Node ) TextNode.__proto__ = Node;\\n  TextNode.prototype = Object.create( Node && Node.prototype );\\n  TextNode.prototype.constructor = TextNode;\\n\\n  var prototypeAccessors$1 = { textContent: {},nodeSize: {} };\\n\\n  TextNode.prototype.toString = function toString () {\\n    if (this.type.spec.toDebugString) { return this.type.spec.toDebugString(this) }\\n    return wrapMarks(this.marks, JSON.stringify(this.text))\\n  };\\n\\n  prototypeAccessors$1.textContent.get = function () { return this.text };\\n\\n  TextNode.prototype.textBetween = function textBetween (from, to) { return this.text.slice(from, to) };\\n\\n  prototypeAccessors$1.nodeSize.get = function () { return this.text.length };\\n\\n  TextNode.prototype.mark = function mark (marks) {\\n    return marks == this.marks ? this : new TextNode(this.type, this.attrs, this.text, marks)\\n  };\\n\\n  TextNode.prototype.withText = function withText (text) {\\n    if (text == this.text) { return this }\\n    return new TextNode(this.type, this.attrs, text, this.marks)\\n  };\\n\\n  TextNode.prototype.cut = function cut (from, to) {\\n    if ( from === void 0 ) from = 0;\\n    if ( to === void 0 ) to = this.text.length;\\n\\n    if (from == 0 && to == this.text.length) { return this }\\n    return this.withText(this.text.slice(from, to))\\n  };\\n\\n  TextNode.prototype.eq = function eq (other) {\\n    return this.sameMarkup(other) && this.text == other.text\\n  };\\n\\n  TextNode.prototype.toJSON = function toJSON () {\\n    var base = Node.prototype.toJSON.call(this);\\n    base.text = this.text;\\n    return base\\n  };\\n\\n  Object.defineProperties( TextNode.prototype, prototypeAccessors$1 );\\n\\n  return TextNode;\\n}(Node));\\n\\nfunction wrapMarks(marks, str) {\\n  for (var i = marks.length - 1; i >= 0; i--)\\n    { str = marks[i].type.name + \\\"(\\\" + str + \\\")\\\"; }\\n  return str\\n}\\n\\n// ::- Instances of this class represent a match state of a node\\n// type's [content expression](#model.NodeSpec.content), and can be\\n// used to find out whether further content matches here, and whether\\n// a given position is a valid end of the node.\\nvar ContentMatch = function ContentMatch(validEnd) {\\n  // :: bool\\n  // True when this match state represents a valid end of the node.\\n  this.validEnd = validEnd;\\n  this.next = [];\\n  this.wrapCache = [];\\n};\\n\\nvar prototypeAccessors$5 = { inlineContent: {},defaultType: {},edgeCount: {} };\\n\\nContentMatch.parse = function parse (string, nodeTypes) {\\n  var stream = new TokenStream(string, nodeTypes);\\n  if (stream.next == null) { return ContentMatch.empty }\\n  var expr = parseExpr(stream);\\n  if (stream.next) { stream.err(\\\"Unexpected trailing text\\\"); }\\n  var match = dfa(nfa(expr));\\n  checkForDeadEnds(match, stream);\\n  return match\\n};\\n\\n// :: (NodeType) → ?ContentMatch\\n// Match a node type, returning a match after that node if\\n// successful.\\nContentMatch.prototype.matchType = function matchType (type) {\\n    var this$1 = this;\\n\\n  for (var i = 0; i < this.next.length; i += 2)\\n    { if (this$1.next[i] == type) { return this$1.next[i + 1] } }\\n  return null\\n};\\n\\n// :: (Fragment, ?number, ?number) → ?ContentMatch\\n// Try to match a fragment. Returns the resulting match when\\n// successful.\\nContentMatch.prototype.matchFragment = function matchFragment (frag, start, end) {\\n    if ( start === void 0 ) start = 0;\\n    if ( end === void 0 ) end = frag.childCount;\\n\\n  var cur = this;\\n  for (var i = start; cur && i < end; i++)\\n    { cur = cur.matchType(frag.child(i).type); }\\n  return cur\\n};\\n\\nprototypeAccessors$5.inlineContent.get = function () {\\n  var first = this.next[0];\\n  return first ? first.isInline : false\\n};\\n\\n// :: ?NodeType\\n// Get the first matching node type at this match position that can\\n// be generated.\\nprototypeAccessors$5.defaultType.get = function () {\\n    var this$1 = this;\\n\\n  for (var i = 0; i < this.next.length; i += 2) {\\n    var type = this$1.next[i];\\n    if (!(type.isText || type.hasRequiredAttrs())) { return type }\\n  }\\n};\\n\\nContentMatch.prototype.compatible = function compatible (other) {\\n    var this$1 = this;\\n\\n  for (var i = 0; i < this.next.length; i += 2)\\n    { for (var j = 0; j < other.next.length; j += 2)\\n      { if (this$1.next[i] == other.next[j]) { return true } } }\\n  return false\\n};\\n\\n// :: (Fragment, bool, ?number) → ?Fragment\\n// Try to match the given fragment, and if that fails, see if it can\\n// be made to match by inserting nodes in front of it. When\\n// successful, return a fragment of inserted nodes (which may be\\n// empty if nothing had to be inserted). When `toEnd` is true, only\\n// return a fragment if the resulting match goes to the end of the\\n// content expression.\\nContentMatch.prototype.fillBefore = function fillBefore (after, toEnd, startIndex) {\\n    if ( toEnd === void 0 ) toEnd = false;\\n    if ( startIndex === void 0 ) startIndex = 0;\\n\\n  var seen = [this];\\n  function search(match, types) {\\n    var finished = match.matchFragment(after, startIndex);\\n    if (finished && (!toEnd || finished.validEnd))\\n      { return Fragment.from(types.map(function (tp) { return tp.createAndFill(); })) }\\n\\n    for (var i = 0; i < match.next.length; i += 2) {\\n      var type = match.next[i], next = match.next[i + 1];\\n      if (!(type.isText || type.hasRequiredAttrs()) && seen.indexOf(next) == -1) {\\n        seen.push(next);\\n        var found = search(next, types.concat(type));\\n        if (found) { return found }\\n      }\\n    }\\n  }\\n\\n  return search(this, [])\\n};\\n\\n// :: (NodeType) → ?[NodeType]\\n// Find a set of wrapping node types that would allow a node of the\\n// given type to appear at this position. The result may be empty\\n// (when it fits directly) and will be null when no such wrapping\\n// exists.\\nContentMatch.prototype.findWrapping = function findWrapping (target) {\\n    var this$1 = this;\\n\\n  for (var i = 0; i < this.wrapCache.length; i += 2)\\n    { if (this$1.wrapCache[i] == target) { return this$1.wrapCache[i + 1] } }\\n  var computed = this.computeWrapping(target);\\n  this.wrapCache.push(target, computed);\\n  return computed\\n};\\n\\nContentMatch.prototype.computeWrapping = function computeWrapping (target) {\\n  var seen = Object.create(null), active = [{match: this, type: null, via: null}];\\n  while (active.length) {\\n    var current = active.shift(), match = current.match;\\n    if (match.matchType(target)) {\\n      var result = [];\\n      for (var obj = current; obj.type; obj = obj.via)\\n        { result.push(obj.type); }\\n      return result.reverse()\\n    }\\n    for (var i = 0; i < match.next.length; i += 2) {\\n      var type = match.next[i];\\n      if (!type.isLeaf && !type.hasRequiredAttrs() && !(type.name in seen) && (!current.type || match.next[i + 1].validEnd)) {\\n        active.push({match: type.contentMatch, type: type, via: current});\\n        seen[type.name] = true;\\n      }\\n    }\\n  }\\n};\\n\\n// :: number\\n// The number of outgoing edges this node has in the finite\\n// automaton that describes the content expression.\\nprototypeAccessors$5.edgeCount.get = function () {\\n  return this.next.length >> 1\\n};\\n\\n// :: (number) → {type: NodeType, next: ContentMatch}\\n// Get the _n_th outgoing edge from this node in the finite\\n// automaton that describes the content expression.\\nContentMatch.prototype.edge = function edge (n) {\\n  var i = n << 1;\\n  if (i > this.next.length) { throw new RangeError((\\\"There's no \\\" + n + \\\"th edge in this content match\\\")) }\\n  return {type: this.next[i], next: this.next[i + 1]}\\n};\\n\\nContentMatch.prototype.toString = function toString () {\\n  var seen = [];\\n  function scan(m) {\\n    seen.push(m);\\n    for (var i = 1; i < m.next.length; i += 2)\\n      { if (seen.indexOf(m.next[i]) == -1) { scan(m.next[i]); } }\\n  }\\n  scan(this);\\n  return seen.map(function (m, i) {\\n    var out = i + (m.validEnd ? \\\"*\\\" : \\\" \\\") + \\\" \\\";\\n    for (var i$1 = 0; i$1 < m.next.length; i$1 += 2)\\n      { out += (i$1 ? \\\", \\\" : \\\"\\\") + m.next[i$1].name + \\\"->\\\" + seen.indexOf(m.next[i$1 + 1]); }\\n    return out\\n  }).join(\\\"\\\\n\\\")\\n};\\n\\nObject.defineProperties( ContentMatch.prototype, prototypeAccessors$5 );\\n\\nContentMatch.empty = new ContentMatch(true);\\n\\nvar TokenStream = function TokenStream(string, nodeTypes) {\\n  this.string = string;\\n  this.nodeTypes = nodeTypes;\\n  this.inline = null;\\n  this.pos = 0;\\n  this.tokens = string.split(/\\\\s*(?=\\\\b|\\\\W|$)/);\\n  if (this.tokens[this.tokens.length - 1] == \\\"\\\") { this.tokens.pop(); }\\n  if (this.tokens[0] == \\\"\\\") { this.tokens.unshift(); }\\n};\\n\\nvar prototypeAccessors$1$3 = { next: {} };\\n\\nprototypeAccessors$1$3.next.get = function () { return this.tokens[this.pos] };\\n\\nTokenStream.prototype.eat = function eat (tok) { return this.next == tok && (this.pos++ || true) };\\n\\nTokenStream.prototype.err = function err (str) { throw new SyntaxError(str + \\\" (in content expression '\\\" + this.string + \\\"')\\\") };\\n\\nObject.defineProperties( TokenStream.prototype, prototypeAccessors$1$3 );\\n\\nfunction parseExpr(stream) {\\n  var exprs = [];\\n  do { exprs.push(parseExprSeq(stream)); }\\n  while (stream.eat(\\\"|\\\"))\\n  return exprs.length == 1 ? exprs[0] : {type: \\\"choice\\\", exprs: exprs}\\n}\\n\\nfunction parseExprSeq(stream) {\\n  var exprs = [];\\n  do { exprs.push(parseExprSubscript(stream)); }\\n  while (stream.next && stream.next != \\\")\\\" && stream.next != \\\"|\\\")\\n  return exprs.length == 1 ? exprs[0] : {type: \\\"seq\\\", exprs: exprs}\\n}\\n\\nfunction parseExprSubscript(stream) {\\n  var expr = parseExprAtom(stream);\\n  for (;;) {\\n    if (stream.eat(\\\"+\\\"))\\n      { expr = {type: \\\"plus\\\", expr: expr}; }\\n    else if (stream.eat(\\\"*\\\"))\\n      { expr = {type: \\\"star\\\", expr: expr}; }\\n    else if (stream.eat(\\\"?\\\"))\\n      { expr = {type: \\\"opt\\\", expr: expr}; }\\n    else if (stream.eat(\\\"{\\\"))\\n      { expr = parseExprRange(stream, expr); }\\n    else { break }\\n  }\\n  return expr\\n}\\n\\nfunction parseNum(stream) {\\n  if (/\\\\D/.test(stream.next)) { stream.err(\\\"Expected number, got '\\\" + stream.next + \\\"'\\\"); }\\n  var result = Number(stream.next);\\n  stream.pos++;\\n  return result\\n}\\n\\nfunction parseExprRange(stream, expr) {\\n  var min = parseNum(stream), max = min;\\n  if (stream.eat(\\\",\\\")) {\\n    if (stream.next != \\\"}\\\") { max = parseNum(stream); }\\n    else { max = -1; }\\n  }\\n  if (!stream.eat(\\\"}\\\")) { stream.err(\\\"Unclosed braced range\\\"); }\\n  return {type: \\\"range\\\", min: min, max: max, expr: expr}\\n}\\n\\nfunction resolveName(stream, name) {\\n  var types = stream.nodeTypes, type = types[name];\\n  if (type) { return [type] }\\n  var result = [];\\n  for (var typeName in types) {\\n    var type$1 = types[typeName];\\n    if (type$1.groups.indexOf(name) > -1) { result.push(type$1); }\\n  }\\n  if (result.length == 0) { stream.err(\\\"No node type or group '\\\" + name + \\\"' found\\\"); }\\n  return result\\n}\\n\\nfunction parseExprAtom(stream) {\\n  if (stream.eat(\\\"(\\\")) {\\n    var expr = parseExpr(stream);\\n    if (!stream.eat(\\\")\\\")) { stream.err(\\\"Missing closing paren\\\"); }\\n    return expr\\n  } else if (!/\\\\W/.test(stream.next)) {\\n    var exprs = resolveName(stream, stream.next).map(function (type) {\\n      if (stream.inline == null) { stream.inline = type.isInline; }\\n      else if (stream.inline != type.isInline) { stream.err(\\\"Mixing inline and block content\\\"); }\\n      return {type: \\\"name\\\", value: type}\\n    });\\n    stream.pos++;\\n    return exprs.length == 1 ? exprs[0] : {type: \\\"choice\\\", exprs: exprs}\\n  } else {\\n    stream.err(\\\"Unexpected token '\\\" + stream.next + \\\"'\\\");\\n  }\\n}\\n\\n// The code below helps compile a regular-expression-like language\\n// into a deterministic finite automaton. For a good introduction to\\n// these concepts, see https://swtch.com/~rsc/regexp/regexp1.html\\n\\n// : (Object) → [[{term: ?any, to: number}]]\\n// Construct an NFA from an expression as returned by the parser. The\\n// NFA is represented as an array of states, which are themselves\\n// arrays of edges, which are `{term, to}` objects. The first state is\\n// the entry state and the last node is the success state.\\n//\\n// Note that unlike typical NFAs, the edge ordering in this one is\\n// significant, in that it is used to contruct filler content when\\n// necessary.\\nfunction nfa(expr) {\\n  var nfa = [[]];\\n  connect(compile(expr, 0), node());\\n  return nfa\\n\\n  function node() { return nfa.push([]) - 1 }\\n  function edge(from, to, term) {\\n    var edge = {term: term, to: to};\\n    nfa[from].push(edge);\\n    return edge\\n  }\\n  function connect(edges, to) { edges.forEach(function (edge) { return edge.to = to; }); }\\n\\n  function compile(expr, from) {\\n    if (expr.type == \\\"choice\\\") {\\n      return expr.exprs.reduce(function (out, expr) { return out.concat(compile(expr, from)); }, [])\\n    } else if (expr.type == \\\"seq\\\") {\\n      for (var i = 0;; i++) {\\n        var next = compile(expr.exprs[i], from);\\n        if (i == expr.exprs.length - 1) { return next }\\n        connect(next, from = node());\\n      }\\n    } else if (expr.type == \\\"star\\\") {\\n      var loop = node();\\n      edge(from, loop);\\n      connect(compile(expr.expr, loop), loop);\\n      return [edge(loop)]\\n    } else if (expr.type == \\\"plus\\\") {\\n      var loop$1 = node();\\n      connect(compile(expr.expr, from), loop$1);\\n      connect(compile(expr.expr, loop$1), loop$1);\\n      return [edge(loop$1)]\\n    } else if (expr.type == \\\"opt\\\") {\\n      return [edge(from)].concat(compile(expr.expr, from))\\n    } else if (expr.type == \\\"range\\\") {\\n      var cur = from;\\n      for (var i$1 = 0; i$1 < expr.min; i$1++) {\\n        var next$1 = node();\\n        connect(compile(expr.expr, cur), next$1);\\n        cur = next$1;\\n      }\\n      if (expr.max == -1) {\\n        connect(compile(expr.expr, cur), cur);\\n      } else {\\n        for (var i$2 = expr.min; i$2 < expr.max; i$2++) {\\n          var next$2 = node();\\n          edge(cur, next$2);\\n          connect(compile(expr.expr, cur), next$2);\\n          cur = next$2;\\n        }\\n      }\\n      return [edge(cur)]\\n    } else if (expr.type == \\\"name\\\") {\\n      return [edge(from, null, expr.value)]\\n    }\\n  }\\n}\\n\\nfunction cmp(a, b) { return a - b }\\n\\n// Get the set of nodes reachable by null edges from `node`. Omit\\n// nodes with only a single null-out-edge, since they may lead to\\n// needless duplicated nodes.\\nfunction nullFrom(nfa, node) {\\n  var result = [];\\n  scan(node);\\n  return result.sort(cmp)\\n\\n  function scan(node) {\\n    var edges = nfa[node];\\n    if (edges.length == 1 && !edges[0].term) { return scan(edges[0].to) }\\n    result.push(node);\\n    for (var i = 0; i < edges.length; i++) {\\n      var ref = edges[i];\\n      var term = ref.term;\\n      var to = ref.to;\\n      if (!term && result.indexOf(to) == -1) { scan(to); }\\n    }\\n  }\\n}\\n\\n// : ([[{term: ?any, to: number}]]) → ContentMatch\\n// Compiles an NFA as produced by `nfa` into a DFA, modeled as a set\\n// of state objects (`ContentMatch` instances) with transitions\\n// between them.\\nfunction dfa(nfa) {\\n  var labeled = Object.create(null);\\n  return explore(nullFrom(nfa, 0))\\n\\n  function explore(states) {\\n    var out = [];\\n    states.forEach(function (node) {\\n      nfa[node].forEach(function (ref) {\\n        var term = ref.term;\\n        var to = ref.to;\\n\\n        if (!term) { return }\\n        var known = out.indexOf(term), set = known > -1 && out[known + 1];\\n        nullFrom(nfa, to).forEach(function (node) {\\n          if (!set) { out.push(term, set = []); }\\n          if (set.indexOf(node) == -1) { set.push(node); }\\n        });\\n      });\\n    });\\n    var state = labeled[states.join(\\\",\\\")] = new ContentMatch(states.indexOf(nfa.length - 1) > -1);\\n    for (var i = 0; i < out.length; i += 2) {\\n      var states$1 = out[i + 1].sort(cmp);\\n      state.next.push(out[i], labeled[states$1.join(\\\",\\\")] || explore(states$1));\\n    }\\n    return state\\n  }\\n}\\n\\nfunction checkForDeadEnds(match, stream) {\\n  for (var i = 0, work = [match]; i < work.length; i++) {\\n    var state = work[i], dead = !state.validEnd, nodes = [];\\n    for (var j = 0; j < state.next.length; j += 2) {\\n      var node = state.next[j], next = state.next[j + 1];\\n      nodes.push(node.name);\\n      if (dead && !(node.isText || node.hasRequiredAttrs())) { dead = false; }\\n      if (work.indexOf(next) == -1) { work.push(next); }\\n    }\\n    if (dead) { stream.err(\\\"Only non-generatable nodes (\\\" + nodes.join(\\\", \\\") + \\\") in a required position\\\"); }\\n  }\\n}\\n\\n// For node types where all attrs have a default value (or which don't\\n// have any attributes), build up a single reusable default attribute\\n// object, and use it for all nodes that don't specify specific\\n// attributes.\\nfunction defaultAttrs(attrs) {\\n  var defaults = Object.create(null);\\n  for (var attrName in attrs) {\\n    var attr = attrs[attrName];\\n    if (!attr.hasDefault) { return null }\\n    defaults[attrName] = attr.default;\\n  }\\n  return defaults\\n}\\n\\nfunction computeAttrs(attrs, value) {\\n  var built = Object.create(null);\\n  for (var name in attrs) {\\n    var given = value && value[name];\\n    if (given === undefined) {\\n      var attr = attrs[name];\\n      if (attr.hasDefault) { given = attr.default; }\\n      else { throw new RangeError(\\\"No value supplied for attribute \\\" + name) }\\n    }\\n    built[name] = given;\\n  }\\n  return built\\n}\\n\\nfunction initAttrs(attrs) {\\n  var result = Object.create(null);\\n  if (attrs) { for (var name in attrs) { result[name] = new Attribute(attrs[name]); } }\\n  return result\\n}\\n\\n// ::- Node types are objects allocated once per `Schema` and used to\\n// [tag](#model.Node.type) `Node` instances. They contain information\\n// about the node type, such as its name and what kind of node it\\n// represents.\\nvar NodeType = function NodeType(name, schema, spec) {\\n  // :: string\\n  // The name the node type has in this schema.\\n  this.name = name;\\n\\n  // :: Schema\\n  // A link back to the `Schema` the node type belongs to.\\n  this.schema = schema;\\n\\n  // :: NodeSpec\\n  // The spec that this type is based on\\n  this.spec = spec;\\n\\n  this.groups = spec.group ? spec.group.split(\\\" \\\") : [];\\n  this.attrs = initAttrs(spec.attrs);\\n\\n  this.defaultAttrs = defaultAttrs(this.attrs);\\n\\n  // :: ContentMatch\\n  // The starting match of the node type's content expression.\\n  this.contentMatch = null;\\n\\n  // : ?[MarkType]\\n  // The set of marks allowed in this node. `null` means all marks\\n  // are allowed.\\n  this.markSet = null;\\n\\n  // :: bool\\n  // True if this node type has inline content.\\n  this.inlineContent = null;\\n\\n  // :: bool\\n  // True if this is a block type\\n  this.isBlock = !(spec.inline || name == \\\"text\\\");\\n\\n  // :: bool\\n  // True if this is the text node type.\\n  this.isText = name == \\\"text\\\";\\n};\\n\\nvar prototypeAccessors$4 = { isInline: {},isTextblock: {},isLeaf: {},isAtom: {} };\\n\\n// :: bool\\n// True if this is an inline type.\\nprototypeAccessors$4.isInline.get = function () { return !this.isBlock };\\n\\n// :: bool\\n// True if this is a textblock type, a block that contains inline\\n// content.\\nprototypeAccessors$4.isTextblock.get = function () { return this.isBlock && this.inlineContent };\\n\\n// :: bool\\n// True for node types that allow no content.\\nprototypeAccessors$4.isLeaf.get = function () { return this.contentMatch == ContentMatch.empty };\\n\\n// :: bool\\n// True when this node is an atom, i.e. when it does not have\\n// directly editable content.\\nprototypeAccessors$4.isAtom.get = function () { return this.isLeaf || this.spec.atom };\\n\\nNodeType.prototype.hasRequiredAttrs = function hasRequiredAttrs (ignore) {\\n    var this$1 = this;\\n\\n  for (var n in this$1.attrs)\\n    { if (this$1.attrs[n].isRequired && (!ignore || !(n in ignore))) { return true } }\\n  return false\\n};\\n\\nNodeType.prototype.compatibleContent = function compatibleContent (other) {\\n  return this == other || this.contentMatch.compatible(other.contentMatch)\\n};\\n\\nNodeType.prototype.computeAttrs = function computeAttrs$1 (attrs) {\\n  if (!attrs && this.defaultAttrs) { return this.defaultAttrs }\\n  else { return computeAttrs(this.attrs, attrs) }\\n};\\n\\n// :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node\\n// Create a `Node` of this type. The given attributes are\\n// checked and defaulted (you can pass `null` to use the type's\\n// defaults entirely, if no required attributes exist). `content`\\n// may be a `Fragment`, a node, an array of nodes, or\\n// `null`. Similarly `marks` may be `null` to default to the empty\\n// set of marks.\\nNodeType.prototype.create = function create (attrs, content, marks) {\\n  if (this.isText) { throw new Error(\\\"NodeType.create can't construct text nodes\\\") }\\n  return new Node(this, this.computeAttrs(attrs), Fragment.from(content), Mark.setFrom(marks))\\n};\\n\\n// :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node\\n// Like [`create`](#model.NodeType.create), but check the given content\\n// against the node type's content restrictions, and throw an error\\n// if it doesn't match.\\nNodeType.prototype.createChecked = function createChecked (attrs, content, marks) {\\n  content = Fragment.from(content);\\n  if (!this.validContent(content))\\n    { throw new RangeError(\\\"Invalid content for node \\\" + this.name) }\\n  return new Node(this, this.computeAttrs(attrs), content, Mark.setFrom(marks))\\n};\\n\\n// :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → ?Node\\n// Like [`create`](#model.NodeType.create), but see if it is necessary to\\n// add nodes to the start or end of the given fragment to make it\\n// fit the node. If no fitting wrapping can be found, return null.\\n// Note that, due to the fact that required nodes can always be\\n// created, this will always succeed if you pass null or\\n// `Fragment.empty` as content.\\nNodeType.prototype.createAndFill = function createAndFill (attrs, content, marks) {\\n  attrs = this.computeAttrs(attrs);\\n  content = Fragment.from(content);\\n  if (content.size) {\\n    var before = this.contentMatch.fillBefore(content);\\n    if (!before) { return null }\\n    content = before.append(content);\\n  }\\n  var after = this.contentMatch.matchFragment(content).fillBefore(Fragment.empty, true);\\n  if (!after) { return null }\\n  return new Node(this, attrs, content.append(after), Mark.setFrom(marks))\\n};\\n\\n// :: (Fragment) → bool\\n// Returns true if the given fragment is valid content for this node\\n// type with the given attributes.\\nNodeType.prototype.validContent = function validContent (content) {\\n    var this$1 = this;\\n\\n  var result = this.contentMatch.matchFragment(content);\\n  if (!result || !result.validEnd) { return false }\\n  for (var i = 0; i < content.childCount; i++)\\n    { if (!this$1.allowsMarks(content.child(i).marks)) { return false } }\\n  return true\\n};\\n\\n// :: (MarkType) → bool\\n// Check whether the given mark type is allowed in this node.\\nNodeType.prototype.allowsMarkType = function allowsMarkType (markType) {\\n  return this.markSet == null || this.markSet.indexOf(markType) > -1\\n};\\n\\n// :: ([Mark]) → bool\\n// Test whether the given set of marks are allowed in this node.\\nNodeType.prototype.allowsMarks = function allowsMarks (marks) {\\n    var this$1 = this;\\n\\n  if (this.markSet == null) { return true }\\n  for (var i = 0; i < marks.length; i++) { if (!this$1.allowsMarkType(marks[i].type)) { return false } }\\n  return true\\n};\\n\\n// :: ([Mark]) → [Mark]\\n// Removes the marks that are not allowed in this node from the given set.\\nNodeType.prototype.allowedMarks = function allowedMarks (marks) {\\n    var this$1 = this;\\n\\n  if (this.markSet == null) { return marks }\\n  var copy;\\n  for (var i = 0; i < marks.length; i++) {\\n    if (!this$1.allowsMarkType(marks[i].type)) {\\n      if (!copy) { copy = marks.slice(0, i); }\\n    } else if (copy) {\\n      copy.push(marks[i]);\\n    }\\n  }\\n  return !copy ? marks : copy.length ? copy : Mark.empty\\n};\\n\\nNodeType.compile = function compile (nodes, schema) {\\n  var result = Object.create(null);\\n  nodes.forEach(function (name, spec) { return result[name] = new NodeType(name, schema, spec); });\\n\\n  var topType = schema.spec.topNode || \\\"doc\\\";\\n  if (!result[topType]) { throw new RangeError(\\\"Schema is missing its top node type ('\\\" + topType + \\\"')\\\") }\\n  if (!result.text) { throw new RangeError(\\\"Every schema needs a 'text' type\\\") }\\n  for (var _ in result.text.attrs) { throw new RangeError(\\\"The text node type should not have attributes\\\") }\\n\\n  return result\\n};\\n\\nObject.defineProperties( NodeType.prototype, prototypeAccessors$4 );\\n\\n// Attribute descriptors\\n\\nvar Attribute = function Attribute(options) {\\n  this.hasDefault = Object.prototype.hasOwnProperty.call(options, \\\"default\\\");\\n  this.default = options.default;\\n};\\n\\nvar prototypeAccessors$1$2 = { isRequired: {} };\\n\\nprototypeAccessors$1$2.isRequired.get = function () {\\n  return !this.hasDefault\\n};\\n\\nObject.defineProperties( Attribute.prototype, prototypeAccessors$1$2 );\\n\\n// Marks\\n\\n// ::- Like nodes, marks (which are associated with nodes to signify\\n// things like emphasis or being part of a link) are\\n// [tagged](#model.Mark.type) with type objects, which are\\n// instantiated once per `Schema`.\\nvar MarkType = function MarkType(name, rank, schema, spec) {\\n  // :: string\\n  // The name of the mark type.\\n  this.name = name;\\n\\n  // :: Schema\\n  // The schema that this mark type instance is part of.\\n  this.schema = schema;\\n\\n  // :: MarkSpec\\n  // The spec on which the type is based.\\n  this.spec = spec;\\n\\n  this.attrs = initAttrs(spec.attrs);\\n\\n  this.rank = rank;\\n  this.excluded = null;\\n  var defaults = defaultAttrs(this.attrs);\\n  this.instance = defaults && new Mark(this, defaults);\\n};\\n\\n// :: (?Object) → Mark\\n// Create a mark of this type. `attrs` may be `null` or an object\\n// containing only some of the mark's attributes. The others, if\\n// they have defaults, will be added.\\nMarkType.prototype.create = function create (attrs) {\\n  if (!attrs && this.instance) { return this.instance }\\n  return new Mark(this, computeAttrs(this.attrs, attrs))\\n};\\n\\nMarkType.compile = function compile (marks, schema) {\\n  var result = Object.create(null), rank = 0;\\n  marks.forEach(function (name, spec) { return result[name] = new MarkType(name, rank++, schema, spec); });\\n  return result\\n};\\n\\n// :: ([Mark]) → [Mark]\\n// When there is a mark of this type in the given set, a new set\\n// without it is returned. Otherwise, the input set is returned.\\nMarkType.prototype.removeFromSet = function removeFromSet (set) {\\n    var this$1 = this;\\n\\n  for (var i = 0; i < set.length; i++)\\n    { if (set[i].type == this$1)\\n      { return set.slice(0, i).concat(set.slice(i + 1)) } }\\n  return set\\n};\\n\\n// :: ([Mark]) → ?Mark\\n// Tests whether there is a mark of this type in the given set.\\nMarkType.prototype.isInSet = function isInSet (set) {\\n    var this$1 = this;\\n\\n  for (var i = 0; i < set.length; i++)\\n    { if (set[i].type == this$1) { return set[i] } }\\n};\\n\\n// :: (MarkType) → bool\\n// Queries whether a given mark type is\\n// [excluded](#model.MarkSpec.excludes) by this one.\\nMarkType.prototype.excludes = function excludes (other) {\\n  return this.excluded.indexOf(other) > -1\\n};\\n\\n// SchemaSpec:: interface\\n// An object describing a schema, as passed to the [`Schema`](#model.Schema)\\n// constructor.\\n//\\n//   nodes:: union<Object<NodeSpec>, OrderedMap<NodeSpec>>\\n//   The node types in this schema. Maps names to\\n//   [`NodeSpec`](#model.NodeSpec) objects that describe the node type\\n//   associated with that name. Their order is significant—it\\n//   determines which [parse rules](#model.NodeSpec.parseDOM) take\\n//   precedence by default, and which nodes come first in a given\\n//   [group](#model.NodeSpec.group).\\n//\\n//   marks:: ?union<Object<MarkSpec>, OrderedMap<MarkSpec>>\\n//   The mark types that exist in this schema. The order in which they\\n//   are provided determines the order in which [mark\\n//   sets](#model.Mark.addToSet) are sorted and in which [parse\\n//   rules](#model.MarkSpec.parseDOM) are tried.\\n//\\n//   topNode:: ?string\\n//   The name of the default top-level node for the schema. Defaults\\n//   to `\\\"doc\\\"`.\\n\\n// NodeSpec:: interface\\n//\\n//   content:: ?string\\n//   The content expression for this node, as described in the [schema\\n//   guide](/docs/guide/#schema.content_expressions). When not given,\\n//   the node does not allow any content.\\n//\\n//   marks:: ?string\\n//   The marks that are allowed inside of this node. May be a\\n//   space-separated string referring to mark names or groups, `\\\"_\\\"`\\n//   to explicitly allow all marks, or `\\\"\\\"` to disallow marks. When\\n//   not given, nodes with inline content default to allowing all\\n//   marks, other nodes default to not allowing marks.\\n//\\n//   group:: ?string\\n//   The group or space-separated groups to which this node belongs,\\n//   which can be referred to in the content expressions for the\\n//   schema.\\n//\\n//   inline:: ?bool\\n//   Should be set to true for inline nodes. (Implied for text nodes.)\\n//\\n//   atom:: ?bool\\n//   Can be set to true to indicate that, though this isn't a [leaf\\n//   node](#model.NodeType.isLeaf), it doesn't have directly editable\\n//   content and should be treated as a single unit in the view.\\n//\\n//   attrs:: ?Object<AttributeSpec>\\n//   The attributes that nodes of this type get.\\n//\\n//   selectable:: ?bool\\n//   Controls whether nodes of this type can be selected as a [node\\n//   selection](#state.NodeSelection). Defaults to true for non-text\\n//   nodes.\\n//\\n//   draggable:: ?bool\\n//   Determines whether nodes of this type can be dragged without\\n//   being selected. Defaults to false.\\n//\\n//   code:: ?bool\\n//   Can be used to indicate that this node contains code, which\\n//   causes some commands to behave differently.\\n//\\n//   defining:: ?bool\\n//   Determines whether this node is considered an important parent\\n//   node during replace operations (such as paste). Non-defining (the\\n//   default) nodes get dropped when their entire content is replaced,\\n//   whereas defining nodes persist and wrap the inserted content.\\n//   Likewise, in _inserted_ content the defining parents of the\\n//   content are preserved when possible. Typically,\\n//   non-default-paragraph textblock types, and possibly list items,\\n//   are marked as defining.\\n//\\n//   isolating:: ?bool\\n//   When enabled (default is false), the sides of nodes of this type\\n//   count as boundaries that regular editing operations, like\\n//   backspacing or lifting, won't cross. An example of a node that\\n//   should probably have this enabled is a table cell.\\n//\\n//   toDOM:: ?(node: Node) → DOMOutputSpec\\n//   Defines the default way a node of this type should be serialized\\n//   to DOM/HTML (as used by\\n//   [`DOMSerializer.fromSchema`](#model.DOMSerializer^fromSchema)).\\n//   Should return a DOM node or an [array\\n//   structure](#model.DOMOutputSpec) that describes one, with an\\n//   optional number zero (“hole”) in it to indicate where the node's\\n//   content should be inserted.\\n//\\n//   For text nodes, the default is to create a text DOM node. Though\\n//   it is possible to create a serializer where text is rendered\\n//   differently, this is not supported inside the editor, so you\\n//   shouldn't override that in your text node spec.\\n//\\n//   parseDOM:: ?[ParseRule]\\n//   Associates DOM parser information with this node, which can be\\n//   used by [`DOMParser.fromSchema`](#model.DOMParser^fromSchema) to\\n//   automatically derive a parser. The `node` field in the rules is\\n//   implied (the name of this node will be filled in automatically).\\n//   If you supply your own parser, you do not need to also specify\\n//   parsing rules in your schema.\\n//\\n//   toDebugString:: ?(node: Node) -> string\\n//   Defines the default way a node of this type should be serialized\\n//   to a string representation for debugging (e.g. in error messages).\\n\\n// MarkSpec:: interface\\n//\\n//   attrs:: ?Object<AttributeSpec>\\n//   The attributes that marks of this type get.\\n//\\n//   inclusive:: ?bool\\n//   Whether this mark should be active when the cursor is positioned\\n//   at its end (or at its start when that is also the start of the\\n//   parent node). Defaults to true.\\n//\\n//   excludes:: ?string\\n//   Determines which other marks this mark can coexist with. Should\\n//   be a space-separated strings naming other marks or groups of marks.\\n//   When a mark is [added](#model.Mark.addToSet) to a set, all marks\\n//   that it excludes are removed in the process. If the set contains\\n//   any mark that excludes the new mark but is not, itself, excluded\\n//   by the new mark, the mark can not be added an the set. You can\\n//   use the value `\\\"_\\\"` to indicate that the mark excludes all\\n//   marks in the schema.\\n//\\n//   Defaults to only being exclusive with marks of the same type. You\\n//   can set it to an empty string (or any string not containing the\\n//   mark's own name) to allow multiple marks of a given type to\\n//   coexist (as long as they have different attributes).\\n//\\n//   group:: ?string\\n//   The group or space-separated groups to which this mark belongs.\\n//\\n//   toDOM:: ?(mark: Mark, inline: bool) → DOMOutputSpec\\n//   Defines the default way marks of this type should be serialized\\n//   to DOM/HTML. When the resulting spec contains a hole, that is\\n//   where the marked content is placed. Otherwise, it is appended to\\n//   the top node.\\n//\\n//   parseDOM:: ?[ParseRule]\\n//   Associates DOM parser information with this mark (see the\\n//   corresponding [node spec field](#model.NodeSpec.parseDOM)). The\\n//   `mark` field in the rules is implied.\\n\\n// AttributeSpec:: interface\\n//\\n// Used to [define](#model.NodeSpec.attrs) attributes on nodes or\\n// marks.\\n//\\n//   default:: ?any\\n//   The default value for this attribute, to use when no explicit\\n//   value is provided. Attributes that have no default must be\\n//   provided whenever a node or mark of a type that has them is\\n//   created.\\n\\n// ::- A document schema. Holds [node](#model.NodeType) and [mark\\n// type](#model.MarkType) objects for the nodes and marks that may\\n// occur in conforming documents, and provides functionality for\\n// creating and deserializing such documents.\\nvar Schema = function Schema(spec) {\\n  var this$1 = this;\\n\\n  // :: SchemaSpec\\n  // The [spec](#model.SchemaSpec) on which the schema is based,\\n  // with the added guarantee that its `nodes` and `marks`\\n  // properties are\\n  // [`OrderedMap`](https://github.com/marijnh/orderedmap) instances\\n  // (not raw objects).\\n  this.spec = {};\\n  for (var prop in spec) { this$1.spec[prop] = spec[prop]; }\\n  this.spec.nodes = OrderedMap.from(spec.nodes);\\n  this.spec.marks = OrderedMap.from(spec.marks);\\n\\n  // :: Object<NodeType>\\n  // An object mapping the schema's node names to node type objects.\\n  this.nodes = NodeType.compile(this.spec.nodes, this);\\n\\n  // :: Object<MarkType>\\n  // A map from mark names to mark type objects.\\n  this.marks = MarkType.compile(this.spec.marks, this);\\n\\n  var contentExprCache = Object.create(null);\\n  for (var prop$1 in this$1.nodes) {\\n    if (prop$1 in this$1.marks)\\n      { throw new RangeError(prop$1 + \\\" can not be both a node and a mark\\\") }\\n    var type = this$1.nodes[prop$1], contentExpr = type.spec.content || \\\"\\\", markExpr = type.spec.marks;\\n    type.contentMatch = contentExprCache[contentExpr] ||\\n      (contentExprCache[contentExpr] = ContentMatch.parse(contentExpr, this$1.nodes));\\n    type.inlineContent = type.contentMatch.inlineContent;\\n    type.markSet = markExpr == \\\"_\\\" ? null :\\n      markExpr ? gatherMarks(this$1, markExpr.split(\\\" \\\")) :\\n      markExpr == \\\"\\\" || !type.inlineContent ? [] : null;\\n  }\\n  for (var prop$2 in this$1.marks) {\\n    var type$1 = this$1.marks[prop$2], excl = type$1.spec.excludes;\\n    type$1.excluded = excl == null ? [type$1] : excl == \\\"\\\" ? [] : gatherMarks(this$1, excl.split(\\\" \\\"));\\n  }\\n\\n  this.nodeFromJSON = this.nodeFromJSON.bind(this);\\n  this.markFromJSON = this.markFromJSON.bind(this);\\n\\n  // :: NodeType\\n  // The type of the [default top node](#model.SchemaSpec.topNode)\\n  // for this schema.\\n  this.topNodeType = this.nodes[this.spec.topNode || \\\"doc\\\"];\\n\\n  // :: Object\\n  // An object for storing whatever values modules may want to\\n  // compute and cache per schema. (If you want to store something\\n  // in it, try to use property names unlikely to clash.)\\n  this.cached = Object.create(null);\\n  this.cached.wrappings = Object.create(null);\\n};\\n\\n// :: (union<string, NodeType>, ?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node\\n// Create a node in this schema. The `type` may be a string or a\\n// `NodeType` instance. Attributes will be extended\\n// with defaults, `content` may be a `Fragment`,\\n// `null`, a `Node`, or an array of nodes.\\nSchema.prototype.node = function node (type, attrs, content, marks) {\\n  if (typeof type == \\\"string\\\")\\n    { type = this.nodeType(type); }\\n  else if (!(type instanceof NodeType))\\n    { throw new RangeError(\\\"Invalid node type: \\\" + type) }\\n  else if (type.schema != this)\\n    { throw new RangeError(\\\"Node type from different schema used (\\\" + type.name + \\\")\\\") }\\n\\n  return type.createChecked(attrs, content, marks)\\n};\\n\\n// :: (string, ?[Mark]) → Node\\n// Create a text node in the schema. Empty text nodes are not\\n// allowed.\\nSchema.prototype.text = function text (text$1, marks) {\\n  var type = this.nodes.text;\\n  return new TextNode(type, type.defaultAttrs, text$1, Mark.setFrom(marks))\\n};\\n\\n// :: (union<string, MarkType>, ?Object) → Mark\\n// Create a mark with the given type and attributes.\\nSchema.prototype.mark = function mark (type, attrs) {\\n  if (typeof type == \\\"string\\\") { type = this.marks[type]; }\\n  return type.create(attrs)\\n};\\n\\n// :: (Object) → Node\\n// Deserialize a node from its JSON representation. This method is\\n// bound.\\nSchema.prototype.nodeFromJSON = function nodeFromJSON (json) {\\n  return Node.fromJSON(this, json)\\n};\\n\\n// :: (Object) → Mark\\n// Deserialize a mark from its JSON representation. This method is\\n// bound.\\nSchema.prototype.markFromJSON = function markFromJSON (json) {\\n  return Mark.fromJSON(this, json)\\n};\\n\\nSchema.prototype.nodeType = function nodeType (name) {\\n  var found = this.nodes[name];\\n  if (!found) { throw new RangeError(\\\"Unknown node type: \\\" + name) }\\n  return found\\n};\\n\\nfunction gatherMarks(schema, marks) {\\n  var found = [];\\n  for (var i = 0; i < marks.length; i++) {\\n    var name = marks[i], mark = schema.marks[name], ok = mark;\\n    if (mark) {\\n      found.push(mark);\\n    } else {\\n      for (var prop in schema.marks) {\\n        var mark$1 = schema.marks[prop];\\n        if (name == \\\"_\\\" || (mark$1.spec.group && mark$1.spec.group.split(\\\" \\\").indexOf(name) > -1))\\n          { found.push(ok = mark$1); }\\n      }\\n    }\\n    if (!ok) { throw new SyntaxError(\\\"Unknown mark type: '\\\" + marks[i] + \\\"'\\\") }\\n  }\\n  return found\\n}\\n\\n// ParseOptions:: interface\\n// These are the options recognized by the\\n// [`parse`](#model.DOMParser.parse) and\\n// [`parseSlice`](#model.DOMParser.parseSlice) methods.\\n//\\n//   preserveWhitespace:: ?union<bool, \\\"full\\\">\\n//   By default, whitespace is collapsed as per HTML's rules. Pass\\n//   `true` to preserve whitespace, but normalize newlines to\\n//   spaces, and `\\\"full\\\"` to preserve whitespace entirely.\\n//\\n//   findPositions:: ?[{node: dom.Node, offset: number}]\\n//   When given, the parser will, beside parsing the content,\\n//   record the document positions of the given DOM positions. It\\n//   will do so by writing to the objects, adding a `pos` property\\n//   that holds the document position. DOM positions that are not\\n//   in the parsed content will not be written to.\\n//\\n//   from:: ?number\\n//   The child node index to start parsing from.\\n//\\n//   to:: ?number\\n//   The child node index to stop parsing at.\\n//\\n//   topNode:: ?Node\\n//   By default, the content is parsed into the schema's default\\n//   [top node type](#model.Schema.topNodeType). You can pass this\\n//   option to use the type and attributes from a different node\\n//   as the top container.\\n//\\n//   topMatch:: ?ContentMatch\\n//   Provide the starting content match that content parsed into the\\n//   top node is matched against.\\n//\\n//   context:: ?ResolvedPos\\n//   A set of additional nodes to count as\\n//   [context](#model.ParseRule.context) when parsing, above the\\n//   given [top node](#model.ParseOptions.topNode).\\n\\n// ParseRule:: interface\\n// A value that describes how to parse a given DOM node or inline\\n// style as a ProseMirror node or mark.\\n//\\n//   tag:: ?string\\n//   A CSS selector describing the kind of DOM elements to match. A\\n//   single rule should have _either_ a `tag` or a `style` property.\\n//\\n//   namespace:: ?string\\n//   The namespace to match. This should be used with `tag`.\\n//   Nodes are only matched when the namespace matches or this property\\n//   is null.\\n//\\n//   style:: ?string\\n//   A CSS property name to match. When given, this rule matches\\n//   inline styles that list that property. May also have the form\\n//   `\\\"property=value\\\"`, in which case the rule only matches if the\\n//   propery's value exactly matches the given value. (For more\\n//   complicated filters, use [`getAttrs`](#model.ParseRule.getAttrs)\\n//   and return undefined to indicate that the match failed.)\\n//\\n//   priority:: ?number\\n//   Can be used to change the order in which the parse rules in a\\n//   schema are tried. Those with higher priority come first. Rules\\n//   without a priority are counted as having priority 50. This\\n//   property is only meaningful in a schema—when directly\\n//   constructing a parser, the order of the rule array is used.\\n//\\n//   context:: ?string\\n//   When given, restricts this rule to only match when the current\\n//   context—the parent nodes into which the content is being\\n//   parsed—matches this expression. Should contain one or more node\\n//   names or node group names followed by single or double slashes.\\n//   For example `\\\"paragraph/\\\"` means the rule only matches when the\\n//   parent node is a paragraph, `\\\"blockquote/paragraph/\\\"` restricts\\n//   it to be in a paragraph that is inside a blockquote, and\\n//   `\\\"section//\\\"` matches any position inside a section—a double\\n//   slash matches any sequence of ancestor nodes. To allow multiple\\n//   different contexts, they can be separated by a pipe (`|`)\\n//   character, as in `\\\"blockquote/|list_item/\\\"`.\\n//\\n//   node:: ?string\\n//   The name of the node type to create when this rule matches. Only\\n//   valid for rules with a `tag` property, not for style rules. Each\\n//   rule should have one of a `node`, `mark`, or `ignore` property\\n//   (except when it appears in a [node](#model.NodeSpec.parseDOM) or\\n//   [mark spec](#model.MarkSpec.parseDOM), in which case the `node`\\n//   or `mark` property will be derived from its position).\\n//\\n//   mark:: ?string\\n//   The name of the mark type to wrap the matched content in.\\n//\\n//   ignore:: ?bool\\n//   When true, ignore content that matches this rule.\\n//\\n//   skip:: ?bool\\n//   When true, ignore the node that matches this rule, but do parse\\n//   its content.\\n//\\n//   attrs:: ?Object\\n//   Attributes for the node or mark created by this rule. When\\n//   `getAttrs` is provided, it takes precedence.\\n//\\n//   getAttrs:: ?(union<dom.Node, string>) → ?union<Object, false>\\n//   A function used to compute the attributes for the node or mark\\n//   created by this rule. Can also be used to describe further\\n//   conditions the DOM element or style must match. When it returns\\n//   `false`, the rule won't match. When it returns null or undefined,\\n//   that is interpreted as an empty/default set of attributes.\\n//\\n//   Called with a DOM Element for `tag` rules, and with a string (the\\n//   style's value) for `style` rules.\\n//\\n//   contentElement:: ?union<string, (dom.Node) → dom.Node>\\n//   For `tag` rules that produce non-leaf nodes or marks, by default\\n//   the content of the DOM element is parsed as content of the mark\\n//   or node. If the child nodes are in a descendent node, this may be\\n//   a CSS selector string that the parser must use to find the actual\\n//   content element, or a function that returns the actual content\\n//   element to the parser.\\n//\\n//   getContent:: ?(dom.Node, schema: Schema) → Fragment\\n//   Can be used to override the content of a matched node. When\\n//   present, instead of parsing the node's child nodes, the result of\\n//   this function is used.\\n//\\n//   preserveWhitespace:: ?union<bool, \\\"full\\\">\\n//   Controls whether whitespace should be preserved when parsing the\\n//   content inside the matched element. `false` means whitespace may\\n//   be collapsed, `true` means that whitespace should be preserved\\n//   but newlines normalized to spaces, and `\\\"full\\\"` means that\\n//   newlines should also be preserved.\\n\\n// ::- A DOM parser represents a strategy for parsing DOM content into\\n// a ProseMirror document conforming to a given schema. Its behavior\\n// is defined by an array of [rules](#model.ParseRule).\\nvar DOMParser = function DOMParser(schema, rules) {\\n  var this$1 = this;\\n\\n  // :: Schema\\n  // The schema into which the parser parses.\\n  this.schema = schema;\\n  // :: [ParseRule]\\n  // The set of [parse rules](#model.ParseRule) that the parser\\n  // uses, in order of precedence.\\n  this.rules = rules;\\n  this.tags = [];\\n  this.styles = [];\\n\\n  rules.forEach(function (rule) {\\n    if (rule.tag) { this$1.tags.push(rule); }\\n    else if (rule.style) { this$1.styles.push(rule); }\\n  });\\n};\\n\\n// :: (dom.Node, ?ParseOptions) → Node\\n// Parse a document from the content of a DOM node.\\nDOMParser.prototype.parse = function parse (dom, options) {\\n    if ( options === void 0 ) options = {};\\n\\n  var context = new ParseContext(this, options, false);\\n  context.addAll(dom, null, options.from, options.to);\\n  return context.finish()\\n};\\n\\n// :: (dom.Node, ?ParseOptions) → Slice\\n// Parses the content of the given DOM node, like\\n// [`parse`](#model.DOMParser.parse), and takes the same set of\\n// options. But unlike that method, which produces a whole node,\\n// this one returns a slice that is open at the sides, meaning that\\n// the schema constraints aren't applied to the start of nodes to\\n// the left of the input and the end of nodes at the end.\\nDOMParser.prototype.parseSlice = function parseSlice (dom, options) {\\n    if ( options === void 0 ) options = {};\\n\\n  var context = new ParseContext(this, options, true);\\n  context.addAll(dom, null, options.from, options.to);\\n  return Slice.maxOpen(context.finish())\\n};\\n\\nDOMParser.prototype.matchTag = function matchTag (dom, context) {\\n    var this$1 = this;\\n\\n  for (var i = 0; i < this.tags.length; i++) {\\n    var rule = this$1.tags[i];\\n    if (matches(dom, rule.tag) &&\\n        (rule.namespace === undefined || dom.namespaceURI == rule.namespace) &&\\n        (!rule.context || context.matchesContext(rule.context))) {\\n      if (rule.getAttrs) {\\n        var result = rule.getAttrs(dom);\\n        if (result === false) { continue }\\n        rule.attrs = result;\\n      }\\n      return rule\\n    }\\n  }\\n};\\n\\nDOMParser.prototype.matchStyle = function matchStyle (prop, value, context) {\\n    var this$1 = this;\\n\\n  for (var i = 0; i < this.styles.length; i++) {\\n    var rule = this$1.styles[i];\\n    if (rule.style.indexOf(prop) != 0 ||\\n        rule.context && !context.matchesContext(rule.context) ||\\n        // Test that the style string either precisely matches the prop,\\n        // or has an '=' sign after the prop, followed by the given\\n        // value.\\n        rule.style.length > prop.length &&\\n        (rule.style.charCodeAt(prop.length) != 61 || rule.style.slice(prop.length + 1) != value))\\n      { continue }\\n    if (rule.getAttrs) {\\n      var result = rule.getAttrs(value);\\n      if (result === false) { continue }\\n      rule.attrs = result;\\n    }\\n    return rule\\n  }\\n};\\n\\n// : (Schema) → [ParseRule]\\nDOMParser.schemaRules = function schemaRules (schema) {\\n  var result = [];\\n  function insert(rule) {\\n    var priority = rule.priority == null ? 50 : rule.priority, i = 0;\\n    for (; i < result.length; i++) {\\n      var next = result[i], nextPriority = next.priority == null ? 50 : next.priority;\\n      if (nextPriority < priority) { break }\\n    }\\n    result.splice(i, 0, rule);\\n  }\\n\\n  var loop = function ( name ) {\\n    var rules = schema.marks[name].spec.parseDOM;\\n    if (rules) { rules.forEach(function (rule) {\\n      insert(rule = copy(rule));\\n      rule.mark = name;\\n    }); }\\n  };\\n\\n    for (var name in schema.marks) loop( name );\\n  var loop$1 = function ( name ) {\\n    var rules$1 = schema.nodes[name$1].spec.parseDOM;\\n    if (rules$1) { rules$1.forEach(function (rule) {\\n      insert(rule = copy(rule));\\n      rule.node = name$1;\\n    }); }\\n  };\\n\\n    for (var name$1 in schema.nodes) loop$1( name );\\n  return result\\n};\\n\\n// :: (Schema) → DOMParser\\n// Construct a DOM parser using the parsing rules listed in a\\n// schema's [node specs](#model.NodeSpec.parseDOM), reordered by\\n// [priority](#model.ParseRule.priority).\\nDOMParser.fromSchema = function fromSchema (schema) {\\n  return schema.cached.domParser ||\\n    (schema.cached.domParser = new DOMParser(schema, DOMParser.schemaRules(schema)))\\n};\\n\\n// : Object<bool> The block-level tags in HTML5\\nvar blockTags = {\\n  address: true, article: true, aside: true, blockquote: true, canvas: true,\\n  dd: true, div: true, dl: true, fieldset: true, figcaption: true, figure: true,\\n  footer: true, form: true, h1: true, h2: true, h3: true, h4: true, h5: true,\\n  h6: true, header: true, hgroup: true, hr: true, li: true, noscript: true, ol: true,\\n  output: true, p: true, pre: true, section: true, table: true, tfoot: true, ul: true\\n};\\n\\n// : Object<bool> The tags that we normally ignore.\\nvar ignoreTags = {\\n  head: true, noscript: true, object: true, script: true, style: true, title: true\\n};\\n\\n// : Object<bool> List tags.\\nvar listTags = {ol: true, ul: true};\\n\\n// Using a bitfield for node context options\\nvar OPT_PRESERVE_WS = 1;\\nvar OPT_PRESERVE_WS_FULL = 2;\\nvar OPT_OPEN_LEFT = 4;\\n\\nfunction wsOptionsFor(preserveWhitespace) {\\n  return (preserveWhitespace ? OPT_PRESERVE_WS : 0) | (preserveWhitespace === \\\"full\\\" ? OPT_PRESERVE_WS_FULL : 0)\\n}\\n\\nvar NodeContext = function NodeContext(type, attrs, marks, solid, match, options) {\\n  this.type = type;\\n  this.attrs = attrs;\\n  this.solid = solid;\\n  this.match = match || (options & OPT_OPEN_LEFT ? null : type.contentMatch);\\n  this.options = options;\\n  this.content = [];\\n  this.marks = marks;\\n  this.activeMarks = Mark.none;\\n};\\n\\nNodeContext.prototype.findWrapping = function findWrapping (node) {\\n  if (!this.match) {\\n    if (!this.type) { return [] }\\n    var fill = this.type.contentMatch.fillBefore(Fragment.from(node));\\n    if (fill) {\\n      this.match = this.type.contentMatch.matchFragment(fill);\\n    } else {\\n      var start = this.type.contentMatch, wrap;\\n      if (wrap = start.findWrapping(node.type)) {\\n        this.match = start;\\n        return wrap\\n      } else {\\n        return null\\n      }\\n    }\\n  }\\n  return this.match.findWrapping(node.type)\\n};\\n\\nNodeContext.prototype.finish = function finish (openEnd) {\\n  if (!(this.options & OPT_PRESERVE_WS)) { // Strip trailing whitespace\\n    var last = this.content[this.content.length - 1], m;\\n    if (last && last.isText && (m = /\\\\s+$/.exec(last.text))) {\\n      if (last.text.length == m[0].length) { this.content.pop(); }\\n      else { this.content[this.content.length - 1] = last.withText(last.text.slice(0, last.text.length - m[0].length)); }\\n    }\\n  }\\n  var content = Fragment.from(this.content);\\n  if (!openEnd && this.match)\\n    { content = content.append(this.match.fillBefore(Fragment.empty, true)); }\\n  return this.type ? this.type.create(this.attrs, content, this.marks) : content\\n};\\n\\nvar ParseContext = function ParseContext(parser, options, open) {\\n  // : DOMParser The parser we are using.\\n  this.parser = parser;\\n  // : Object The options passed to this parse.\\n  this.options = options;\\n  this.isOpen = open;\\n  this.pendingMarks = [];\\n  var topNode = options.topNode, topContext;\\n  var topOptions = wsOptionsFor(options.preserveWhitespace) | (open ? OPT_OPEN_LEFT : 0);\\n  if (topNode)\\n    { topContext = new NodeContext(topNode.type, topNode.attrs, Mark.none, true,\\n                                 options.topMatch || topNode.type.contentMatch, topOptions); }\\n  else if (open)\\n    { topContext = new NodeContext(null, null, Mark.none, true, null, topOptions); }\\n  else\\n    { topContext = new NodeContext(parser.schema.topNodeType, null, Mark.none, true, null, topOptions); }\\n  this.nodes = [topContext];\\n  // : [Mark] The current set of marks\\n  this.open = 0;\\n  this.find = options.findPositions;\\n  this.needsBlock = false;\\n};\\n\\nvar prototypeAccessors$6 = { top: {},currentPos: {} };\\n\\nprototypeAccessors$6.top.get = function () {\\n  return this.nodes[this.open]\\n};\\n\\n// : (dom.Node)\\n// Add a DOM node to the content. Text is inserted as text node,\\n// otherwise, the node is passed to `addElement` or, if it has a\\n// `style` attribute, `addElementWithStyles`.\\nParseContext.prototype.addDOM = function addDOM (dom) {\\n    var this$1 = this;\\n\\n  if (dom.nodeType == 3) {\\n    this.addTextNode(dom);\\n  } else if (dom.nodeType == 1) {\\n    var style = dom.getAttribute(\\\"style\\\");\\n    var marks = style ? this.readStyles(parseStyles(style)) : null;\\n    if (marks != null) { for (var i = 0; i < marks.length; i++) { this$1.addPendingMark(marks[i]); } }\\n    this.addElement(dom);\\n    if (marks != null) { for (var i$1 = 0; i$1 < marks.length; i$1++) { this$1.removePendingMark(marks[i$1]); } }\\n  }\\n};\\n\\nParseContext.prototype.addTextNode = function addTextNode (dom) {\\n  var value = dom.nodeValue;\\n  var top = this.top;\\n  if ((top.type ? top.type.inlineContent : top.content.length && top.content[0].isInline) || /\\\\S/.test(value)) {\\n    if (!(top.options & OPT_PRESERVE_WS)) {\\n      value = value.replace(/\\\\s+/g, \\\" \\\");\\n      // If this starts with whitespace, and there is either no node\\n      // before it or a node that ends with whitespace, strip the\\n      // leading space.\\n      if (/^\\\\s/.test(value) && this.open == this.nodes.length - 1) {\\n        var nodeBefore = top.content[top.content.length - 1];\\n        if (!nodeBefore || nodeBefore.isText && /\\\\s$/.test(nodeBefore.text))\\n          { value = value.slice(1); }\\n      }\\n    } else if (!(top.options & OPT_PRESERVE_WS_FULL)) {\\n      value = value.replace(/\\\\r?\\\\n|\\\\r/g, \\\" \\\");\\n    }\\n    if (value) { this.insertNode(this.parser.schema.text(value)); }\\n    this.findInText(dom);\\n  } else {\\n    this.findInside(dom);\\n  }\\n};\\n\\n// : (dom.Element)\\n// Try to find a handler for the given tag and use that to parse. If\\n// none is found, the element's content nodes are added directly.\\nParseContext.prototype.addElement = function addElement (dom) {\\n  var name = dom.nodeName.toLowerCase();\\n  if (listTags.hasOwnProperty(name)) { normalizeList(dom); }\\n  var rule = (this.options.ruleFromNode && this.options.ruleFromNode(dom)) || this.parser.matchTag(dom, this);\\n  if (rule ? rule.ignore : ignoreTags.hasOwnProperty(name)) {\\n    this.findInside(dom);\\n  } else if (!rule || rule.skip) {\\n    if (rule && rule.skip.nodeType) { dom = rule.skip; }\\n    var sync, top = this.top, oldNeedsBlock = this.needsBlock;\\n    if (blockTags.hasOwnProperty(name)) {\\n      sync = true;\\n      if (!top.type) { this.needsBlock = true; }\\n    }\\n    this.addAll(dom);\\n    if (sync) { this.sync(top); }\\n    this.needsBlock = oldNeedsBlock;\\n  } else {\\n    this.addElementByRule(dom, rule);\\n  }\\n};\\n\\n// Run any style parser associated with the node's styles. Either\\n// return an array of marks, or null to indicate some of the styles\\n// had a rule with `ignore` set.\\nParseContext.prototype.readStyles = function readStyles (styles) {\\n    var this$1 = this;\\n\\n  var marks = Mark.none;\\n  for (var i = 0; i < styles.length; i += 2) {\\n    var rule = this$1.parser.matchStyle(styles[i], styles[i + 1], this$1);\\n    if (!rule) { continue }\\n    if (rule.ignore) { return null }\\n    marks = this$1.parser.schema.marks[rule.mark].create(rule.attrs).addToSet(marks);\\n  }\\n  return marks\\n};\\n\\n// : (dom.Element, ParseRule) → bool\\n// Look up a handler for the given node. If none are found, return\\n// false. Otherwise, apply it, use its return value to drive the way\\n// the node's content is wrapped, and return true.\\nParseContext.prototype.addElementByRule = function addElementByRule (dom, rule) {\\n    var this$1 = this;\\n\\n  var sync, nodeType, markType, mark;\\n  if (rule.node) {\\n    nodeType = this.parser.schema.nodes[rule.node];\\n    if (nodeType.isLeaf) { this.insertNode(nodeType.create(rule.attrs)); }\\n    else { sync = this.enter(nodeType, rule.attrs, rule.preserveWhitespace); }\\n  } else {\\n    markType = this.parser.schema.marks[rule.mark];\\n    mark = markType.create(rule.attrs);\\n    this.addPendingMark(mark);\\n  }\\n  var startIn = this.top;\\n\\n  if (nodeType && nodeType.isLeaf) {\\n    this.findInside(dom);\\n  } else if (rule.getContent) {\\n    this.findInside(dom);\\n    rule.getContent(dom, this.parser.schema).forEach(function (node) { return this$1.insertNode(node); });\\n  } else {\\n    var contentDOM = rule.contentElement;\\n    if (typeof contentDOM == \\\"string\\\") { contentDOM = dom.querySelector(contentDOM); }\\n    else if (typeof contentDOM == \\\"function\\\") { contentDOM = contentDOM(dom); }\\n    if (!contentDOM) { contentDOM = dom; }\\n    this.findAround(dom, contentDOM, true);\\n    this.addAll(contentDOM, sync);\\n  }\\n  if (sync) { this.sync(startIn); this.open--; }\\n  if (mark) { this.removePendingMark(mark); }\\n  return true\\n};\\n\\n// : (dom.Node, ?NodeBuilder, ?number, ?number)\\n// Add all child nodes between `startIndex` and `endIndex` (or the\\n// whole node, if not given). If `sync` is passed, use it to\\n// synchronize after every block element.\\nParseContext.prototype.addAll = function addAll (parent, sync, startIndex, endIndex) {\\n    var this$1 = this;\\n\\n  var index = startIndex || 0;\\n  for (var dom = startIndex ? parent.childNodes[startIndex] : parent.firstChild,\\n           end = endIndex == null ? null : parent.childNodes[endIndex];\\n       dom != end; dom = dom.nextSibling, ++index) {\\n    this$1.findAtPoint(parent, index);\\n    this$1.addDOM(dom);\\n    if (sync && blockTags.hasOwnProperty(dom.nodeName.toLowerCase()))\\n      { this$1.sync(sync); }\\n  }\\n  this.findAtPoint(parent, index);\\n};\\n\\n// Try to find a way to fit the given node type into the current\\n// context. May add intermediate wrappers and/or leave non-solid\\n// nodes that we're in.\\nParseContext.prototype.findPlace = function findPlace (node) {\\n    var this$1 = this;\\n\\n  var route, sync;\\n  for (var depth = this.open; depth >= 0; depth--) {\\n    var cx = this$1.nodes[depth];\\n    var found = cx.findWrapping(node);\\n    if (found && (!route || route.length > found.length)) {\\n      route = found;\\n      sync = cx;\\n      if (!found.length) { break }\\n    }\\n    if (cx.solid) { break }\\n  }\\n  if (!route) { return false }\\n  this.sync(sync);\\n  for (var i = 0; i < route.length; i++)\\n    { this$1.enterInner(route[i], null, false); }\\n  return true\\n};\\n\\n// : (Node) → ?Node\\n// Try to insert the given node, adjusting the context when needed.\\nParseContext.prototype.insertNode = function insertNode (node) {\\n  if (node.isInline && this.needsBlock && !this.top.type) {\\n    var block = this.textblockFromContext();\\n    if (block) { this.enterInner(block); }\\n  }\\n  if (this.findPlace(node)) {\\n    this.closeExtra();\\n    var top = this.top;\\n    this.applyPendingMarks(top);\\n    if (top.match) { top.match = top.match.matchType(node.type); }\\n    var marks = top.activeMarks;\\n    for (var i = 0; i < node.marks.length; i++)\\n      { if (!top.type || top.type.allowsMarkType(node.marks[i].type))\\n        { marks = node.marks[i].addToSet(marks); } }\\n    top.content.push(node.mark(marks));\\n  }\\n};\\n\\nParseContext.prototype.applyPendingMarks = function applyPendingMarks (top) {\\n    var this$1 = this;\\n\\n  for (var i = 0; i < this.pendingMarks.length; i++) {\\n    var mark = this$1.pendingMarks[i];\\n    if ((!top.type || top.type.allowsMarkType(mark.type)) && !mark.type.isInSet(top.activeMarks)) {\\n      top.activeMarks = mark.addToSet(top.activeMarks);\\n      this$1.pendingMarks.splice(i--, 1);\\n    }\\n  }\\n};\\n\\n// : (NodeType, ?Object) → bool\\n// Try to start a node of the given type, adjusting the context when\\n// necessary.\\nParseContext.prototype.enter = function enter (type, attrs, preserveWS) {\\n  var ok = this.findPlace(type.create(attrs));\\n  if (ok) {\\n    this.applyPendingMarks(this.top);\\n    this.enterInner(type, attrs, true, preserveWS);\\n  }\\n  return ok\\n};\\n\\n// Open a node of the given type\\nParseContext.prototype.enterInner = function enterInner (type, attrs, solid, preserveWS) {\\n  this.closeExtra();\\n  var top = this.top;\\n  top.match = top.match && top.match.matchType(type, attrs);\\n  var options = preserveWS == null ? top.options & ~OPT_OPEN_LEFT : wsOptionsFor(preserveWS);\\n  if ((top.options & OPT_OPEN_LEFT) && top.content.length == 0) { options |= OPT_OPEN_LEFT; }\\n  this.nodes.push(new NodeContext(type, attrs, top.activeMarks, solid, null, options));\\n  this.open++;\\n};\\n\\n// Make sure all nodes above this.open are finished and added to\\n// their parents\\nParseContext.prototype.closeExtra = function closeExtra (openEnd) {\\n    var this$1 = this;\\n\\n  var i = this.nodes.length - 1;\\n  if (i > this.open) {\\n    for (; i > this.open; i--) { this$1.nodes[i - 1].content.push(this$1.nodes[i].finish(openEnd)); }\\n    this.nodes.length = this.open + 1;\\n  }\\n};\\n\\nParseContext.prototype.finish = function finish () {\\n  this.open = 0;\\n  this.closeExtra(this.isOpen);\\n  return this.nodes[0].finish(this.isOpen || this.options.topOpen)\\n};\\n\\nParseContext.prototype.sync = function sync (to) {\\n    var this$1 = this;\\n\\n  for (var i = this.open; i >= 0; i--) { if (this$1.nodes[i] == to) {\\n    this$1.open = i;\\n    return\\n  } }\\n};\\n\\nParseContext.prototype.addPendingMark = function addPendingMark (mark) {\\n  this.pendingMarks.push(mark);\\n};\\n\\nParseContext.prototype.removePendingMark = function removePendingMark (mark) {\\n  var found = this.pendingMarks.lastIndexOf(mark);\\n  if (found > -1) {\\n    this.pendingMarks.splice(found, 1);\\n  } else {\\n    var top = this.top;\\n    top.activeMarks = mark.removeFromSet(top.activeMarks);\\n  }\\n};\\n\\nprototypeAccessors$6.currentPos.get = function () {\\n    var this$1 = this;\\n\\n  this.closeExtra();\\n  var pos = 0;\\n  for (var i = this.open; i >= 0; i--) {\\n    var content = this$1.nodes[i].content;\\n    for (var j = content.length - 1; j >= 0; j--)\\n      { pos += content[j].nodeSize; }\\n    if (i) { pos++; }\\n  }\\n  return pos\\n};\\n\\nParseContext.prototype.findAtPoint = function findAtPoint (parent, offset) {\\n    var this$1 = this;\\n\\n  if (this.find) { for (var i = 0; i < this.find.length; i++) {\\n    if (this$1.find[i].node == parent && this$1.find[i].offset == offset)\\n      { this$1.find[i].pos = this$1.currentPos; }\\n  } }\\n};\\n\\nParseContext.prototype.findInside = function findInside (parent) {\\n    var this$1 = this;\\n\\n  if (this.find) { for (var i = 0; i < this.find.length; i++) {\\n    if (this$1.find[i].pos == null && parent.nodeType == 1 && parent.contains(this$1.find[i].node))\\n      { this$1.find[i].pos = this$1.currentPos; }\\n  } }\\n};\\n\\nParseContext.prototype.findAround = function findAround (parent, content, before) {\\n    var this$1 = this;\\n\\n  if (parent != content && this.find) { for (var i = 0; i < this.find.length; i++) {\\n    if (this$1.find[i].pos == null && parent.nodeType == 1 && parent.contains(this$1.find[i].node)) {\\n      var pos = content.compareDocumentPosition(this$1.find[i].node);\\n      if (pos & (before ? 2 : 4))\\n        { this$1.find[i].pos = this$1.currentPos; }\\n    }\\n  } }\\n};\\n\\nParseContext.prototype.findInText = function findInText (textNode) {\\n    var this$1 = this;\\n\\n  if (this.find) { for (var i = 0; i < this.find.length; i++) {\\n    if (this$1.find[i].node == textNode)\\n      { this$1.find[i].pos = this$1.currentPos - (textNode.nodeValue.length - this$1.find[i].offset); }\\n  } }\\n};\\n\\n// : (string) → bool\\n// Determines whether the given [context\\n// string](#ParseRule.context) matches this context.\\nParseContext.prototype.matchesContext = function matchesContext (context) {\\n    var this$1 = this;\\n\\n  if (context.indexOf(\\\"|\\\") > -1)\\n    { return context.split(/\\\\s*\\\\|\\\\s*/).some(this.matchesContext, this) }\\n\\n  var parts = context.split(\\\"/\\\");\\n  var option = this.options.context;\\n  var useRoot = !this.isOpen && (!option || option.parent.type == this.nodes[0].type);\\n  var minDepth = -(option ? option.depth + 1 : 0) + (useRoot ? 0 : 1);\\n  var match = function (i, depth) {\\n    for (; i >= 0; i--) {\\n      var part = parts[i];\\n      if (part == \\\"\\\") {\\n        if (i == parts.length - 1 || i == 0) { continue }\\n        for (; depth >= minDepth; depth--)\\n          { if (match(i - 1, depth)) { return true } }\\n        return false\\n      } else {\\n        var next = depth > 0 || (depth == 0 && useRoot) ? this$1.nodes[depth].type\\n            : option && depth >= minDepth ? option.node(depth - minDepth).type\\n            : null;\\n        if (!next || (next.name != part && next.groups.indexOf(part) == -1))\\n          { return false }\\n        depth--;\\n      }\\n    }\\n    return true\\n  };\\n  return match(parts.length - 1, this.open)\\n};\\n\\nParseContext.prototype.textblockFromContext = function textblockFromContext () {\\n    var this$1 = this;\\n\\n  var $context = this.options.context;\\n  if ($context) { for (var d = $context.depth; d >= 0; d--) {\\n    var deflt = $context.node(d).contentMatchAt($context.indexAfter(d)).defaultType;\\n    if (deflt && deflt.isTextblock && deflt.defaultAttrs) { return deflt }\\n  } }\\n  for (var name in this$1.parser.schema.nodes) {\\n    var type = this$1.parser.schema.nodes[name];\\n    if (type.isTextblock && type.defaultAttrs) { return type }\\n  }\\n};\\n\\nObject.defineProperties( ParseContext.prototype, prototypeAccessors$6 );\\n\\n// Kludge to work around directly nested list nodes produced by some\\n// tools and allowed by browsers to mean that the nested list is\\n// actually part of the list item above it.\\nfunction normalizeList(dom) {\\n  for (var child = dom.firstChild, prevItem = null; child; child = child.nextSibling) {\\n    var name = child.nodeType == 1 ? child.nodeName.toLowerCase() : null;\\n    if (name && listTags.hasOwnProperty(name) && prevItem) {\\n      prevItem.appendChild(child);\\n      child = prevItem;\\n    } else if (name == \\\"li\\\") {\\n      prevItem = child;\\n    } else if (name) {\\n      prevItem = null;\\n    }\\n  }\\n}\\n\\n// Apply a CSS selector.\\nfunction matches(dom, selector) {\\n  return (dom.matches || dom.msMatchesSelector || dom.webkitMatchesSelector || dom.mozMatchesSelector).call(dom, selector)\\n}\\n\\n// : (string) → [string]\\n// Tokenize a style attribute into property/value pairs.\\nfunction parseStyles(style) {\\n  var re = /\\\\s*([\\\\w-]+)\\\\s*:\\\\s*([^;]+)/g, m, result = [];\\n  while (m = re.exec(style)) { result.push(m[1], m[2].trim()); }\\n  return result\\n}\\n\\nfunction copy(obj) {\\n  var copy = {};\\n  for (var prop in obj) { copy[prop] = obj[prop]; }\\n  return copy\\n}\\n\\n// DOMOutputSpec:: interface\\n// A description of a DOM structure. Can be either a string, which is\\n// interpreted as a text node, a DOM node, which is interpreted as\\n// itself, or an array.\\n//\\n// An array describes a DOM element. The first value in the array\\n// should be a string—the name of the DOM element. If the second\\n// element is plain object, it is interpreted as a set of attributes\\n// for the element. Any elements after that (including the 2nd if it's\\n// not an attribute object) are interpreted as children of the DOM\\n// elements, and must either be valid `DOMOutputSpec` values, or the\\n// number zero.\\n//\\n// The number zero (pronounced “hole”) is used to indicate the place\\n// where a node's child nodes should be inserted. It it occurs in an\\n// output spec, it should be the only child element in its parent\\n// node.\\n\\n// ::- A DOM serializer knows how to convert ProseMirror nodes and\\n// marks of various types to DOM nodes.\\nvar DOMSerializer = function DOMSerializer(nodes, marks) {\\n  // :: Object<(node: Node) → DOMOutputSpec>\\n  // The node serialization functions.\\n  this.nodes = nodes || {};\\n  // :: Object<?(mark: Mark, inline: bool) → DOMOutputSpec>\\n  // The mark serialization functions.\\n  this.marks = marks || {};\\n};\\n\\n// :: (Fragment, ?Object) → dom.DocumentFragment\\n// Serialize the content of this fragment to a DOM fragment. When\\n// not in the browser, the `document` option, containing a DOM\\n// document, should be passed so that the serializer can create\\n// nodes.\\nDOMSerializer.prototype.serializeFragment = function serializeFragment (fragment, options, target) {\\n    var this$1 = this;\\n    if ( options === void 0 ) options = {};\\n\\n  if (!target) { target = doc(options).createDocumentFragment(); }\\n\\n  var top = target, active = null;\\n  fragment.forEach(function (node) {\\n    if (active || node.marks.length) {\\n      if (!active) { active = []; }\\n      var keep = 0, rendered = 0;\\n      while (keep < active.length && rendered < node.marks.length) {\\n        var next = node.marks[rendered];\\n        if (!this$1.marks[next.type.name]) { rendered++; continue }\\n        if (!next.eq(active[keep])) { break }\\n        keep += 2; rendered++;\\n      }\\n      while (keep < active.length) {\\n        top = active.pop();\\n        active.pop();\\n      }\\n      while (rendered < node.marks.length) {\\n        var add = node.marks[rendered++];\\n        var markDOM = this$1.serializeMark(add, node.isInline, options);\\n        if (markDOM) {\\n          active.push(add, top);\\n          top.appendChild(markDOM.dom);\\n          top = markDOM.contentDOM || markDOM.dom;\\n        }\\n      }\\n    }\\n    top.appendChild(this$1.serializeNode(node, options));\\n  });\\n\\n  return target\\n};\\n\\n// :: (Node, ?Object) → dom.Node\\n// Serialize this node to a DOM node. This can be useful when you\\n// need to serialize a part of a document, as opposed to the whole\\n// document. To serialize a whole document, use\\n// [`serializeFragment`](#model.DOMSerializer.serializeFragment) on\\n// its [content](#model.Node.content).\\nDOMSerializer.prototype.serializeNode = function serializeNode (node, options) {\\n    if ( options === void 0 ) options = {};\\n\\n  var ref =\\n      DOMSerializer.renderSpec(doc(options), this.nodes[node.type.name](node));\\n    var dom = ref.dom;\\n    var contentDOM = ref.contentDOM;\\n  if (contentDOM) {\\n    if (node.isLeaf)\\n      { throw new RangeError(\\\"Content hole not allowed in a leaf node spec\\\") }\\n    if (options.onContent)\\n      { options.onContent(node, contentDOM, options); }\\n    else\\n      { this.serializeFragment(node.content, options, contentDOM); }\\n  }\\n  return dom\\n};\\n\\nDOMSerializer.prototype.serializeNodeAndMarks = function serializeNodeAndMarks (node, options) {\\n    var this$1 = this;\\n    if ( options === void 0 ) options = {};\\n\\n  var dom = this.serializeNode(node, options);\\n  for (var i = node.marks.length - 1; i >= 0; i--) {\\n    var wrap = this$1.serializeMark(node.marks[i], node.isInline, options);\\n    if (wrap) {\\n      (wrap.contentDOM || wrap.dom).appendChild(dom);\\n      dom = wrap.dom;\\n    }\\n  }\\n  return dom\\n};\\n\\nDOMSerializer.prototype.serializeMark = function serializeMark (mark, inline, options) {\\n    if ( options === void 0 ) options = {};\\n\\n  var toDOM = this.marks[mark.type.name];\\n  return toDOM && DOMSerializer.renderSpec(doc(options), toDOM(mark, inline))\\n};\\n\\n// :: (dom.Document, DOMOutputSpec) → {dom: dom.Node, contentDOM: ?dom.Node}\\n// Render an [output spec](#model.DOMOutputSpec) to a DOM node. If\\n// the spec has a hole (zero) in it, `contentDOM` will point at the\\n// node with the hole.\\nDOMSerializer.renderSpec = function renderSpec (doc, structure) {\\n  if (typeof structure == \\\"string\\\")\\n    { return {dom: doc.createTextNode(structure)} }\\n  if (structure.nodeType != null)\\n    { return {dom: structure} }\\n  var dom = doc.createElement(structure[0]), contentDOM = null;\\n  var attrs = structure[1], start = 1;\\n  if (attrs && typeof attrs == \\\"object\\\" && attrs.nodeType == null && !Array.isArray(attrs)) {\\n    start = 2;\\n    for (var name in attrs) {\\n      if (name == \\\"style\\\") { dom.style.cssText = attrs[name]; }\\n      else if (attrs[name] != null) { dom.setAttribute(name, attrs[name]); }\\n    }\\n  }\\n  for (var i = start; i < structure.length; i++) {\\n    var child = structure[i];\\n    if (child === 0) {\\n      if (i < structure.length - 1 || i > start)\\n        { throw new RangeError(\\\"Content hole must be the only child of its parent node\\\") }\\n      return {dom: dom, contentDOM: dom}\\n    } else {\\n      var ref = DOMSerializer.renderSpec(doc, child);\\n        var inner = ref.dom;\\n        var innerContent = ref.contentDOM;\\n      dom.appendChild(inner);\\n      if (innerContent) {\\n        if (contentDOM) { throw new RangeError(\\\"Multiple content holes\\\") }\\n        contentDOM = innerContent;\\n      }\\n    }\\n  }\\n  return {dom: dom, contentDOM: contentDOM}\\n};\\n\\n// :: (Schema) → DOMSerializer\\n// Build a serializer using the [`toDOM`](#model.NodeSpec.toDOM)\\n// properties in a schema's node and mark specs.\\nDOMSerializer.fromSchema = function fromSchema (schema) {\\n  return schema.cached.domSerializer ||\\n    (schema.cached.domSerializer = new DOMSerializer(this.nodesFromSchema(schema), this.marksFromSchema(schema)))\\n};\\n\\n// : (Schema) → Object<(node: Node) → DOMOutputSpec>\\n// Gather the serializers in a schema's node specs into an object.\\n// This can be useful as a base to build a custom serializer from.\\nDOMSerializer.nodesFromSchema = function nodesFromSchema (schema) {\\n  var result = gatherToDOM(schema.nodes);\\n  if (!result.text) { result.text = function (node) { return node.text; }; }\\n  return result\\n};\\n\\n// : (Schema) → Object<(mark: Mark) → DOMOutputSpec>\\n// Gather the serializers in a schema's mark specs into an object.\\nDOMSerializer.marksFromSchema = function marksFromSchema (schema) {\\n  return gatherToDOM(schema.marks)\\n};\\n\\nfunction gatherToDOM(obj) {\\n  var result = {};\\n  for (var name in obj) {\\n    var toDOM = obj[name].spec.toDOM;\\n    if (toDOM) { result[name] = toDOM; }\\n  }\\n  return result\\n}\\n\\nfunction doc(options) {\\n  // declare global: window\\n  return options.document || window.document\\n}\\n\\nexports.Node = Node;\\nexports.ResolvedPos = ResolvedPos;\\nexports.NodeRange = NodeRange;\\nexports.Fragment = Fragment;\\nexports.Slice = Slice;\\nexports.ReplaceError = ReplaceError;\\nexports.Mark = Mark;\\nexports.Schema = Schema;\\nexports.NodeType = NodeType;\\nexports.MarkType = MarkType;\\nexports.ContentMatch = ContentMatch;\\nexports.DOMParser = DOMParser;\\nexports.DOMSerializer = DOMSerializer;\\n//# sourceMappingURL=index.js.map\\n\\n\\n//# sourceURL=webpack:///./node_modules/prosemirror-model/dist/index.js?\");\n\n/***/ }),\n\n/***/ \"./schema.js\":\n/*!*******************!*\\\n  !*** ./schema.js ***!\n  \\*******************/\n/*! exports provided: schema, default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"schema\\\", function() { return schema; });\\n/* harmony import */ var prosemirror_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-model */ \\\"./node_modules/prosemirror-model/dist/index.js\\\");\\n/* harmony import */ var prosemirror_model__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__);\\n\\n\\nconst schema = new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__[\\\"Schema\\\"]({\\n  nodes: {\\n    text: {\\n      group: 'inline'\\n    },\\n    bold: {\\n      group: 'inline',\\n      inline: true,\\n      content: 'text*',\\n      toDOM() { return [\\\"strong\\\", 0] },\\n      parseDOM: [{tag: 'strong'}]\\n    },\\n    h1: {\\n      group: 'block',\\n      content: \\\"inline*\\\",\\n      toDOM() { return [\\\"h1\\\", 0] },\\n      parseDOM: [{tag: \\\"h1\\\"}]\\n    },\\n    paragraph: {\\n      group: 'block',\\n      content: \\\"inline*\\\",\\n      toDOM() { return [\\\"p\\\", 0] },\\n      parseDOM: [{tag: \\\"p\\\"}]\\n    },\\n    doc: {\\n      content: \\\"block+\\\"\\n    }\\n  }\\n})\\n\\n// console.log(schema);\\n// module.exports = schema\\n\\n/* harmony default export */ __webpack_exports__[\\\"default\\\"] = (schema);\\n\\n\\n//# sourceURL=webpack:///./schema.js?\");\n\n/***/ })\n\n/******/ });\n\n//# sourceURL=webpack:///../prose/dist/schema.js?");

/***/ }),

/***/ "./editor.js":
/*!*******************!*\
  !*** ./editor.js ***!
  \*******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var automerge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! automerge */ \"./node_modules/automerge/dist/automerge.js\");\n/* harmony import */ var automerge__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(automerge__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _parser_parse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/parse.js */ \"../parser/parse.js\");\n/* harmony import */ var _parser_parse_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_parser_parse_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _snabbdom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./snabbdom.js */ \"./snabbdom.js\");\n// const md = require(\"markdown\").markdown;\n// import vnode2 from \"./jsonMLToSnabbdom.js\";\n// import vnodeRem from \"./vnode_remarkable.js\";\n// import vnodeIt from \"./vnode_markdown_it_ast.js\";\n\n\n\n\nconst log = value => console.log(value) || value\n\nconst INSERT_TEXT = 'INSERT_TEXT'\nconst SPLIT_BLOCK = 'SPLIT_BLOCK'\nconst REMOVE_CHAR = 'REMOVE_CHAR'\n\nlet isDocumentOwner = false\n\nsocket.on('connected', msg => {\n  if (msg.peers === 1) {\n    isDocumentOwner = true\n    let initialState = automerge__WEBPACK_IMPORTED_MODULE_0___default.a.init()\n    initialState = automerge__WEBPACK_IMPORTED_MODULE_0___default.a.change(initialState, 'init1', doc => {\n      doc.blocks = []\n      const title = new automerge__WEBPACK_IMPORTED_MODULE_0___default.a.Text()\n      // title.insertAt(0, \"#\", \" \", \"T\", \"i\", \"t\", \"l\", \"e\");\n      doc.blocks.push(title)\n      // doc.blocks.push(Automerge.Text(\"That has 2 lines **bold!**\"));\n    })\n\n    initialState = automerge__WEBPACK_IMPORTED_MODULE_0___default.a.change(initialState, 'init2', doc => {\n      doc.blocks[0] = doc.blocks[0].insertAt(\n        0,\n        '#',\n        ' ',\n        'T',\n        'i',\n        't',\n        'l',\n        'e'\n      )\n    })\n\n    oemd('editor', initialState)\n  } else {\n    isDocumentOwner = false\n    socket.emit('get_state')\n  }\n  console.log('connected', msg)\n})\n\nsocket.on('initial_state_changes', changes => {\n  let initialState = automerge__WEBPACK_IMPORTED_MODULE_0___default.a.init()\n\n  initialState = automerge__WEBPACK_IMPORTED_MODULE_0___default.a.applyChanges(initialState, changes)\n\n  console.log({ initialState })\n\n  oemd('editor', initialState)\n})\nconst reducers = {\n  INSERT_TEXT: (state, { text, blockIndex, offset }) => {\n    return automerge__WEBPACK_IMPORTED_MODULE_0___default.a.change(state, 'insert', state => {\n      for (let i = 0; i < state.blocks.length; i++) {\n        if (i !== blockIndex) continue\n\n        state.blocks[i].insertAt(offset, text)\n      }\n    })\n  },\n  REMOVE_CHAR: (state, { text, blockIndex, offset }) => {\n    return automerge__WEBPACK_IMPORTED_MODULE_0___default.a.change(state, 'insert', state => {\n      for (let i = 0; i < state.blocks.length; i++) {\n        if (i !== blockIndex) continue\n\n        state.blocks[i].deleteAt(offset - 1, 1)\n      }\n    })\n  },\n  SPLIT_BLOCK: (state, { blockIndex, offset }) => {\n    return automerge__WEBPACK_IMPORTED_MODULE_0___default.a.change(state, 'insert', state => {\n      const { blocks } = state\n\n      const blocksBefore = blocks.slice(0, blockIndex)\n      const splitBlock = blocks[blockIndex]\n      const blocksAfter = blocks.slice(blockIndex + 1)\n\n      blocks.deleteAt(blockIndex)\n      blocks.insertAt(\n        blockIndex,\n        splitBlock.slice(0, offset),\n        splitBlock.slice(blockIndex + 1)\n      )\n    })\n  }\n}\n\nconst updateState = (state, action) => {\n  const oldState = JSON.parse(JSON.stringify(state))\n  const reducer = reducers[action.type]\n\n  if (!reducer) throw new Error(`${action.type} not supported`)\n\n  const newState = reducer(state, action.payload)\n\n  socket.emit('change', automerge__WEBPACK_IMPORTED_MODULE_0___default.a.getChanges(state, newState))\n\n  console.log({\n    oldState,\n    newState,\n    action\n  })\n\n  return newState\n}\n\nconst oemd = (targetId, initialState) => {\n  let state = initialState\n\n  const domNode = document.getElementById(targetId)\n\n  let vNode = stateToVNode(targetId, state)\n  Object(_snabbdom_js__WEBPACK_IMPORTED_MODULE_2__[\"patch\"])(domNode, vNode)\n\n  socket.on('get_state', () => {\n    if (isDocumentOwner) {\n      const changes = automerge__WEBPACK_IMPORTED_MODULE_0___default.a.getChanges(automerge__WEBPACK_IMPORTED_MODULE_0___default.a.init(), state)\n\n      socket.emit('initial_state_changes', changes)\n    }\n  })\n\n  socket.on('change', changes => {\n    state = automerge__WEBPACK_IMPORTED_MODULE_0___default.a.applyChanges(state, changes)\n\n    render()\n  })\n\n  const update = action => {\n    state = updateState(state, action)\n\n    render()\n  }\n\n  const render = () => {\n    const newVNode = stateToVNode(targetId, state)\n    vNode = Object(_snabbdom_js__WEBPACK_IMPORTED_MODULE_2__[\"patch\"])(vNode, newVNode)\n  }\n\n  domNode.addEventListener('keydown', keyDownHandler(update, targetId))\n}\n\nconst inputHandler = update => e => {\n  const text = Array.prototype.map\n    .call(e.target.children, child => {\n      const childText = child.innerText\n      const len = childText.length\n      const res =\n        childText.charAt(len - 1) === '\\n'\n          ? childText.slice(0, len - 2)\n          : childText\n      return res\n    })\n    .join('\\n')\n\n  update(text)\n}\n\nconst findBlockParent = node => {\n  if (node.dataset && node.dataset.isBlock === 'true') return node\n\n  if (node.contenteditable) {\n    throw new Error('Input fired outside blockNode')\n  }\n\n  return findBlockParent(node.parentNode)\n}\n\nconst findNodeAtOffset = (targetId, blockIndex, offset) => {\n  return findNodeInDomAtOffset(\n    document.getElementById(targetId).childNodes[blockIndex],\n    offset\n  )\n}\n\nconst findNodeInDomAtOffset = (container, offset) => {\n  let current = 0\n  let node = container.firstChild\n  while (node) {\n    const len = node.textContent.length\n    current += len\n\n    if (current >= offset) {\n      const offsetInNode = offset - (current - len)\n      if (node.nodeName === '#text') {\n        return {\n          innerOffset: offsetInNode,\n          node\n        }\n      }\n\n      return findNodeInDomAtOffset(node, offsetInNode)\n    }\n\n    const nextNode = node.nextSibling\n\n    if (!nextNode) {\n      return {\n        node,\n        innerOffset: current\n      }\n    }\n\n    node = nextNode\n  }\n\n  alert('cursor out of range')\n}\n\nconst setCursor = (targetId, range, blockIndex, offset) => {\n  const {\n    node: newCursorNode,\n    innerOffset: newCursorOffset\n  } = findNodeAtOffset(targetId, blockIndex, offset)\n\n  range.setStart(newCursorNode, newCursorOffset)\n  range.setEnd(newCursorNode, newCursorOffset)\n}\n\nconst keysSkip = ['Control', 'Shift', 'Alt']\n\nconst keyDownHandler = (update, targetId) => e => {\n  const selection = window.getSelection()\n  const initRange = selection.getRangeAt(0)\n  const key = e.key\n\n  if (keysSkip.includes(key)) return\n\n  if (!initRange.collapsed) {\n    alert('operations not supported on selections')\n  }\n\n  const eventNode = initRange.startContainer\n\n  const blockParent = findBlockParent(eventNode)\n  const preCaretRange = document.createRange()\n  preCaretRange.selectNodeContents(blockParent)\n  preCaretRange.setEnd(initRange.startContainer, initRange.startOffset)\n  const offset = preCaretRange.toString().length\n  const blockIndex = parseInt(blockParent.dataset.index, 10)\n  const blocks = document.getElementById(targetId).childNodes\n\n  // console.log({\n  //   key: key,\n  //   offset,\n  //   blockIndex,\n  //   preCaretRange: preCaretRange.toString(),\n  //   blockParent\n  // });\n  e.preventDefault()\n\n  const range = document.createRange()\n\n  let newCursorNode, newCursorOffset\n  if (key === 'Enter') {\n    update({\n      type: SPLIT_BLOCK,\n      payload: {\n        blockIndex,\n        offset\n      }\n    })\n    setCursor(targetId, range, blockIndex + 1, 0)\n  } else if (key === 'ArrowLeft') {\n    if (offset !== 0) setCursor(targetId, range, blockIndex, offset - 1)\n  } else if (key === 'ArrowDown') {\n    if (blockIndex !== blocks.length - 1) {\n      setCursor(targetId, range, blockIndex + 1, offset)\n    }\n  } else if (key === 'ArrowUp') {\n    if (blockIndex !== 0) {\n      setCursor(targetId, range, blockIndex - 1, offset)\n    }\n  } else if (key === 'ArrowRight') {\n    if (offset !== blockParent.textContent.length - 1) {\n      setCursor(targetId, range, blockIndex, offset + 1)\n    }\n  } else if (key === 'Backspace') {\n    update({\n      type: REMOVE_CHAR,\n      payload: {\n        blockIndex: blockIndex,\n        offset\n      }\n    })\n\n    setCursor(targetId, range, blockIndex, offset - 1)\n  } else if (key === 'Delete') {\n    update({\n      type: REMOVE_CHAR,\n      payload: {\n        blockIndex: blockIndex,\n        offset: offset + 1\n      }\n    })\n\n    setCursor(targetId, range, blockIndex, offset)\n  } else {\n    update({\n      type: INSERT_TEXT,\n      payload: {\n        blockIndex: blockIndex,\n        text: key,\n        offset\n      }\n    })\n\n    setCursor(targetId, range, blockIndex, offset + 1)\n  }\n\n  selection.removeAllRanges()\n  selection.addRange(range)\n  // console.log({\n  //   newCursorNode,\n  //   newCursorOffset\n  // });\n  // const text = Array.prototype.map\n  //   .call(e.target.children, child => {\n  //     const childText = child.innerText;\n  //     const len = childText.length;\n  //     const res =\n  //       childText.charAt(len - 1) === \"\\n\"\n  //         ? childText.slice(0, len - 2)\n  //         : childText;\n  //     return res;\n  //   })\n  //   .join(\"\\n\");\n  //\n  // update(text);\n}\n\nconst stateToVNode = (targetId, state) => {\n  // const parseTree = parse(\"\\n\" + text)[0];\n  console.log(state)\n  console.log(state.blocks)\n  return Object(_snabbdom_js__WEBPACK_IMPORTED_MODULE_2__[\"h\"])(\n    `div#${targetId}`,\n    {},\n    state.blocks.map((block, index) => {\n      const tree = _parser_parse_js__WEBPACK_IMPORTED_MODULE_1___default()(block.join(''))[0]\n\n      // console.log({ tree });\n      return Object(_snabbdom_js__WEBPACK_IMPORTED_MODULE_2__[\"h\"])(\n        tree.tag,\n        { dataset: { isBlock: true, index: index.toString() } },\n        tree.children.map(stateToVNodeChild)\n      )\n    })\n  )\n}\n\nconst stateToVNodeChild = tree => {\n  // console.log(tree);\n  if (typeof tree === 'string') return tree\n  if (tree.tag === 'text') return tree.children\n\n  const { children } = tree\n  return Object(_snabbdom_js__WEBPACK_IMPORTED_MODULE_2__[\"h\"])(\n    tree.tag,\n    { props: tree.attrs },\n    typeof children === 'string' ? children : children.map(stateToVNodeChild)\n  )\n}\n//\n// const vnodeFromParseTree = (isBlock = false) => (node, index) => {\n//   if (node.tag === \"text\") return node.children;\n//\n//   return h(\n//     node.tag,\n//     { props: node.attrs, dataset: { isBlock, index } },\n//     node.children.map(vnodeFromParseTree())\n//   );\n// };\n\n// oemd('editor')\n\n\n//# sourceURL=webpack:///./editor.js?");

/***/ }),

/***/ "./node_modules/automerge/dist/automerge.js":
/*!**************************************************!*\
  !*** ./node_modules/automerge/dist/automerge.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse {}\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = \"./src/automerge.js\");\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ \"./backend/index.js\":\n/*!**************************!*\\\n  !*** ./backend/index.js ***!\n  \\**************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _require = __webpack_require__(/*! immutable */ \"./node_modules/immutable/dist/immutable.js\"),\n    Map = _require.Map,\n    List = _require.List,\n    fromJS = _require.fromJS;\n\nvar _require2 = __webpack_require__(/*! ../src/common */ \"./src/common.js\"),\n    isObject = _require2.isObject,\n    lessOrEqual = _require2.lessOrEqual;\n\nvar OpSet = __webpack_require__(/*! ./op_set */ \"./backend/op_set.js\");\n\nvar MaterializationContext = function () {\n  function MaterializationContext() {\n    _classCallCheck(this, MaterializationContext);\n\n    this.diffs = {};\n    this.children = {};\n  }\n\n  /**\n   * Unpacks `value`: if it's an object of the form `{objectId: '...'}`, updates\n   * `diff` to link to that objectId. Otherwise uses `value` as a primitive.\n   */\n\n\n  _createClass(MaterializationContext, [{\n    key: 'unpackValue',\n    value: function unpackValue(parentId, diff, value) {\n      if (isObject(value)) {\n        diff.value = value.objectId;\n        diff.link = true;\n        this.children[parentId].push(value.objectId);\n      } else {\n        diff.value = value;\n      }\n    }\n\n    /**\n     * Unpacks `conflicts`: if it's an Immutable.js Map object (where keys are\n     * actor IDs and values are primitive or object values), updates `diff` to\n     * describe the conflicts.\n     */\n\n  }, {\n    key: 'unpackConflicts',\n    value: function unpackConflicts(parentId, diff, conflicts) {\n      if (conflicts) {\n        diff.conflicts = [];\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = conflicts[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var _ref = _step.value;\n\n            var _ref2 = _slicedToArray(_ref, 2);\n\n            var actor = _ref2[0];\n            var value = _ref2[1];\n\n            var conflict = { actor: actor };\n            this.unpackValue(parentId, conflict, value);\n            diff.conflicts.push(conflict);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n    }\n\n    /**\n     * Updates `this.diffs[objectId]` to contain the patch necessary to\n     * instantiate the map object with ID `objectId`.\n     */\n\n  }, {\n    key: 'instantiateMap',\n    value: function instantiateMap(opSet, objectId) {\n      var diffs = this.diffs[objectId];\n      if (objectId !== OpSet.ROOT_ID) {\n        diffs.push({ obj: objectId, type: 'map', action: 'create' });\n      }\n\n      var conflicts = OpSet.getObjectConflicts(opSet, objectId, this);\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = OpSet.getObjectFields(opSet, objectId)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var key = _step2.value;\n\n          var diff = { obj: objectId, type: 'map', action: 'set', key: key };\n          this.unpackValue(objectId, diff, OpSet.getObjectField(opSet, objectId, key, this));\n          this.unpackConflicts(objectId, diff, conflicts.get(key));\n          diffs.push(diff);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n\n    /**\n     * Updates `this.diffs[objectId]` to contain the patch necessary to\n     * instantiate the list or text object with ID `objectId`.\n     */\n\n  }, {\n    key: 'instantiateList',\n    value: function instantiateList(opSet, objectId, type) {\n      var diffs = this.diffs[objectId];\n      diffs.push({ obj: objectId, type: type, action: 'create' });\n\n      var conflicts = OpSet.listIterator(opSet, objectId, 'conflicts', this);\n      var values = OpSet.listIterator(opSet, objectId, 'values', this);\n\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = OpSet.listIterator(opSet, objectId, 'elems', this)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var _ref3 = _step3.value;\n\n          var _ref4 = _slicedToArray(_ref3, 2);\n\n          var index = _ref4[0];\n          var elemId = _ref4[1];\n\n          var diff = { obj: objectId, type: type, action: 'insert', index: index, elemId: elemId };\n          this.unpackValue(objectId, diff, values.next().value);\n          this.unpackConflicts(objectId, diff, conflicts.next().value);\n          diffs.push(diff);\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n    }\n\n    /**\n     * Called by OpSet.getOpValue() when recursively instantiating an object in\n     * the document tree. Updates `this.diffs[objectId]` to contain the patch\n     * necessary to instantiate the object, and returns `{objectId: objectId}`\n     * (which is then interpreted by `this.unpackValue()`).\n     */\n\n  }, {\n    key: 'instantiateObject',\n    value: function instantiateObject(opSet, objectId) {\n      if (this.diffs[objectId]) return { objectId: objectId };\n\n      var isRoot = objectId === OpSet.ROOT_ID;\n      var objType = opSet.getIn(['byObject', objectId, '_init', 'action']);\n      this.diffs[objectId] = [];\n      this.children[objectId] = [];\n\n      if (isRoot || objType === 'makeMap') {\n        this.instantiateMap(opSet, objectId);\n      } else if (objType === 'makeList') {\n        this.instantiateList(opSet, objectId, 'list');\n      } else if (objType === 'makeText') {\n        this.instantiateList(opSet, objectId, 'text');\n      } else {\n        throw new RangeError('Unknown object type: ' + objType);\n      }\n      return { objectId: objectId };\n    }\n\n    /**\n     * Constructs the list of all `diffs` necessary to instantiate the object tree\n     * whose root is the object with ID `objectId`.\n     */\n\n  }, {\n    key: 'makePatch',\n    value: function makePatch(objectId, diffs) {\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = this.children[objectId][Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var childId = _step4.value;\n\n          this.makePatch(childId, diffs);\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n\n      diffs.push.apply(diffs, _toConsumableArray(this.diffs[objectId]));\n    }\n  }]);\n\n  return MaterializationContext;\n}();\n\n/**\n * Returns an empty node state.\n */\n\n\nfunction init() {\n  return Map({ opSet: OpSet.init() });\n}\n\n/**\n * Constructs a patch object from the current node state `state` and the list\n * of object modifications `diffs`.\n */\nfunction makePatch(state, diffs) {\n  var canUndo = state.getIn(['opSet', 'undoPos']) > 0;\n  var canRedo = !state.getIn(['opSet', 'redoStack']).isEmpty();\n  var clock = state.getIn(['opSet', 'clock']).toJS();\n  var deps = state.getIn(['opSet', 'deps']).toJS();\n  return { clock: clock, deps: deps, canUndo: canUndo, canRedo: canRedo, diffs: diffs };\n}\n\n/**\n * The implementation behind `applyChanges()` and `applyLocalChange()`.\n */\nfunction apply(state, changes, undoable) {\n  var diffs = [],\n      opSet = state.get('opSet');\n  var _iteratorNormalCompletion5 = true;\n  var _didIteratorError5 = false;\n  var _iteratorError5 = undefined;\n\n  try {\n    for (var _iterator5 = fromJS(changes)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n      var change = _step5.value;\n\n      change = change.remove('requestType');\n\n      var _OpSet$addChange = OpSet.addChange(opSet, change, undoable),\n          _OpSet$addChange2 = _slicedToArray(_OpSet$addChange, 2),\n          newOpSet = _OpSet$addChange2[0],\n          diff = _OpSet$addChange2[1];\n\n      diffs.push.apply(diffs, _toConsumableArray(diff));\n      opSet = newOpSet;\n    }\n  } catch (err) {\n    _didIteratorError5 = true;\n    _iteratorError5 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion5 && _iterator5.return) {\n        _iterator5.return();\n      }\n    } finally {\n      if (_didIteratorError5) {\n        throw _iteratorError5;\n      }\n    }\n  }\n\n  state = state.set('opSet', opSet);\n  return [state, makePatch(state, diffs)];\n}\n\n/**\n * Applies a list of `changes` from remote nodes to the node state `state`.\n * Returns a two-element array `[state, patch]` where `state` is the updated\n * node state, and `patch` describes the modifications that need to be made\n * to the document objects to reflect these changes.\n */\nfunction applyChanges(state, changes) {\n  return apply(state, changes, false);\n}\n\n/**\n * Takes a single change request `change` made by the local user, and applies\n * it to the node state `state`. The difference to `applyChange()` is that this\n * function adds the change to the undo history, so it can be undone (whereas\n * remote changes are not normally added to the undo history). Returns a\n * two-element array `[state, patch]` where `state` is the updated node state,\n * and `patch` confirms the modifications to the document objects.\n */\nfunction applyLocalChange(state, change) {\n  if (typeof change.actor !== 'string' || typeof change.seq !== 'number') {\n    throw new TypeError('Change request requries `actor` and `seq` properties');\n  }\n  // Throw error if we have already applied this change request\n  if (change.seq <= state.getIn(['opSet', 'clock', change.actor], 0)) {\n    throw new RangeError('Change request has already been applied');\n  }\n\n  var patch = void 0;\n  if (change.requestType === 'change') {\n    ;\n    var _apply = apply(state, [change], true);\n\n    var _apply2 = _slicedToArray(_apply, 2);\n\n    state = _apply2[0];\n    patch = _apply2[1];\n  } else if (change.requestType === 'undo') {\n    ;\n    var _undo = undo(state, change);\n\n    var _undo2 = _slicedToArray(_undo, 2);\n\n    state = _undo2[0];\n    patch = _undo2[1];\n  } else if (change.requestType === 'redo') {\n    ;\n    var _redo = redo(state, change);\n\n    var _redo2 = _slicedToArray(_redo, 2);\n\n    state = _redo2[0];\n    patch = _redo2[1];\n  } else {\n    throw new RangeError('Unknown requestType: ' + change.requestType);\n  }\n  patch.actor = change.actor;\n  patch.seq = change.seq;\n  return [state, patch];\n}\n\n/**\n * Returns a patch that, when applied to an empty document, constructs the\n * document tree in the state described by the node state `state`.\n */\nfunction getPatch(state) {\n  var diffs = [],\n      opSet = state.get('opSet');\n  var context = new MaterializationContext(opSet);\n  context.instantiateObject(opSet, OpSet.ROOT_ID);\n  context.makePatch(OpSet.ROOT_ID, diffs);\n  return makePatch(state, diffs);\n}\n\nfunction getChanges(oldState, newState) {\n  var oldClock = oldState.getIn(['opSet', 'clock']);\n  var newClock = newState.getIn(['opSet', 'clock']);\n  if (!lessOrEqual(oldClock, newClock)) {\n    throw new RangeError('Cannot diff two states that have diverged');\n  }\n\n  return OpSet.getMissingChanges(newState.get('opSet'), oldClock).toJS();\n}\n\nfunction getChangesForActor(state, actorId) {\n  // I might want to validate the actorId here\n  return OpSet.getChangesForActor(state.get('opSet'), actorId).toJS();\n}\n\nfunction getMissingChanges(state, clock) {\n  return OpSet.getMissingChanges(state.get('opSet'), clock).toJS();\n}\n\nfunction getMissingDeps(state) {\n  return OpSet.getMissingDeps(state.get('opSet'));\n}\n\n/**\n * Takes any changes that appear in `remote` but not in `local`, and applies\n * them to `local`, returning a two-element list `[state, patch]` where `state`\n * is the updated version of `local`, and `patch` describes the modifications\n * that need to be made to the document objects to reflect these changes.\n * Note that this function does not detect if the same sequence number has been\n * reused for different changes in `local` and `remote` respectively.\n */\nfunction merge(local, remote) {\n  var changes = OpSet.getMissingChanges(remote.get('opSet'), local.getIn(['opSet', 'clock']));\n  return applyChanges(local, changes);\n}\n\n/**\n * Undoes the last change by the local user in the node state `state`. The\n * `request` object contains all parts of the change except the operations;\n * this function fetches the operations from the undo stack, pushes a record\n * onto the redo stack, and applies the change, returning a two-element list\n * containing `[state, patch]`.\n */\nfunction undo(state, request) {\n  var undoPos = state.getIn(['opSet', 'undoPos']);\n  var undoOps = state.getIn(['opSet', 'undoStack', undoPos - 1]);\n  if (undoPos < 1 || !undoOps) {\n    throw new RangeError('Cannot undo: there is nothing to be undone');\n  }\n  var actor = request.actor,\n      seq = request.seq,\n      deps = request.deps,\n      message = request.message;\n\n  var change = Map({ actor: actor, seq: seq, deps: fromJS(deps), message: message, ops: undoOps });\n\n  var opSet = state.get('opSet');\n  var redoOps = List().withMutations(function (redoOps) {\n    var _iteratorNormalCompletion6 = true;\n    var _didIteratorError6 = false;\n    var _iteratorError6 = undefined;\n\n    try {\n      for (var _iterator6 = undoOps[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n        var op = _step6.value;\n\n        if (!['set', 'del', 'link'].includes(op.get('action'))) {\n          throw new RangeError('Unexpected operation type in undo history: ' + op);\n        }\n        var fieldOps = OpSet.getFieldOps(opSet, op.get('obj'), op.get('key'));\n        if (fieldOps.isEmpty()) {\n          redoOps.push(Map({ action: 'del', obj: op.get('obj'), key: op.get('key') }));\n        } else {\n          var _iteratorNormalCompletion7 = true;\n          var _didIteratorError7 = false;\n          var _iteratorError7 = undefined;\n\n          try {\n            for (var _iterator7 = fieldOps[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n              var fieldOp = _step7.value;\n\n              redoOps.push(fieldOp.remove('actor').remove('seq'));\n            }\n          } catch (err) {\n            _didIteratorError7 = true;\n            _iteratorError7 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion7 && _iterator7.return) {\n                _iterator7.return();\n              }\n            } finally {\n              if (_didIteratorError7) {\n                throw _iteratorError7;\n              }\n            }\n          }\n        }\n      }\n    } catch (err) {\n      _didIteratorError6 = true;\n      _iteratorError6 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion6 && _iterator6.return) {\n          _iterator6.return();\n        }\n      } finally {\n        if (_didIteratorError6) {\n          throw _iteratorError6;\n        }\n      }\n    }\n  });\n\n  opSet = opSet.set('undoPos', undoPos - 1).update('redoStack', function (stack) {\n    return stack.push(redoOps);\n  });\n\n  var _OpSet$addChange3 = OpSet.addChange(opSet, change, false),\n      _OpSet$addChange4 = _slicedToArray(_OpSet$addChange3, 2),\n      newOpSet = _OpSet$addChange4[0],\n      diffs = _OpSet$addChange4[1];\n\n  state = state.set('opSet', newOpSet);\n  return [state, makePatch(state, diffs)];\n}\n\n/**\n * Redoes the last `undo()` in the node state `state`. The `request` object\n * contains all parts of the change except the operations; this function\n * fetches the operations from the redo stack, and applies the change,\n * returning a two-element list `[state, patch]`.\n */\nfunction redo(state, request) {\n  var redoOps = state.getIn(['opSet', 'redoStack']).last();\n  if (!redoOps) {\n    throw new RangeError('Cannot redo: the last change was not an undo');\n  }\n  var actor = request.actor,\n      seq = request.seq,\n      deps = request.deps,\n      message = request.message;\n\n  var change = Map({ actor: actor, seq: seq, deps: fromJS(deps), message: message, ops: redoOps });\n\n  var opSet = state.get('opSet').update('undoPos', function (undoPos) {\n    return undoPos + 1;\n  }).update('redoStack', function (stack) {\n    return stack.pop();\n  });\n\n  var _OpSet$addChange5 = OpSet.addChange(opSet, change, false),\n      _OpSet$addChange6 = _slicedToArray(_OpSet$addChange5, 2),\n      newOpSet = _OpSet$addChange6[0],\n      diffs = _OpSet$addChange6[1];\n\n  state = state.set('opSet', newOpSet);\n  return [state, makePatch(state, diffs)];\n}\n\nmodule.exports = {\n  init: init, applyChanges: applyChanges, applyLocalChange: applyLocalChange, getPatch: getPatch,\n  getChanges: getChanges, getChangesForActor: getChangesForActor, getMissingChanges: getMissingChanges, getMissingDeps: getMissingDeps, merge: merge\n};\n\n/***/ }),\n\n/***/ \"./backend/op_set.js\":\n/*!***************************!*\\\n  !*** ./backend/op_set.js ***!\n  \\***************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar _require = __webpack_require__(/*! immutable */ \"./node_modules/immutable/dist/immutable.js\"),\n    Map = _require.Map,\n    List = _require.List,\n    Set = _require.Set;\n\nvar _require2 = __webpack_require__(/*! ./skip_list */ \"./backend/skip_list.js\"),\n    SkipList = _require2.SkipList;\n\nvar ROOT_ID = '00000000-0000-0000-0000-000000000000';\n\n// Returns true if the two operations are concurrent, that is, they happened without being aware of\n// each other (neither happened before the other). Returns false if one supersedes the other.\nfunction isConcurrent(opSet, op1, op2) {\n  var _ref = [op1.get('actor'), op1.get('seq')],\n      actor1 = _ref[0],\n      seq1 = _ref[1];\n  var _ref2 = [op2.get('actor'), op2.get('seq')],\n      actor2 = _ref2[0],\n      seq2 = _ref2[1];\n\n  if (!actor1 || !actor2 || !seq1 || !seq2) return false;\n\n  var clock1 = opSet.getIn(['states', actor1, seq1 - 1, 'allDeps']);\n  var clock2 = opSet.getIn(['states', actor2, seq2 - 1, 'allDeps']);\n\n  return clock1.get(actor2, 0) < seq2 && clock2.get(actor1, 0) < seq1;\n}\n\n// Returns true if all changes that causally precede the given change\n// have already been applied in `opSet`.\nfunction causallyReady(opSet, change) {\n  var actor = change.get('actor'),\n      seq = change.get('seq');\n  var satisfied = true;\n  change.get('deps').set(actor, seq - 1).forEach(function (depSeq, depActor) {\n    if (opSet.getIn(['clock', depActor], 0) < depSeq) satisfied = false;\n  });\n  return satisfied;\n}\n\nfunction transitiveDeps(opSet, baseDeps) {\n  return baseDeps.reduce(function (deps, depSeq, depActor) {\n    if (depSeq <= 0) return deps;\n    var transitive = opSet.getIn(['states', depActor, depSeq - 1, 'allDeps']);\n    return deps.mergeWith(function (a, b) {\n      return Math.max(a, b);\n    }, transitive).set(depActor, depSeq);\n  }, Map());\n}\n\n// Returns the path from the root object to the given objectId, as an array of string keys\n// (for ancestor maps) and integer indexes (for ancestor lists). If there are several paths\n// to the same object, returns one of the paths arbitrarily. If the object is not reachable\n// from the root, returns null.\nfunction getPath(opSet, objectId) {\n  var path = [];\n  while (objectId !== ROOT_ID) {\n    var ref = opSet.getIn(['byObject', objectId, '_inbound'], Set()).first();\n    if (!ref) return null;\n    objectId = ref.get('obj');\n    var objType = opSet.getIn(['byObject', objectId, '_init', 'action']);\n\n    if (objType === 'makeList' || objType === 'makeText') {\n      var index = opSet.getIn(['byObject', objectId, '_elemIds']).indexOf(ref.get('key'));\n      if (index < 0) return null;\n      path.unshift(index);\n    } else {\n      path.unshift(ref.get('key'));\n    }\n  }\n  return path;\n}\n\n// Processes a 'makeMap', 'makeList', or 'makeText' operation\nfunction applyMake(opSet, op) {\n  var objectId = op.get('obj');\n  if (opSet.hasIn(['byObject', objectId])) throw new Error('Duplicate creation of object ' + objectId);\n\n  var edit = { action: 'create', obj: objectId };\n  var object = Map({ _init: op, _inbound: Set() });\n  if (op.get('action') === 'makeMap') {\n    edit.type = 'map';\n  } else {\n    edit.type = op.get('action') === 'makeText' ? 'text' : 'list';\n    object = object.set('_elemIds', new SkipList());\n  }\n\n  opSet = opSet.setIn(['byObject', objectId], object);\n  return [opSet, [edit]];\n}\n\n// Processes an 'ins' operation. Does not produce any diffs since the insertion alone\n// produces no application-visible effect; the list element only becomes visible through\n// a subsequent 'set' or 'link' operation on the inserted element.\nfunction applyInsert(opSet, op) {\n  var objectId = op.get('obj'),\n      elem = op.get('elem'),\n      elemId = op.get('actor') + ':' + elem;\n  if (!opSet.get('byObject').has(objectId)) throw new Error('Modification of unknown object ' + objectId);\n  if (opSet.hasIn(['byObject', objectId, '_insertion', elemId])) throw new Error('Duplicate list element ID ' + elemId);\n\n  opSet = opSet.updateIn(['byObject', objectId, '_following', op.get('key')], List(), function (list) {\n    return list.push(op);\n  }).updateIn(['byObject', objectId, '_maxElem'], 0, function (maxElem) {\n    return Math.max(elem, maxElem);\n  }).setIn(['byObject', objectId, '_insertion', elemId], op);\n  return [opSet, []];\n}\n\nfunction getConflicts(ops) {\n  var conflicts = [];\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = ops.shift()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var op = _step.value;\n\n      var conflict = { actor: op.get('actor'), value: op.get('value') };\n      if (op.get('action') === 'link') conflict.link = true;\n      conflicts.push(conflict);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return conflicts;\n}\n\nfunction patchList(opSet, objectId, index, elemId, action, ops) {\n  var type = opSet.getIn(['byObject', objectId, '_init', 'action']) === 'makeText' ? 'text' : 'list';\n  var firstOp = ops ? ops.first() : null;\n  var elemIds = opSet.getIn(['byObject', objectId, '_elemIds']);\n  var value = firstOp ? firstOp.get('value') : null;\n  var edit = { action: action, type: type, obj: objectId, index: index, path: getPath(opSet, objectId) };\n  if (firstOp && firstOp.get('action') === 'link') {\n    edit.link = true;\n    value = { obj: firstOp.get('value') };\n  }\n\n  if (action === 'insert') {\n    elemIds = elemIds.insertIndex(index, firstOp.get('key'), value);\n    edit.elemId = elemId;\n    edit.value = firstOp.get('value');\n  } else if (action === 'set') {\n    elemIds = elemIds.setValue(firstOp.get('key'), value);\n    edit.value = firstOp.get('value');\n  } else if (action === 'remove') {\n    elemIds = elemIds.removeIndex(index);\n  } else throw new Error('Unknown action type: ' + action);\n\n  if (ops && ops.size > 1) edit.conflicts = getConflicts(ops);\n  opSet = opSet.setIn(['byObject', objectId, '_elemIds'], elemIds);\n  return [opSet, [edit]];\n}\n\nfunction updateListElement(opSet, objectId, elemId) {\n  var ops = getFieldOps(opSet, objectId, elemId);\n  var elemIds = opSet.getIn(['byObject', objectId, '_elemIds']);\n  var index = elemIds.indexOf(elemId);\n\n  if (index >= 0) {\n    if (ops.isEmpty()) {\n      return patchList(opSet, objectId, index, elemId, 'remove', null);\n    } else {\n      return patchList(opSet, objectId, index, elemId, 'set', ops);\n    }\n  } else {\n    if (ops.isEmpty()) return [opSet, []]; // deleting a non-existent element = no-op\n\n    // find the index of the closest preceding list element\n    var prevId = elemId;\n    while (true) {\n      index = -1;\n      prevId = getPrevious(opSet, objectId, prevId);\n      if (!prevId) break;\n      index = elemIds.indexOf(prevId);\n      if (index >= 0) break;\n    }\n\n    return patchList(opSet, objectId, index + 1, elemId, 'insert', ops);\n  }\n}\n\nfunction updateMapKey(opSet, objectId, key) {\n  var ops = getFieldOps(opSet, objectId, key);\n  var edit = { action: '', type: 'map', obj: objectId, key: key, path: getPath(opSet, objectId) };\n\n  if (ops.isEmpty()) {\n    edit.action = 'remove';\n  } else {\n    edit.action = 'set';\n    edit.value = ops.first().get('value');\n    if (ops.first().get('action') === 'link') {\n      edit.link = true;\n    }\n\n    if (ops.size > 1) edit.conflicts = getConflicts(ops);\n  }\n  return [opSet, [edit]];\n}\n\n// Processes a 'set', 'del', or 'link' operation\nfunction applyAssign(opSet, op, topLevel) {\n  var objectId = op.get('obj');\n  var objType = opSet.getIn(['byObject', objectId, '_init', 'action']);\n  if (!opSet.get('byObject').has(objectId)) throw new Error('Modification of unknown object ' + objectId);\n\n  if (opSet.has('undoLocal') && topLevel) {\n    var undoOps = opSet.getIn(['byObject', objectId, op.get('key')], List()).map(function (ref) {\n      return ref.filter(function (v, k) {\n        return ['action', 'obj', 'key', 'value'].includes(k);\n      });\n    });\n    if (undoOps.isEmpty()) {\n      undoOps = List.of(Map({ action: 'del', obj: objectId, key: op.get('key') }));\n    }\n    opSet = opSet.update('undoLocal', function (undoLocal) {\n      return undoLocal.concat(undoOps);\n    });\n  }\n\n  var priorOpsConcurrent = opSet.getIn(['byObject', objectId, op.get('key')], List()).groupBy(function (other) {\n    return !!isConcurrent(opSet, other, op);\n  });\n  var overwritten = priorOpsConcurrent.get(false, List());\n  var remaining = priorOpsConcurrent.get(true, List());\n\n  // If any links were overwritten, remove them from the index of inbound links\n\n  var _loop = function _loop(_op) {\n    opSet = opSet.updateIn(['byObject', _op.get('value'), '_inbound'], function (ops) {\n      return ops.remove(_op);\n    });\n  };\n\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = overwritten.filter(function (op) {\n      return op.get('action') === 'link';\n    })[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var _op = _step2.value;\n\n      _loop(_op);\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  if (op.get('action') === 'link') {\n    opSet = opSet.updateIn(['byObject', op.get('value'), '_inbound'], Set(), function (ops) {\n      return ops.add(op);\n    });\n  }\n  if (op.get('action') !== 'del') {\n    remaining = remaining.push(op);\n  }\n  remaining = remaining.sortBy(function (op) {\n    return op.get('actor');\n  }).reverse();\n  opSet = opSet.setIn(['byObject', objectId, op.get('key')], remaining);\n\n  if (objType === 'makeList' || objType === 'makeText') {\n    return updateListElement(opSet, objectId, op.get('key'));\n  } else {\n    return updateMapKey(opSet, objectId, op.get('key'));\n  }\n}\n\nfunction applyOps(opSet, ops) {\n  var allDiffs = [],\n      newObjects = Set();\n  var _iteratorNormalCompletion3 = true;\n  var _didIteratorError3 = false;\n  var _iteratorError3 = undefined;\n\n  try {\n    for (var _iterator3 = ops[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n      var op = _step3.value;\n\n      var diffs = void 0,\n          action = op.get('action');\n      if (action === 'makeMap' || action === 'makeList' || action === 'makeText') {\n        newObjects = newObjects.add(op.get('obj'));\n        var _applyMake = applyMake(opSet, op);\n\n        var _applyMake2 = _slicedToArray(_applyMake, 2);\n\n        opSet = _applyMake2[0];\n        diffs = _applyMake2[1];\n      } else if (action === 'ins') {\n        ;\n        var _applyInsert = applyInsert(opSet, op);\n\n        var _applyInsert2 = _slicedToArray(_applyInsert, 2);\n\n        opSet = _applyInsert2[0];\n        diffs = _applyInsert2[1];\n      } else if (action === 'set' || action === 'del' || action === 'link') {\n        ;\n        var _applyAssign = applyAssign(opSet, op, !newObjects.contains(op.get('obj')));\n\n        var _applyAssign2 = _slicedToArray(_applyAssign, 2);\n\n        opSet = _applyAssign2[0];\n        diffs = _applyAssign2[1];\n      } else {\n        throw new RangeError('Unknown operation type ' + action);\n      }\n      allDiffs.push.apply(allDiffs, _toConsumableArray(diffs));\n    }\n  } catch (err) {\n    _didIteratorError3 = true;\n    _iteratorError3 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion3 && _iterator3.return) {\n        _iterator3.return();\n      }\n    } finally {\n      if (_didIteratorError3) {\n        throw _iteratorError3;\n      }\n    }\n  }\n\n  return [opSet, allDiffs];\n}\n\nfunction applyChange(opSet, change) {\n  var actor = change.get('actor'),\n      seq = change.get('seq');\n  var prior = opSet.getIn(['states', actor], List());\n  if (seq <= prior.size) {\n    if (!prior.get(seq - 1).get('change').equals(change)) {\n      throw new Error('Inconsistent reuse of sequence number ' + seq + ' by ' + actor);\n    }\n    return [opSet, []]; // change already applied, return unchanged\n  }\n\n  var allDeps = transitiveDeps(opSet, change.get('deps').set(actor, seq - 1));\n  opSet = opSet.setIn(['states', actor], prior.push(Map({ change: change, allDeps: allDeps })));\n\n  var diffs = void 0,\n      ops = change.get('ops').map(function (op) {\n    return op.merge({ actor: actor, seq: seq });\n  });\n  var _applyOps = applyOps(opSet, ops);\n\n  var _applyOps2 = _slicedToArray(_applyOps, 2);\n\n  opSet = _applyOps2[0];\n  diffs = _applyOps2[1];\n\n\n  var remainingDeps = opSet.get('deps').filter(function (depSeq, depActor) {\n    return depSeq > allDeps.get(depActor, 0);\n  }).set(actor, seq);\n\n  opSet = opSet.set('deps', remainingDeps).setIn(['clock', actor], seq).update('history', function (history) {\n    return history.push(change);\n  });\n  return [opSet, diffs];\n}\n\nfunction applyQueuedOps(opSet) {\n  var queue = List(),\n      diff = void 0,\n      diffs = [];\n  while (true) {\n    var _iteratorNormalCompletion4 = true;\n    var _didIteratorError4 = false;\n    var _iteratorError4 = undefined;\n\n    try {\n      for (var _iterator4 = opSet.get('queue')[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n        var change = _step4.value;\n\n        if (causallyReady(opSet, change)) {\n          ;\n          var _applyChange = applyChange(opSet, change);\n\n          var _applyChange2 = _slicedToArray(_applyChange, 2);\n\n          opSet = _applyChange2[0];\n          diff = _applyChange2[1];\n\n          diffs.push.apply(diffs, _toConsumableArray(diff));\n        } else {\n          queue = queue.push(change);\n        }\n      }\n    } catch (err) {\n      _didIteratorError4 = true;\n      _iteratorError4 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion4 && _iterator4.return) {\n          _iterator4.return();\n        }\n      } finally {\n        if (_didIteratorError4) {\n          throw _iteratorError4;\n        }\n      }\n    }\n\n    if (queue.count() === opSet.get('queue').count()) return [opSet, diffs];\n    opSet = opSet.set('queue', queue);\n    queue = List();\n  }\n}\n\nfunction pushUndoHistory(opSet) {\n  var undoPos = opSet.get('undoPos');\n  return opSet.update('undoStack', function (stack) {\n    return stack.slice(0, undoPos).push(opSet.get('undoLocal'));\n  }).set('undoPos', undoPos + 1).set('redoStack', List()).remove('undoLocal');\n}\n\nfunction init() {\n  return Map().set('states', Map()).set('history', List()).set('byObject', Map().set(ROOT_ID, Map())).set('clock', Map()).set('deps', Map()).set('local', List()).set('undoPos', 0).set('undoStack', List()).set('redoStack', List()).set('queue', List());\n}\n\nfunction addChange(opSet, change, isUndoable) {\n  opSet = opSet.update('queue', function (queue) {\n    return queue.push(change);\n  });\n\n  if (isUndoable) {\n    // setting the undoLocal key enables undo history capture\n    opSet = opSet.set('undoLocal', List());\n    var diffs = void 0;\n    var _applyQueuedOps = applyQueuedOps(opSet);\n\n    var _applyQueuedOps2 = _slicedToArray(_applyQueuedOps, 2);\n\n    opSet = _applyQueuedOps2[0];\n    diffs = _applyQueuedOps2[1];\n\n    opSet = pushUndoHistory(opSet);\n    return [opSet, diffs];\n  } else {\n    return applyQueuedOps(opSet);\n  }\n}\n\nfunction getMissingChanges(opSet, haveDeps) {\n  var allDeps = transitiveDeps(opSet, haveDeps);\n  return opSet.get('states').map(function (states, actor) {\n    return states.skip(allDeps.get(actor, 0));\n  }).valueSeq().flatten(1).map(function (state) {\n    return state.get('change');\n  });\n}\n\nfunction getChangesForActor(opSet, forActor, afterSeq) {\n  afterSeq = afterSeq || 0;\n\n  return opSet.get('states').filter(function (states, actor) {\n    return actor === forActor;\n  }).map(function (states, actor) {\n    return states.skip(afterSeq);\n  }).valueSeq().flatten(1).map(function (state) {\n    return state.get('change');\n  });\n}\n\nfunction getMissingDeps(opSet) {\n  var missing = {};\n  var _iteratorNormalCompletion5 = true;\n  var _didIteratorError5 = false;\n  var _iteratorError5 = undefined;\n\n  try {\n    for (var _iterator5 = opSet.get('queue')[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n      var change = _step5.value;\n\n      var deps = change.get('deps').set(change.get('actor'), change.get('seq') - 1);\n      deps.forEach(function (depSeq, depActor) {\n        if (opSet.getIn(['clock', depActor], 0) < depSeq) {\n          missing[depActor] = Math.max(depSeq, missing[depActor] || 0);\n        }\n      });\n    }\n  } catch (err) {\n    _didIteratorError5 = true;\n    _iteratorError5 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion5 && _iterator5.return) {\n        _iterator5.return();\n      }\n    } finally {\n      if (_didIteratorError5) {\n        throw _iteratorError5;\n      }\n    }\n  }\n\n  return missing;\n}\n\nfunction getFieldOps(opSet, objectId, key) {\n  return opSet.getIn(['byObject', objectId, key], List());\n}\n\nfunction getParent(opSet, objectId, key) {\n  if (key === '_head') return;\n  var insertion = opSet.getIn(['byObject', objectId, '_insertion', key]);\n  if (!insertion) throw new TypeError('Missing index entry for list element ' + key);\n  return insertion.get('key');\n}\n\nfunction lamportCompare(op1, op2) {\n  if (op1.get('elem') < op2.get('elem')) return -1;\n  if (op1.get('elem') > op2.get('elem')) return 1;\n  if (op1.get('actor') < op2.get('actor')) return -1;\n  if (op1.get('actor') > op2.get('actor')) return 1;\n  return 0;\n}\n\nfunction insertionsAfter(opSet, objectId, parentId, childId) {\n  var match = /^(.*):(\\d+)$/.exec(childId || '');\n  var childKey = match ? Map({ actor: match[1], elem: parseInt(match[2]) }) : null;\n\n  return opSet.getIn(['byObject', objectId, '_following', parentId], List()).filter(function (op) {\n    return op.get('action') === 'ins';\n  }).filter(function (op) {\n    return !childKey || lamportCompare(op, childKey) < 0;\n  }).sort(lamportCompare).reverse() // descending order\n  .map(function (op) {\n    return op.get('actor') + ':' + op.get('elem');\n  });\n}\n\nfunction getNext(opSet, objectId, key) {\n  var children = insertionsAfter(opSet, objectId, key);\n  if (!children.isEmpty()) return children.first();\n\n  var ancestor = void 0;\n  while (true) {\n    ancestor = getParent(opSet, objectId, key);\n    if (!ancestor) return;\n    var siblings = insertionsAfter(opSet, objectId, ancestor, key);\n    if (!siblings.isEmpty()) return siblings.first();\n    key = ancestor;\n  }\n}\n\n// Given the ID of a list element, returns the ID of the immediate predecessor list element,\n// or null if the given list element is at the head.\nfunction getPrevious(opSet, objectId, key) {\n  var parentId = getParent(opSet, objectId, key);\n  var children = insertionsAfter(opSet, objectId, parentId);\n  if (children.first() === key) {\n    if (parentId === '_head') return null;else return parentId;\n  }\n\n  var prevId = void 0;\n  var _iteratorNormalCompletion6 = true;\n  var _didIteratorError6 = false;\n  var _iteratorError6 = undefined;\n\n  try {\n    for (var _iterator6 = children[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n      var child = _step6.value;\n\n      if (child === key) break;\n      prevId = child;\n    }\n  } catch (err) {\n    _didIteratorError6 = true;\n    _iteratorError6 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion6 && _iterator6.return) {\n        _iterator6.return();\n      }\n    } finally {\n      if (_didIteratorError6) {\n        throw _iteratorError6;\n      }\n    }\n  }\n\n  while (true) {\n    children = insertionsAfter(opSet, objectId, prevId);\n    if (children.isEmpty()) return prevId;\n    prevId = children.last();\n  }\n}\n\nfunction getOpValue(opSet, op, context) {\n  if ((typeof op === 'undefined' ? 'undefined' : _typeof(op)) !== 'object' || op === null) return op;\n  switch (op.get('action')) {\n    case 'set':\n      return op.get('value');\n    case 'link':\n      return context.instantiateObject(opSet, op.get('value'));\n  }\n}\n\nfunction validFieldName(key) {\n  return typeof key === 'string' && key !== '' && !key.startsWith('_');\n}\n\nfunction isFieldPresent(opSet, objectId, key) {\n  return validFieldName(key) && !getFieldOps(opSet, objectId, key).isEmpty();\n}\n\nfunction getObjectFields(opSet, objectId) {\n  return opSet.getIn(['byObject', objectId]).keySeq().filter(function (key) {\n    return isFieldPresent(opSet, objectId, key);\n  }).toSet();\n}\n\nfunction getObjectField(opSet, objectId, key, context) {\n  if (!validFieldName(key)) return undefined;\n  var ops = getFieldOps(opSet, objectId, key);\n  if (!ops.isEmpty()) return getOpValue(opSet, ops.first(), context);\n}\n\nfunction getObjectConflicts(opSet, objectId, context) {\n  return opSet.getIn(['byObject', objectId]).filter(function (field, key) {\n    return validFieldName(key) && getFieldOps(opSet, objectId, key).size > 1;\n  }).mapEntries(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n        key = _ref4[0],\n        field = _ref4[1];\n\n    return [key, field.shift().toMap().mapEntries(function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 2),\n          idx = _ref6[0],\n          op = _ref6[1];\n\n      return [op.get('actor'), getOpValue(opSet, op, context)];\n    })];\n  });\n}\n\nfunction listElemByIndex(opSet, objectId, index, context) {\n  var elemId = opSet.getIn(['byObject', objectId, '_elemIds']).keyOf(index);\n  if (elemId) {\n    var ops = getFieldOps(opSet, objectId, elemId);\n    if (!ops.isEmpty()) return getOpValue(opSet, ops.first(), context);\n  }\n}\n\nfunction listLength(opSet, objectId) {\n  return opSet.getIn(['byObject', objectId, '_elemIds']).length;\n}\n\nfunction listIterator(opSet, listId, mode, context) {\n  var elem = '_head',\n      index = -1;\n  var next = function next() {\n    while (elem) {\n      elem = getNext(opSet, listId, elem);\n      if (!elem) return { done: true };\n\n      var ops = getFieldOps(opSet, listId, elem);\n      if (!ops.isEmpty()) {\n        var value = getOpValue(opSet, ops.first(), context);\n        index += 1;\n        switch (mode) {\n          case 'keys':\n            return { done: false, value: index };\n          case 'values':\n            return { done: false, value: value };\n          case 'entries':\n            return { done: false, value: [index, value] };\n          case 'elems':\n            return { done: false, value: [index, elem] };\n          case 'conflicts':\n            var conflict = null;\n            if (ops.size > 1) {\n              conflict = ops.shift().toMap().mapEntries(function (_ref7) {\n                var _ref8 = _slicedToArray(_ref7, 2),\n                    _ = _ref8[0],\n                    op = _ref8[1];\n\n                return [op.get('actor'), getOpValue(opSet, op, context)];\n              });\n            }\n            return { done: false, value: conflict };\n        }\n      }\n    }\n  };\n\n  var iterator = { next: next };\n  iterator[Symbol.iterator] = function () {\n    return iterator;\n  };\n  return iterator;\n}\n\nmodule.exports = {\n  init: init, addChange: addChange, getMissingChanges: getMissingChanges, getChangesForActor: getChangesForActor, getMissingDeps: getMissingDeps,\n  getObjectFields: getObjectFields, getObjectField: getObjectField, getObjectConflicts: getObjectConflicts, getFieldOps: getFieldOps,\n  listElemByIndex: listElemByIndex, listLength: listLength, listIterator: listIterator, ROOT_ID: ROOT_ID\n};\n\n/***/ }),\n\n/***/ \"./backend/skip_list.js\":\n/*!******************************!*\\\n  !*** ./backend/skip_list.js ***!\n  \\******************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _require = __webpack_require__(/*! immutable */ \"./node_modules/immutable/dist/immutable.js\"),\n    Map = _require.Map;\n\n// Returns a random number from the geometric distribution with p = 0.75.\n// That is, returns k with probability p * (1 - p)^(k - 1).\n// For example, returns 1 with probability 3/4, returns 2 with probability 3/16,\n// returns 3 with probability 3/64, and so on.\n\n\nfunction randomLevel() {\n  // NOTE: this function used to be a generator; it has been converted to a regular\n  // function (that mimics the interface of a generator) to avoid having to include\n  // generator polyfills in the distribution build.\n  return {\n    next: function next() {\n      // Create random number between 0 and 2^32 - 1\n      var rand = Math.floor(Math.random() * 0x100000000);\n      // Count leading zeros in that 32-bit number\n      var level = 1;\n      while (rand < 1 << 32 - 2 * level && level < 16) {\n        level += 1;\n      }return { value: level, done: false };\n    }\n  };\n}\n\nvar Node = function () {\n  function Node(key, value, level, prevKey, nextKey, prevCount, nextCount) {\n    _classCallCheck(this, Node);\n\n    this.key = key;\n    this.value = value;\n    this.level = level;\n    this.prevKey = Object.freeze(prevKey);\n    this.nextKey = Object.freeze(nextKey);\n    this.prevCount = Object.freeze(prevCount);\n    this.nextCount = Object.freeze(nextCount);\n    Object.freeze(this);\n  }\n\n  _createClass(Node, [{\n    key: 'setValue',\n    value: function setValue(key, value) {\n      return new Node(this.key, value, this.level, this.prevKey, this.nextKey, this.prevCount, this.nextCount);\n    }\n  }, {\n    key: 'insertAfter',\n    value: function insertAfter(newKey, newLevel, fromLevel, distance) {\n      if (newLevel > this.level && this.key !== null) {\n        throw new RangeError('Cannot increase the level of a non-head node');\n      }\n      var maxLevel = Math.max(this.level, newLevel);\n      var nextKey = this.nextKey.slice();\n      var nextCount = this.nextCount.slice();\n\n      for (var level = fromLevel; level < maxLevel; level++) {\n        if (level < newLevel) {\n          nextKey[level] = newKey;\n          nextCount[level] = distance;\n        } else {\n          nextCount[level] += 1;\n        }\n      }\n\n      return new Node(this.key, this.value, maxLevel, this.prevKey, nextKey, this.prevCount, nextCount);\n    }\n  }, {\n    key: 'insertBefore',\n    value: function insertBefore(newKey, newLevel, fromLevel, distance) {\n      if (newLevel > this.level) throw new RangeError('Cannot increase node level');\n      var prevKey = this.prevKey.slice();\n      var prevCount = this.prevCount.slice();\n\n      for (var level = fromLevel; level < this.level; level++) {\n        if (level < newLevel) {\n          prevKey[level] = newKey;\n          prevCount[level] = distance;\n        } else {\n          prevCount[level] += 1;\n        }\n      }\n\n      return new Node(this.key, this.value, this.level, prevKey, this.nextKey, prevCount, this.nextCount);\n    }\n  }, {\n    key: 'removeAfter',\n    value: function removeAfter(fromLevel, removedLevel, newKeys, distances) {\n      var nextKey = this.nextKey.slice();\n      var nextCount = this.nextCount.slice();\n\n      for (var level = fromLevel; level < this.level; level++) {\n        if (level < removedLevel) {\n          nextKey[level] = newKeys[level];\n          nextCount[level] = distances[level];\n        } else {\n          nextCount[level] -= 1;\n        }\n      }\n\n      return new Node(this.key, this.value, this.level, this.prevKey, nextKey, this.prevCount, nextCount);\n    }\n  }, {\n    key: 'removeBefore',\n    value: function removeBefore(fromLevel, removedLevel, newKeys, distances) {\n      var prevKey = this.prevKey.slice();\n      var prevCount = this.prevCount.slice();\n\n      for (var level = fromLevel; level < this.level; level++) {\n        if (level < removedLevel) {\n          prevKey[level] = newKeys[level];\n          prevCount[level] = distances[level];\n        } else {\n          prevCount[level] -= 1;\n        }\n      }\n\n      return new Node(this.key, this.value, this.level, prevKey, this.nextKey, prevCount, this.nextCount);\n    }\n  }]);\n\n  return Node;\n}();\n\nvar SkipList = function () {\n  function SkipList(randomSource) {\n    _classCallCheck(this, SkipList);\n\n    var head = new Node(null, null, 1, [], [null], [], [null]);\n    var random = randomSource ? randomSource() : randomLevel();\n    return makeInstance(0, Map().set(null, head), random);\n  }\n\n  _createClass(SkipList, [{\n    key: 'predecessors',\n    value: function predecessors(predecessor, maxLevel) {\n      var preKeys = [predecessor],\n          preCounts = [1];\n\n      for (var level = 1; level < maxLevel; level++) {\n        var preKey = preKeys[level - 1];\n        var count = preCounts[level - 1];\n        while (preKey) {\n          var node = this._nodes.get(preKey);\n          if (node.level > level) break;\n          if (node.level < level) {\n            throw new RangeError('Node ' + preKey + ' below expected level ' + (level - 1));\n          }\n          count += node.prevCount[level - 1];\n          preKey = node.prevKey[level - 1];\n        }\n        preKeys[level] = preKey;\n        preCounts[level] = count;\n      }\n\n      return { preKeys: preKeys, preCounts: preCounts };\n    }\n  }, {\n    key: 'successors',\n    value: function successors(successor, maxLevel) {\n      var sucKeys = [successor],\n          sucCounts = [1];\n\n      for (var level = 1; level < maxLevel; level++) {\n        var sucKey = sucKeys[level - 1];\n        var count = sucCounts[level - 1];\n        while (sucKey) {\n          var node = this._nodes.get(sucKey);\n          if (node.level > level) break;\n          if (node.level < level) {\n            throw new RangeError('Node ' + sucKey + ' below expected level ' + (level - 1));\n          }\n          count += node.nextCount[level - 1];\n          sucKey = node.nextKey[level - 1];\n        }\n        sucKeys[level] = sucKey;\n        sucCounts[level] = count;\n      }\n\n      return { sucKeys: sucKeys, sucCounts: sucCounts };\n    }\n\n    // Inserts a new list element immediately after the element with key `predecessor`.\n    // If predecessor === null, inserts at the head of the list.\n\n  }, {\n    key: 'insertAfter',\n    value: function insertAfter(predecessor, key, value) {\n      if (typeof key !== 'string' || key === '') {\n        throw new RangeError('Key must be a nonempty string');\n      }\n      if (!this._nodes.has(predecessor)) {\n        throw new RangeError('The referenced predecessor key does not exist');\n      }\n      if (this._nodes.has(key)) {\n        throw new RangeError('Cannot insert a key that already exists');\n      }\n\n      var newLevel = this._randomSource.next().value;\n      var maxLevel = Math.max(newLevel, this.headNode.level);\n      var successor = this._nodes.get(predecessor).nextKey[0] || null;\n\n      var _predecessors = this.predecessors(predecessor, maxLevel),\n          preKeys = _predecessors.preKeys,\n          preCounts = _predecessors.preCounts;\n\n      var _successors = this.successors(successor, maxLevel),\n          sucKeys = _successors.sucKeys,\n          sucCounts = _successors.sucCounts;\n\n      return makeInstance(this.length + 1, this._nodes.withMutations(function (nodes) {\n        var preLevel = 0,\n            sucLevel = 0;\n\n        var _loop = function _loop(level) {\n          var updateLevel = Math.min(level, newLevel);\n          if (level === maxLevel || preKeys[level] !== preKeys[preLevel]) {\n            nodes.update(preKeys[preLevel], function (node) {\n              return node.insertAfter(key, updateLevel, preLevel, preCounts[preLevel]);\n            });\n            preLevel = level;\n          }\n          if (sucKeys[sucLevel] && (level === maxLevel || sucKeys[level] !== sucKeys[sucLevel])) {\n            nodes.update(sucKeys[sucLevel], function (node) {\n              return node.insertBefore(key, updateLevel, sucLevel, sucCounts[sucLevel]);\n            });\n            sucLevel = level;\n          }\n        };\n\n        for (var level = 1; level <= maxLevel; level++) {\n          _loop(level);\n        }\n\n        nodes.set(key, new Node(key, value, newLevel, preKeys.slice(0, newLevel), sucKeys.slice(0, newLevel), preCounts.slice(0, newLevel), sucCounts.slice(0, newLevel)));\n      }), this._randomSource);\n    }\n  }, {\n    key: 'insertIndex',\n    value: function insertIndex(index, key, value) {\n      if (typeof index !== 'number' || index < 0) {\n        throw new RangeError('Index must be a non-negative integer');\n      }\n      if (index === 0) {\n        return this.insertAfter(null, key, value);\n      } else {\n        return this.insertAfter(this.keyOf(index - 1), key, value);\n      }\n    }\n  }, {\n    key: 'removeKey',\n    value: function removeKey(key) {\n      if (typeof key !== 'string' || !this._nodes.has(key)) {\n        throw new RangeError('The given key cannot be removed because it does not exist');\n      }\n      var removedNode = this._nodes.get(key);\n      var maxLevel = this.headNode.level;\n\n      var _predecessors2 = this.predecessors(removedNode.prevKey[0], maxLevel),\n          preKeys = _predecessors2.preKeys,\n          preCounts = _predecessors2.preCounts;\n\n      var _successors2 = this.successors(removedNode.nextKey[0], maxLevel),\n          sucKeys = _successors2.sucKeys,\n          sucCounts = _successors2.sucCounts;\n\n      var distances = new Array(maxLevel);\n\n      for (var level = 0; level < maxLevel; level++) {\n        distances[level] = preCounts[level] + sucCounts[level] - 1;\n      }\n\n      return makeInstance(this.length - 1, this._nodes.withMutations(function (nodes) {\n        nodes.remove(key);\n        var preLevel = 0,\n            sucLevel = 0;\n\n        var _loop2 = function _loop2(_level) {\n          var updateLevel = Math.min(_level, removedNode.level);\n          if (_level === maxLevel || preKeys[_level] !== preKeys[preLevel]) {\n            nodes.update(preKeys[preLevel], function (node) {\n              return node.removeAfter(preLevel, updateLevel, sucKeys, distances);\n            });\n            preLevel = _level;\n          }\n          if (sucKeys[sucLevel] && (_level === maxLevel || sucKeys[_level] !== sucKeys[sucLevel])) {\n            nodes.update(sucKeys[sucLevel], function (node) {\n              return node.removeBefore(sucLevel, updateLevel, preKeys, distances);\n            });\n            sucLevel = _level;\n          }\n        };\n\n        for (var _level = 1; _level <= maxLevel; _level++) {\n          _loop2(_level);\n        }\n      }), this._randomSource);\n    }\n  }, {\n    key: 'removeIndex',\n    value: function removeIndex(index) {\n      return this.removeKey(this.keyOf(index));\n    }\n  }, {\n    key: 'indexOf',\n    value: function indexOf(key) {\n      if (typeof key !== 'string' || key === '' || !this._nodes.has(key)) return -1;\n      var node = this._nodes.get(key),\n          count = 0;\n      while (node && node.key) {\n        count += node.prevCount[node.level - 1];\n        node = this._nodes.get(node.prevKey[node.level - 1]);\n      }\n      return count - 1;\n    }\n  }, {\n    key: 'keyOf',\n    value: function keyOf(index) {\n      if (typeof index !== 'number') return null;\n      if (index < 0) index = index + this.length;\n      if (index < 0 || index >= this.length) return null;\n\n      var node = this._nodes.get(null),\n          level = node.level - 1,\n          count = 0;\n      while (true) {\n        if (count === index + 1) {\n          return node.key;\n        } else if (count + node.nextCount[level] > index + 1) {\n          level -= 1;\n        } else {\n          count += node.nextCount[level];\n          node = this._nodes.get(node.nextKey[level]);\n        }\n      }\n    }\n  }, {\n    key: 'getValue',\n    value: function getValue(key) {\n      if (typeof key !== 'string' || key === '') {\n        throw new RangeError('Key must be a nonempty string');\n      }\n      var node = this._nodes.get(key);\n      return node && node.value;\n    }\n  }, {\n    key: 'setValue',\n    value: function setValue(key, value) {\n      if (typeof key !== 'string' || key === '') {\n        throw new RangeError('Key must be a nonempty string');\n      }\n      var node = this._nodes.get(key);\n      if (!node) throw new RangeError('The referenced key does not exist');\n\n      node = node.setValue(key, value);\n      return makeInstance(this.length, this._nodes.set(key, node), this._randomSource);\n    }\n  }, {\n    key: 'iterator',\n    value: function iterator(mode) {\n      var _this = this;\n\n      // NOTE: this method used to be a generator; it has been converted to a regular\n      // method (that mimics the interface of a generator) to avoid having to include\n      // generator polyfills in the distribution build.\n      var nodes = this._nodes;\n      var key = nodes.get(null).nextKey[0];\n      return _defineProperty({\n        next: function next() {\n          if (!key) return { value: undefined, done: true };\n          var node = nodes.get(key);\n          var rval = undefined;\n          switch (mode) {\n            case 'keys':\n              rval = { value: key, done: false };break;\n            case 'values':\n              rval = { value: node.value, done: false };break;\n            case 'entries':\n              rval = { value: [key, node.value], done: false };break;\n          }\n          key = node.nextKey[0];\n          return rval;\n        }\n      }, Symbol.iterator, function () {\n        return _this.iterator(mode);\n      });\n    }\n  }, {\n    key: Symbol.iterator,\n    value: function value() {\n      return this.iterator('values');\n    }\n  }, {\n    key: 'headNode',\n    get: function get() {\n      return this._nodes.get(null);\n    }\n  }]);\n\n  return SkipList;\n}();\n\nfunction makeInstance(length, nodes, randomSource) {\n  var instance = Object.create(SkipList.prototype);\n  instance.length = length;\n  instance._nodes = nodes;\n  instance._randomSource = randomSource;\n  return Object.freeze(instance);\n}\n\nmodule.exports = { SkipList: SkipList };\n\n/***/ }),\n\n/***/ \"./frontend/apply_patch.js\":\n/*!*********************************!*\\\n  !*** ./frontend/apply_patch.js ***!\n  \\*********************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar _require = __webpack_require__(/*! ../src/common */ \"./src/common.js\"),\n    ROOT_ID = _require.ROOT_ID,\n    isObject = _require.isObject;\n\nvar _require2 = __webpack_require__(/*! ./constants */ \"./frontend/constants.js\"),\n    OBJECT_ID = _require2.OBJECT_ID,\n    CONFLICTS = _require2.CONFLICTS,\n    ELEM_IDS = _require2.ELEM_IDS,\n    MAX_ELEM = _require2.MAX_ELEM;\n\nvar _require3 = __webpack_require__(/*! ./text */ \"./frontend/text.js\"),\n    Text = _require3.Text;\n\n/**\n * Takes a string in the form that is used to identify list elements (an actor\n * ID concatenated with a counter, separated by a colon) and returns a\n * two-element array, `[counter, actorId]`.\n */\n\n\nfunction parseElemId(elemId) {\n  var match = /^(.*):(\\d+)$/.exec(elemId || '');\n  if (!match) {\n    throw new RangeError('Not a valid elemId: ' + elemId);\n  }\n  return [parseInt(match[2]), match[1]];\n}\n\n/**\n * Finds the object IDs of all child objects referenced under the key `key` of\n * `object` (both `object[key]` and any conflicts under that key). Returns a map\n * from those objectIds to the value `true`.\n */\nfunction childReferences(object, key) {\n  var refs = {},\n      conflicts = object[CONFLICTS][key] || {};\n  var children = [object[key]].concat(Object.values(conflicts));\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var child = _step.value;\n\n      if (isObject(child)) {\n        refs[child[OBJECT_ID]] = true;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return refs;\n}\n\n/**\n * Updates `inbound` (a mapping from each child object ID to its parent) based\n * on a change to the object with ID `objectId`. `refsBefore` and `refsAfter`\n * are objects produced by the `childReferences()` function, containing the IDs\n * of child objects before and after the change, respectively.\n */\nfunction updateInbound(objectId, refsBefore, refsAfter, inbound) {\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = Object.keys(refsBefore)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var ref = _step2.value;\n\n      if (!refsAfter[ref]) delete inbound[ref];\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  var _iteratorNormalCompletion3 = true;\n  var _didIteratorError3 = false;\n  var _iteratorError3 = undefined;\n\n  try {\n    for (var _iterator3 = Object.keys(refsAfter)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n      var _ref = _step3.value;\n\n      if (inbound[_ref] && inbound[_ref] !== objectId) {\n        throw new RangeError('Object ' + _ref + ' has multiple parents');\n      } else if (!inbound[_ref]) {\n        inbound[_ref] = objectId;\n      }\n    }\n  } catch (err) {\n    _didIteratorError3 = true;\n    _iteratorError3 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion3 && _iterator3.return) {\n        _iterator3.return();\n      }\n    } finally {\n      if (_didIteratorError3) {\n        throw _iteratorError3;\n      }\n    }\n  }\n}\n\n/**\n * Creates a writable copy of an immutable map object. If `originalObject`\n * is undefined, creates an empty object with ID `objectId`.\n */\nfunction cloneMapObject(originalObject, objectId) {\n  if (originalObject && originalObject[OBJECT_ID] !== objectId) {\n    throw new RangeError('cloneMapObject ID mismatch: ' + originalObject[OBJECT_ID] + ' !== ' + objectId);\n  }\n  var object = Object.assign({}, originalObject);\n  var conflicts = Object.assign({}, originalObject ? originalObject[CONFLICTS] : undefined);\n  Object.defineProperty(object, CONFLICTS, { value: conflicts });\n  Object.defineProperty(object, OBJECT_ID, { value: objectId });\n  return object;\n}\n\n/**\n * Applies the change `diff` to a map object. `cache` and `updated` are indexed\n * by objectId; the existing read-only object is taken from `cache`, and the\n * updated writable object is written to `updated`. `inbound` is a mapping from\n * child objectId to parent objectId; it is updated according to the change.\n */\nfunction updateMapObject(diff, cache, updated, inbound) {\n  if (!updated[diff.obj]) {\n    updated[diff.obj] = cloneMapObject(cache[diff.obj], diff.obj);\n  }\n  var object = updated[diff.obj],\n      conflicts = object[CONFLICTS];\n  var refsBefore = {},\n      refsAfter = {};\n\n  if (diff.action === 'create') {\n    // do nothing\n  } else if (diff.action === 'set') {\n    refsBefore = childReferences(object, diff.key);\n    object[diff.key] = diff.link ? updated[diff.value] || cache[diff.value] : diff.value;\n    if (diff.conflicts) {\n      conflicts[diff.key] = {};\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = diff.conflicts[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var conflict = _step4.value;\n\n          var value = conflict.link ? updated[conflict.value] || cache[conflict.value] : conflict.value;\n          conflicts[diff.key][conflict.actor] = value;\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n\n      Object.freeze(conflicts[diff.key]);\n    } else {\n      delete conflicts[diff.key];\n    }\n    refsAfter = childReferences(object, diff.key);\n  } else if (diff.action === 'remove') {\n    refsBefore = childReferences(object, diff.key);\n    delete object[diff.key];\n    delete conflicts[diff.key];\n  } else {\n    throw new RangeError('Unknown action type: ' + diff.action);\n  }\n\n  updateInbound(diff.obj, refsBefore, refsAfter, inbound);\n}\n\n/**\n * Updates the map object with ID `objectId` such that all child objects that\n * have been updated in `updated` are replaced with references to the updated\n * version.\n */\nfunction parentMapObject(objectId, cache, updated) {\n  if (!updated[objectId]) {\n    updated[objectId] = cloneMapObject(cache[objectId], objectId);\n  }\n  var object = updated[objectId];\n\n  var _iteratorNormalCompletion5 = true;\n  var _didIteratorError5 = false;\n  var _iteratorError5 = undefined;\n\n  try {\n    for (var _iterator5 = Object.keys(object)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n      var key = _step5.value;\n\n      var value = object[key];\n      if (isObject(value) && updated[value[OBJECT_ID]]) {\n        object[key] = updated[value[OBJECT_ID]];\n      }\n\n      var conflicts = object[CONFLICTS][key] || {},\n          conflictsUpdate = null;\n      var _iteratorNormalCompletion6 = true;\n      var _didIteratorError6 = false;\n      var _iteratorError6 = undefined;\n\n      try {\n        for (var _iterator6 = Object.keys(conflicts)[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n          var actorId = _step6.value;\n\n          value = conflicts[actorId];\n          if (isObject(value) && updated[value[OBJECT_ID]]) {\n            if (!conflictsUpdate) {\n              conflictsUpdate = Object.assign({}, conflicts);\n              object[CONFLICTS][key] = conflictsUpdate;\n            }\n            conflictsUpdate[actorId] = updated[value[OBJECT_ID]];\n          }\n        }\n      } catch (err) {\n        _didIteratorError6 = true;\n        _iteratorError6 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion6 && _iterator6.return) {\n            _iterator6.return();\n          }\n        } finally {\n          if (_didIteratorError6) {\n            throw _iteratorError6;\n          }\n        }\n      }\n\n      if (conflictsUpdate) {\n        Object.freeze(conflictsUpdate);\n      }\n    }\n  } catch (err) {\n    _didIteratorError5 = true;\n    _iteratorError5 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion5 && _iterator5.return) {\n        _iterator5.return();\n      }\n    } finally {\n      if (_didIteratorError5) {\n        throw _iteratorError5;\n      }\n    }\n  }\n}\n\n/**\n * Creates a writable copy of an immutable list object. If `originalList` is\n * undefined, creates an empty list with ID `objectId`.\n */\nfunction cloneListObject(originalList, objectId) {\n  if (originalList && originalList[OBJECT_ID] !== objectId) {\n    throw new RangeError('cloneListObject ID mismatch: ' + originalList[OBJECT_ID] + ' !== ' + objectId);\n  }\n  var list = originalList ? originalList.slice() : []; // slice() makes a shallow clone\n  var conflicts = originalList && originalList[CONFLICTS] ? originalList[CONFLICTS].slice() : [];\n  var elemIds = originalList && originalList[ELEM_IDS] ? originalList[ELEM_IDS].slice() : [];\n  var maxElem = originalList && originalList[MAX_ELEM] ? originalList[MAX_ELEM] : 0;\n  Object.defineProperty(list, OBJECT_ID, { value: objectId });\n  Object.defineProperty(list, CONFLICTS, { value: conflicts });\n  Object.defineProperty(list, ELEM_IDS, { value: elemIds });\n  Object.defineProperty(list, MAX_ELEM, { value: maxElem, writable: true });\n  return list;\n}\n\n/**\n * Applies the change `diff` to a list object. `cache` and `updated` are indexed\n * by objectId; the existing read-only object is taken from `cache`, and the\n * updated writable object is written to `updated`. `inbound` is a mapping from\n * child objectId to parent objectId; it is updated according to the change.\n */\nfunction updateListObject(diff, cache, updated, inbound) {\n  if (!updated[diff.obj]) {\n    updated[diff.obj] = cloneListObject(cache[diff.obj], diff.obj);\n  }\n  var list = updated[diff.obj],\n      conflicts = list[CONFLICTS],\n      elemIds = list[ELEM_IDS];\n  var value = null,\n      conflict = null;\n\n  if (['insert', 'set'].includes(diff.action)) {\n    value = diff.link ? updated[diff.value] || cache[diff.value] : diff.value;\n    if (diff.conflicts) {\n      conflict = {};\n      var _iteratorNormalCompletion7 = true;\n      var _didIteratorError7 = false;\n      var _iteratorError7 = undefined;\n\n      try {\n        for (var _iterator7 = diff.conflicts[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n          var c = _step7.value;\n\n          conflict[c.actor] = c.link ? updated[c.value] || cache[c.value] : c.value;\n        }\n      } catch (err) {\n        _didIteratorError7 = true;\n        _iteratorError7 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion7 && _iterator7.return) {\n            _iterator7.return();\n          }\n        } finally {\n          if (_didIteratorError7) {\n            throw _iteratorError7;\n          }\n        }\n      }\n\n      Object.freeze(conflict);\n    }\n  }\n\n  var refsBefore = {},\n      refsAfter = {};\n  if (diff.action === 'create') {\n    // do nothing\n  } else if (diff.action === 'insert') {\n    list[MAX_ELEM] = Math.max(list[MAX_ELEM], parseElemId(diff.elemId)[0]);\n    list.splice(diff.index, 0, value);\n    conflicts.splice(diff.index, 0, conflict);\n    elemIds.splice(diff.index, 0, diff.elemId);\n    refsAfter = childReferences(list, diff.index);\n  } else if (diff.action === 'set') {\n    refsBefore = childReferences(list, diff.index);\n    list[diff.index] = value;\n    conflicts[diff.index] = conflict;\n    refsAfter = childReferences(list, diff.index);\n  } else if (diff.action === 'remove') {\n    refsBefore = childReferences(list, diff.index);\n    list.splice(diff.index, 1);\n    conflicts.splice(diff.index, 1) || {};\n    elemIds.splice(diff.index, 1);\n  } else {\n    throw new RangeError('Unknown action type: ' + diff.action);\n  }\n\n  updateInbound(diff.obj, refsBefore, refsAfter, inbound);\n}\n\n/**\n * Updates the list object with ID `objectId` such that all child objects that\n * have been updated in `updated` are replaced with references to the updated\n * version.\n */\nfunction parentListObject(objectId, cache, updated) {\n  if (!updated[objectId]) {\n    updated[objectId] = cloneListObject(cache[objectId], objectId);\n  }\n  var list = updated[objectId];\n\n  for (var index = 0; index < list.length; index++) {\n    var value = list[index];\n    if (isObject(value) && updated[value[OBJECT_ID]]) {\n      list[index] = updated[value[OBJECT_ID]];\n    }\n\n    var conflicts = list[CONFLICTS][index] || {},\n        conflictsUpdate = null;\n    var _iteratorNormalCompletion8 = true;\n    var _didIteratorError8 = false;\n    var _iteratorError8 = undefined;\n\n    try {\n      for (var _iterator8 = Object.keys(conflicts)[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n        var actorId = _step8.value;\n\n        value = conflicts[actorId];\n        if (isObject(value) && updated[value[OBJECT_ID]]) {\n          if (!conflictsUpdate) {\n            conflictsUpdate = Object.assign({}, conflicts);\n            list[CONFLICTS][index] = conflictsUpdate;\n          }\n          conflictsUpdate[actorId] = updated[value[OBJECT_ID]];\n        }\n      }\n    } catch (err) {\n      _didIteratorError8 = true;\n      _iteratorError8 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion8 && _iterator8.return) {\n          _iterator8.return();\n        }\n      } finally {\n        if (_didIteratorError8) {\n          throw _iteratorError8;\n        }\n      }\n    }\n\n    if (conflictsUpdate) {\n      Object.freeze(conflictsUpdate);\n    }\n  }\n}\n\n/**\n * Applies the list of changes from `diffs[startIndex]` to `diffs[endIndex]`\n * (inclusive the last element) to a Text object. `cache` and `updated` are\n * indexed by objectId; the existing read-only object is taken from `cache`,\n * and the updated object is written to `updated`.\n */\nfunction updateTextObject(diffs, startIndex, endIndex, cache, updated) {\n  var objectId = diffs[startIndex].obj;\n  if (!updated[objectId]) {\n    if (cache[objectId]) {\n      var _elems = cache[objectId].elems.slice();\n      var _maxElem = cache[objectId][MAX_ELEM];\n      updated[objectId] = new Text(objectId, _elems, _maxElem);\n    } else {\n      updated[objectId] = new Text(objectId);\n    }\n  }\n\n  var elems = updated[objectId].elems,\n      maxElem = updated[objectId][MAX_ELEM];\n  var splicePos = -1,\n      deletions = void 0,\n      insertions = void 0;\n\n  while (startIndex <= endIndex) {\n    var diff = diffs[startIndex];\n    if (diff.action === 'create') {\n      // do nothing\n\n    } else if (diff.action === 'insert') {\n      if (splicePos < 0) {\n        splicePos = diff.index;\n        deletions = 0;\n        insertions = [];\n      }\n      maxElem = Math.max(maxElem, parseElemId(diff.elemId)[0]);\n      insertions.push({ elemId: diff.elemId, value: diff.value, conflicts: diff.conflicts });\n\n      if (startIndex === endIndex || diffs[startIndex + 1].action !== 'insert' || diffs[startIndex + 1].index !== diff.index + 1) {\n        elems.splice.apply(elems, [splicePos, deletions].concat(_toConsumableArray(insertions)));\n        splicePos = -1;\n      }\n    } else if (diff.action === 'set') {\n      elems[diff.index] = {\n        elemId: elems[diff.index].elemId,\n        value: diff.value,\n        conflicts: diff.conflicts\n      };\n    } else if (diff.action === 'remove') {\n      if (splicePos < 0) {\n        splicePos = diff.index;\n        deletions = 0;\n        insertions = [];\n      }\n      deletions += 1;\n\n      if (startIndex === endIndex || !['insert', 'remove'].includes(diffs[startIndex + 1].action) || diffs[startIndex + 1].index !== diff.index) {\n        elems.splice(splicePos, deletions);\n        splicePos = -1;\n      }\n    } else {\n      throw new RangeError('Unknown action type: ' + diff.action);\n    }\n\n    startIndex += 1;\n  }\n  updated[objectId] = new Text(objectId, elems, maxElem);\n}\n\n/**\n * After some set of objects in `updated` (a map from object ID to mutable\n * object) have been updated, updates their parent objects to point to the new\n * object versions, all the way to the root object. `cache` contains the\n * previous (immutable) version of all objects, and `inbound` is the mapping\n * from child objectId to parent objectId. Any objects that were not modified\n * continue to refer to the existing version in `cache`.\n */\nfunction updateParentObjects(cache, updated, inbound) {\n  var affected = updated;\n  while (Object.keys(affected).length > 0) {\n    var parents = {};\n    var _iteratorNormalCompletion9 = true;\n    var _didIteratorError9 = false;\n    var _iteratorError9 = undefined;\n\n    try {\n      for (var _iterator9 = Object.keys(affected)[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n        var childId = _step9.value;\n\n        var parentId = inbound[childId];\n        if (parentId) parents[parentId] = true;\n      }\n    } catch (err) {\n      _didIteratorError9 = true;\n      _iteratorError9 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion9 && _iterator9.return) {\n          _iterator9.return();\n        }\n      } finally {\n        if (_didIteratorError9) {\n          throw _iteratorError9;\n        }\n      }\n    }\n\n    affected = parents;\n\n    var _iteratorNormalCompletion10 = true;\n    var _didIteratorError10 = false;\n    var _iteratorError10 = undefined;\n\n    try {\n      for (var _iterator10 = Object.keys(parents)[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n        var objectId = _step10.value;\n\n        if (Array.isArray(updated[objectId] || cache[objectId])) {\n          parentListObject(objectId, cache, updated);\n        } else {\n          parentMapObject(objectId, cache, updated);\n        }\n      }\n    } catch (err) {\n      _didIteratorError10 = true;\n      _iteratorError10 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion10 && _iterator10.return) {\n          _iterator10.return();\n        }\n      } finally {\n        if (_didIteratorError10) {\n          throw _iteratorError10;\n        }\n      }\n    }\n  }\n}\n\n/**\n * Applies the list of changes `diffs` to the appropriate object in `updated`.\n * `cache` and `updated` are indexed by objectId; the existing read-only object\n * is taken from `cache`, and the updated writable object is written to\n * `updated`. `inbound` is a mapping from child objectId to parent objectId;\n * it is updated according to the change.\n */\nfunction applyDiffs(diffs, cache, updated, inbound) {\n  var startIndex = 0;\n  for (var endIndex = 0; endIndex < diffs.length; endIndex++) {\n    var diff = diffs[endIndex];\n\n    if (diff.type === 'map') {\n      updateMapObject(diff, cache, updated, inbound);\n      startIndex = endIndex + 1;\n    } else if (diff.type === 'list') {\n      updateListObject(diff, cache, updated, inbound);\n      startIndex = endIndex + 1;\n    } else if (diff.type === 'text') {\n      if (endIndex === diffs.length - 1 || diffs[endIndex + 1].obj !== diff.obj) {\n        updateTextObject(diffs, startIndex, endIndex, cache, updated);\n        startIndex = endIndex + 1;\n      }\n    } else {\n      throw new TypeError('Unknown object type: ' + diff.type);\n    }\n  }\n}\n\n/**\n * Creates a writable copy of the immutable document root object `root`.\n */\nfunction cloneRootObject(root) {\n  if (root[OBJECT_ID] !== ROOT_ID) {\n    throw new RangeError('Not the root object: ' + root[OBJECT_ID]);\n  }\n  return cloneMapObject(root, ROOT_ID);\n}\n\nmodule.exports = {\n  applyDiffs: applyDiffs, updateParentObjects: updateParentObjects, cloneRootObject: cloneRootObject\n};\n\n/***/ }),\n\n/***/ \"./frontend/constants.js\":\n/*!*******************************!*\\\n  !*** ./frontend/constants.js ***!\n  \\*******************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n// Properties of the document root object\nvar OPTIONS = Symbol('_options'); // object containing options passed to init()\nvar CACHE = Symbol('_cache'); // map from objectId to immutable object\nvar INBOUND = Symbol('_inbound'); // map from child objectId to parent objectId\nvar STATE = Symbol('_state'); // object containing metadata about current state (e.g. sequence numbers)\n\n// Properties of all Automerge objects\nvar OBJECT_ID = '_objectId'; // the object ID of the current object (string)\nvar CONFLICTS = '_conflicts'; // map or list (depending on object type) of conflicts\nvar CHANGE = Symbol('_change'); // the context object on proxy objects used in change callback\n\n// Properties of Automerge list objects\nvar ELEM_IDS = Symbol('_elemIds'); // list containing the element ID of each list element\nvar MAX_ELEM = Symbol('_maxElem'); // maximum element counter value in this list (number)\n\nmodule.exports = {\n  OPTIONS: OPTIONS, CACHE: CACHE, INBOUND: INBOUND, STATE: STATE, OBJECT_ID: OBJECT_ID, CONFLICTS: CONFLICTS, CHANGE: CHANGE, ELEM_IDS: ELEM_IDS, MAX_ELEM: MAX_ELEM\n};\n\n/***/ }),\n\n/***/ \"./frontend/context.js\":\n/*!*****************************!*\\\n  !*** ./frontend/context.js ***!\n  \\*****************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _require = __webpack_require__(/*! ./constants */ \"./frontend/constants.js\"),\n    CACHE = _require.CACHE,\n    INBOUND = _require.INBOUND,\n    OBJECT_ID = _require.OBJECT_ID,\n    CONFLICTS = _require.CONFLICTS,\n    MAX_ELEM = _require.MAX_ELEM;\n\nvar _require2 = __webpack_require__(/*! ./apply_patch */ \"./frontend/apply_patch.js\"),\n    applyDiffs = _require2.applyDiffs;\n\nvar _require3 = __webpack_require__(/*! ./text */ \"./frontend/text.js\"),\n    Text = _require3.Text,\n    getElemId = _require3.getElemId;\n\nvar _require4 = __webpack_require__(/*! ../src/common */ \"./src/common.js\"),\n    isObject = _require4.isObject;\n\nvar uuid = __webpack_require__(/*! ../src/uuid */ \"./src/uuid.js\");\n\n/**\n * An instance of this class is passed to `rootObjectProxy()`. The methods are\n * called by proxy object mutation functions to query the current object state\n * and to apply the requested changes.\n */\n\nvar Context = function () {\n  function Context(doc, actorId) {\n    _classCallCheck(this, Context);\n\n    this.actorId = actorId;\n    this.cache = doc[CACHE];\n    this.updated = {};\n    this.inbound = Object.assign({}, doc[INBOUND]);\n    this.ops = [];\n    this.diffs = [];\n  }\n\n  /**\n   * Adds an operation object to the list of changes made in the current context.\n   */\n\n\n  _createClass(Context, [{\n    key: 'addOp',\n    value: function addOp(operation) {\n      this.ops.push(operation);\n    }\n\n    /**\n     * Applies a diff object to the current document state.\n     */\n\n  }, {\n    key: 'apply',\n    value: function apply(diff) {\n      this.diffs.push(diff);\n      applyDiffs([diff], this.cache, this.updated, this.inbound);\n    }\n\n    /**\n     * Returns an object (not proxied) from the cache or updated set, as appropriate.\n     */\n\n  }, {\n    key: 'getObject',\n    value: function getObject(objectId) {\n      var object = this.updated[objectId] || this.cache[objectId];\n      if (!object) throw new RangeError('Target object does not exist: ' + objectId);\n      return object;\n    }\n\n    /**\n     * Returns the value associated with the property named `key` on the object\n     * with ID `objectId`. If the value is an object, returns a proxy for it.\n     */\n\n  }, {\n    key: 'getObjectField',\n    value: function getObjectField(objectId, key) {\n      var object = this.getObject(objectId);\n      if (isObject(object[key])) {\n        // The instantiateObject function is added to the context object by rootObjectProxy()\n        return this.instantiateObject(object[key][OBJECT_ID]);\n      } else {\n        return object[key];\n      }\n    }\n\n    /**\n     * Recursively creates Automerge versions of all the objects and nested\n     * objects in `value`, and returns the object ID of the root object. If any\n     * object is an existing Automerge object, its existing ID is returned.\n     */\n\n  }, {\n    key: 'createNestedObjects',\n    value: function createNestedObjects(value) {\n      if (typeof value[OBJECT_ID] === 'string') return value[OBJECT_ID];\n      var objectId = uuid();\n\n      if (value instanceof Text) {\n        // Create a new Text object\n        if (value.length > 0) {\n          throw new RangeError('Assigning a non-empty Text object is not supported');\n        }\n        this.apply({ action: 'create', type: 'text', obj: objectId });\n        this.addOp({ action: 'makeText', obj: objectId });\n      } else if (Array.isArray(value)) {\n        // Create a new list object\n        this.apply({ action: 'create', type: 'list', obj: objectId });\n        this.addOp({ action: 'makeList', obj: objectId });\n        this.splice(objectId, 0, 0, value);\n      } else {\n        // Create a new map object\n        this.apply({ action: 'create', type: 'map', obj: objectId });\n        this.addOp({ action: 'makeMap', obj: objectId });\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = Object.keys(value)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var key = _step.value;\n\n            this.setMapKey(objectId, key, value[key]);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n\n      return objectId;\n    }\n\n    /**\n     * Updates the map object with ID `objectId`, setting the property with name\n     * `key` to `value`.\n     */\n\n  }, {\n    key: 'setMapKey',\n    value: function setMapKey(objectId, key, value) {\n      if (typeof key !== 'string') {\n        throw new RangeError('The key of a map entry must be a string, not ' + (typeof key === 'undefined' ? 'undefined' : _typeof(key)));\n      }\n      if (key === '') {\n        throw new RangeError('The key of a map entry must not be an empty string');\n      }\n      if (key.startsWith('_')) {\n        throw new RangeError('Map entries starting with underscore are not allowed: ' + key);\n      }\n\n      var object = this.getObject(objectId);\n      if (!['object', 'boolean', 'number', 'string'].includes(typeof value === 'undefined' ? 'undefined' : _typeof(value))) {\n        throw new TypeError('Unsupported type of value: ' + (typeof value === 'undefined' ? 'undefined' : _typeof(value)));\n      } else if (isObject(value)) {\n        var childId = this.createNestedObjects(value);\n        this.apply({ action: 'set', type: 'map', obj: objectId, key: key, value: childId, link: true });\n        this.addOp({ action: 'link', obj: objectId, key: key, value: childId });\n      } else if (object[key] !== value || object[CONFLICTS][key]) {\n        // If the assigned field value is the same as the existing value, and\n        // the assignment does not resolve a conflict, do nothing\n        this.apply({ action: 'set', type: 'map', obj: objectId, key: key, value: value });\n        this.addOp({ action: 'set', obj: objectId, key: key, value: value });\n      }\n    }\n\n    /**\n     * Updates the map object with ID `objectId`, deleting the property `key`.\n     */\n\n  }, {\n    key: 'deleteMapKey',\n    value: function deleteMapKey(objectId, key) {\n      var object = this.getObject(objectId);\n      if (object[key] !== undefined) {\n        this.apply({ action: 'remove', type: 'map', obj: objectId, key: key });\n        this.addOp({ action: 'del', obj: objectId, key: key });\n      }\n    }\n\n    /**\n     * Inserts a new list element `value` at position `index` into the list with\n     * ID `objectId`.\n     */\n\n  }, {\n    key: 'insertListItem',\n    value: function insertListItem(objectId, index, value) {\n      var list = this.getObject(objectId);\n      if (index < 0 || index > list.length) {\n        throw new RangeError('List index ' + index + ' is out of bounds for list of length ' + list.length);\n      }\n      if (!['object', 'boolean', 'number', 'string'].includes(typeof value === 'undefined' ? 'undefined' : _typeof(value))) {\n        throw new TypeError('Unsupported type of value: ' + (typeof value === 'undefined' ? 'undefined' : _typeof(value)));\n      }\n\n      var maxElem = list[MAX_ELEM] + 1;\n      var type = list instanceof Text ? 'text' : 'list';\n      var prevId = index === 0 ? '_head' : getElemId(list, index - 1);\n      var elemId = this.actorId + ':' + maxElem;\n      this.addOp({ action: 'ins', obj: objectId, key: prevId, elem: maxElem });\n\n      if (isObject(value)) {\n        var childId = this.createNestedObjects(value);\n        this.apply({ action: 'insert', type: type, obj: objectId, index: index, value: childId, link: true, elemId: elemId });\n        this.addOp({ action: 'link', obj: objectId, key: elemId, value: childId });\n      } else {\n        this.apply({ action: 'insert', type: type, obj: objectId, index: index, value: value, elemId: elemId });\n        this.addOp({ action: 'set', obj: objectId, key: elemId, value: value });\n      }\n      this.getObject(objectId)[MAX_ELEM] = maxElem;\n    }\n\n    /**\n     * Updates the list with ID `objectId`, replacing the current value at\n     * position `index` with the new value `value`.\n     */\n\n  }, {\n    key: 'setListIndex',\n    value: function setListIndex(objectId, index, value) {\n      var list = this.getObject(objectId);\n      if (index === list.length) {\n        this.insertListItem(objectId, index, value);\n        return;\n      }\n      if (index < 0 || index > list.length) {\n        throw new RangeError('List index ' + index + ' is out of bounds for list of length ' + list.length);\n      }\n      if (!['object', 'boolean', 'number', 'string'].includes(typeof value === 'undefined' ? 'undefined' : _typeof(value))) {\n        throw new TypeError('Unsupported type of value: ' + (typeof value === 'undefined' ? 'undefined' : _typeof(value)));\n      }\n\n      var elemId = getElemId(list, index);\n      var type = list instanceof Text ? 'text' : 'list';\n\n      if (isObject(value)) {\n        var childId = this.createNestedObjects(value);\n        this.apply({ action: 'set', type: type, obj: objectId, index: index, value: childId, link: true });\n        this.addOp({ action: 'link', obj: objectId, key: elemId, value: childId });\n      } else if (list[index] !== value || list[CONFLICTS][index]) {\n        // If the assigned list element value is the same as the existing value, and\n        // the assignment does not resolve a conflict, do nothing\n        this.apply({ action: 'set', type: type, obj: objectId, index: index, value: value });\n        this.addOp({ action: 'set', obj: objectId, key: elemId, value: value });\n      }\n    }\n\n    /**\n     * Updates the list object with ID `objectId`, deleting `deletions` list\n     * elements starting from list index `start`, and inserting the list of new\n     * elements `insertions` at that position.\n     */\n\n  }, {\n    key: 'splice',\n    value: function splice(objectId, start, deletions, insertions) {\n      var list = this.getObject(objectId);\n      var type = list instanceof Text ? 'text' : 'list';\n\n      if (deletions > 0) {\n        if (start < 0 || start > list.length - deletions) {\n          throw new RangeError(deletions + ' deletions starting at index ' + start + ' are out of bounds for list of length ' + list.length);\n        }\n\n        for (var i = 0; i < deletions; i++) {\n          this.addOp({ action: 'del', obj: objectId, key: getElemId(list, start) });\n          this.apply({ action: 'remove', type: type, obj: objectId, index: start });\n\n          // Must refresh object after the first updateListObject call, since the\n          // object previously may have been immutable\n          if (i === 0) list = this.getObject(objectId);\n        }\n      }\n\n      for (var _i = 0; _i < insertions.length; _i++) {\n        this.insertListItem(objectId, start + _i, insertions[_i]);\n      }\n    }\n  }]);\n\n  return Context;\n}();\n\nmodule.exports = {\n  Context: Context\n};\n\n/***/ }),\n\n/***/ \"./frontend/index.js\":\n/*!***************************!*\\\n  !*** ./frontend/index.js ***!\n  \\***************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar _require = __webpack_require__(/*! ./constants */ \"./frontend/constants.js\"),\n    OPTIONS = _require.OPTIONS,\n    CACHE = _require.CACHE,\n    INBOUND = _require.INBOUND,\n    STATE = _require.STATE,\n    OBJECT_ID = _require.OBJECT_ID,\n    CONFLICTS = _require.CONFLICTS,\n    CHANGE = _require.CHANGE,\n    ELEM_IDS = _require.ELEM_IDS;\n\nvar _require2 = __webpack_require__(/*! ../src/common */ \"./src/common.js\"),\n    ROOT_ID = _require2.ROOT_ID,\n    isObject = _require2.isObject;\n\nvar uuid = __webpack_require__(/*! ../src/uuid */ \"./src/uuid.js\");\n\nvar _require3 = __webpack_require__(/*! ./apply_patch */ \"./frontend/apply_patch.js\"),\n    applyDiffs = _require3.applyDiffs,\n    updateParentObjects = _require3.updateParentObjects,\n    cloneRootObject = _require3.cloneRootObject;\n\nvar _require4 = __webpack_require__(/*! ./proxies */ \"./frontend/proxies.js\"),\n    rootObjectProxy = _require4.rootObjectProxy;\n\nvar _require5 = __webpack_require__(/*! ./context */ \"./frontend/context.js\"),\n    Context = _require5.Context;\n\nvar _require6 = __webpack_require__(/*! ./text */ \"./frontend/text.js\"),\n    Text = _require6.Text;\n\n/**\n * Takes a set of objects that have been updated (in `updated`) and an updated\n * mapping from child objectId to parent objectId (in `inbound`), and returns\n * a new immutable document root object based on `doc` that reflects those\n * updates. The state object `state` is attached to the new root object.\n */\n\n\nfunction updateRootObject(doc, updated, inbound, state) {\n  var newDoc = updated[ROOT_ID];\n  if (!newDoc) {\n    newDoc = cloneRootObject(doc[CACHE][ROOT_ID]);\n    updated[ROOT_ID] = newDoc;\n  }\n  Object.defineProperty(newDoc, '_actorId', { value: getActorId(doc) });\n  Object.defineProperty(newDoc, OPTIONS, { value: doc[OPTIONS] });\n  Object.defineProperty(newDoc, CACHE, { value: updated });\n  Object.defineProperty(newDoc, INBOUND, { value: inbound });\n  Object.defineProperty(newDoc, STATE, { value: state });\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = Object.keys(doc[CACHE])[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var objectId = _step.value;\n\n      if (updated[objectId]) {\n        Object.freeze(updated[objectId]);\n        Object.freeze(updated[objectId][CONFLICTS]);\n      } else {\n        updated[objectId] = doc[CACHE][objectId];\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  Object.freeze(updated);\n  Object.freeze(inbound);\n  return newDoc;\n}\n\n/**\n * Filters a list of operations `ops` such that, if there are multiple assignment\n * operations for the same object and key, we keep only the most recent. Returns\n * the filtered list of operations.\n */\nfunction ensureSingleAssignment(ops) {\n  var assignments = {},\n      result = [];\n\n  for (var i = ops.length - 1; i >= 0; i--) {\n    var op = ops[i],\n        obj = op.obj,\n        key = op.key,\n        action = op.action;\n    if (['set', 'del', 'link'].includes(action)) {\n      if (!assignments[obj]) {\n        assignments[obj] = _defineProperty({}, key, true);\n        result.push(op);\n      } else if (!assignments[obj][key]) {\n        assignments[obj][key] = true;\n        result.push(op);\n      }\n    } else {\n      result.push(op);\n    }\n  }\n  return result.reverse();\n}\n\n/**\n * Adds a new change request to the list of pending requests, and returns an\n * updated document root object. `requestType` is a string indicating the type\n * of request, which may be \"change\", \"undo\", or \"redo\". For the \"change\" request\n * type, the details of the change are taken from the context object `context`.\n * `message` is an optional human-readable string describing the change.\n */\nfunction makeChange(doc, requestType, context, message) {\n  var actor = getActorId(doc);\n  if (!actor) {\n    throw new Error('Actor ID must be initialized with setActorId() before making a change');\n  }\n  var state = Object.assign({}, doc[STATE]);\n  state.seq += 1;\n  var deps = Object.assign({}, state.deps);\n  delete deps[actor];\n\n  var request = { requestType: requestType, actor: actor, seq: state.seq, deps: deps };\n  if (message !== undefined) {\n    request.message = message;\n  }\n  if (context) {\n    request.ops = ensureSingleAssignment(context.ops);\n  }\n\n  if (doc[OPTIONS].backend) {\n    var _doc$OPTIONS$backend$ = doc[OPTIONS].backend.applyLocalChange(state.backendState, request),\n        _doc$OPTIONS$backend$2 = _slicedToArray(_doc$OPTIONS$backend$, 2),\n        backendState = _doc$OPTIONS$backend$2[0],\n        patch = _doc$OPTIONS$backend$2[1];\n\n    state.backendState = backendState;\n    state.requests = [];\n    return [applyPatchToDoc(doc, patch, state, true), request];\n  } else {\n    var queuedRequest = Object.assign({}, request);\n    queuedRequest.before = doc;\n    if (context) queuedRequest.diffs = context.diffs;\n    state.requests = state.requests.slice(); // shallow clone\n    state.requests.push(queuedRequest);\n    return [updateRootObject(doc, context.updated, context.inbound, state), request];\n  }\n}\n\n/**\n * Applies the changes described in `patch` to the document with root object\n * `doc`. The state object `state` is attached to the new root object.\n * `fromBackend` should be set to `true` if the patch came from the backend,\n * and to `false` if the patch is a transient local (optimistically applied)\n * change from the frontend.\n */\nfunction applyPatchToDoc(doc, patch, state, fromBackend) {\n  var actor = getActorId(doc);\n  var inbound = Object.assign({}, doc[INBOUND]);\n  var updated = {};\n  applyDiffs(patch.diffs, doc[CACHE], updated, inbound);\n  updateParentObjects(doc[CACHE], updated, inbound);\n\n  if (fromBackend) {\n    var seq = patch.clock ? patch.clock[actor] : undefined;\n    if (seq && seq > state.seq) state.seq = seq;\n    state.deps = patch.deps;\n    state.canUndo = patch.canUndo;\n    state.canRedo = patch.canRedo;\n  }\n  return updateRootObject(doc, updated, inbound, state);\n}\n\n/**\n * Mutates the request object `request` (representing a change made locally but\n * not yet applied by the backend), transforming it past the remote `patch`.\n * The transformed version of `request` can be applied after `patch` has been\n * applied, and its effect is the same as when the original version of `request`\n * is applied to the base document without `patch`.\n *\n * This function implements a simple form of Operational Transformation.\n * However, the implementation here is actually incomplete and incorrect.\n * Fortunately, it's actually not a big problem if the transformation here is\n * not quite right, because the transformed request is only used transiently\n * while waiting for a response from the backend. When the backend responds, the\n * transformation result is discarded and replaced with the backend's version.\n *\n * One scenario that is not handled correctly is insertion at the same index:\n * request = {diffs: [{obj: someList, type: 'list', action: 'insert', index: 1}]}\n * patch = {diffs: [{obj: someList, type: 'list', action: 'insert', index: 1}]}\n *\n * Correct behaviour (i.e. consistent with the CRDT) would be to order the two\n * insertions by their elemIds; any subsequent insertions with consecutive\n * indexes may also need to be adjusted accordingly (to keep an insertion\n * sequence by a particular actor uninterrupted).\n *\n * Another scenario that is not handled correctly:\n * requests = [\n *   {diffs: [{obj: someList, type: 'list', action: 'insert', index: 1, value: 'a'}]},\n *   {diffs: [{obj: someList, type: 'list', action: 'set',    index: 1, value: 'b'}]}\n * ]\n * patch = {diffs: [{obj: someList, type: 'list', action: 'remove', index: 1}]}\n *\n * The first request's insertion is correctly left unchanged, but the 'set' action\n * is incorrectly turned into an 'insert' because we don't realise that it is\n * assigning the previously inserted list item (not the deleted item).\n *\n * A third scenario is concurrent assignment to the same list element or map key;\n * this should create a conflict.\n */\nfunction transformRequest(request, patch) {\n  var transformed = [];\n\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    local_loop: for (var _iterator2 = request.diffs[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var local = _step2.value;\n\n      local = Object.assign({}, local);\n\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = patch.diffs[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var remote = _step3.value;\n\n          // If the incoming patch modifies list indexes (because it inserts or removes),\n          // adjust the indexes in local diffs accordingly\n          if (local.obj === remote.obj && local.type === 'list' && ['insert', 'set', 'remove'].includes(local.action)) {\n            if (remote.action === 'insert' && remote.index <= local.index) local.index += 1;\n            if (remote.action === 'remove' && remote.index < local.index) local.index -= 1;\n            if (remote.action === 'remove' && remote.index === local.index) {\n              if (local.action === 'set') local.action = 'insert';\n              if (local.action === 'remove') continue local_loop; // drop this diff\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      transformed.push(local);\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  request.diffs = transformed;\n}\n\n/**\n * Creates an empty document object with no changes.\n */\nfunction init(options) {\n  if (typeof options === 'string') {\n    options = { actorId: options };\n  } else if (typeof options === 'undefined') {\n    options = {};\n  } else if (!isObject(options)) {\n    throw new TypeError('Unsupported value for init() options: ' + options);\n  }\n  if (options.actorId === undefined && !options.deferActorId) {\n    options.actorId = uuid();\n  }\n\n  var root = {},\n      cache = _defineProperty({}, ROOT_ID, root);\n  var state = { seq: 0, requests: [], deps: {}, canUndo: false, canRedo: false };\n  if (options.backend) {\n    state.backendState = options.backend.init();\n  }\n  Object.defineProperty(root, '_actorId', { value: options.actorId });\n  Object.defineProperty(root, OBJECT_ID, { value: ROOT_ID });\n  Object.defineProperty(root, OPTIONS, { value: Object.freeze(options) });\n  Object.defineProperty(root, CONFLICTS, { value: Object.freeze({}) });\n  Object.defineProperty(root, CACHE, { value: Object.freeze(cache) });\n  Object.defineProperty(root, INBOUND, { value: Object.freeze({}) });\n  Object.defineProperty(root, STATE, { value: Object.freeze(state) });\n  return Object.freeze(root);\n}\n\n/**\n * Changes a document `doc` according to actions taken by the local user.\n * `message` is an optional descriptive string that is attached to the change.\n * The actual change is made within the callback function `callback`, which is\n * given a mutable version of the document as argument. Returns a two-element\n * array `[doc, request]` where `doc` is the updated document, and `request`\n * is the change request to send to the backend. If nothing was actually\n * changed, returns the original `doc` and a `null` change request.\n */\nfunction change(doc, message, callback) {\n  if (doc[OBJECT_ID] !== ROOT_ID) {\n    throw new TypeError('The first argument to Automerge.change must be the document root');\n  }\n  if (doc[CHANGE]) {\n    throw new TypeError('Calls to Automerge.change cannot be nested');\n  }\n  if (typeof message === 'function' && callback === undefined) {\n    ;var _ref = [callback, message];\n    message = _ref[0];\n    callback = _ref[1];\n  }\n  if (message !== undefined && typeof message !== 'string') {\n    throw new TypeError('Change message must be a string');\n  }\n\n  var actorId = getActorId(doc);\n  if (!actorId) {\n    throw new Error('Actor ID must be initialized with setActorId() before making a change');\n  }\n  var context = new Context(doc, actorId);\n  callback(rootObjectProxy(context));\n\n  if (Object.keys(context.updated).length === 0) {\n    // If the callback didn't change anything, return the original document object unchanged\n    return [doc, null];\n  } else {\n    updateParentObjects(doc[CACHE], context.updated, context.inbound);\n    return makeChange(doc, 'change', context, message);\n  }\n}\n\n/**\n * Triggers a new change request on the document `doc` without actually\n * modifying its data. `message` is an optional descriptive string attached to\n * the change. This function can be useful for acknowledging the receipt of\n * some message (as it's incorported into the `deps` field of the change).\n * Returns a two-element array `[doc, request]` where `doc` is the updated\n * document, and `request` is the change request to send to the backend.\n */\nfunction emptyChange(doc, message) {\n  if (message !== undefined && typeof message !== 'string') {\n    throw new TypeError('Change message must be a string');\n  }\n\n  var actorId = getActorId(doc);\n  if (!actorId) {\n    throw new Error('Actor ID must be initialized with setActorId() before making a change');\n  }\n  return makeChange(doc, 'change', new Context(doc, actorId), message);\n}\n\n/**\n * Applies `patch` to the document root object `doc`. This patch must come\n * from the backend; it may be the result of a local change or a remote change.\n * If it is the result of a local change, the `seq` field from the change\n * request should be included in the patch, so that we can match them up here.\n */\nfunction applyPatch(doc, patch) {\n  var state = Object.assign({}, doc[STATE]);\n  var baseDoc = void 0;\n\n  if (state.requests.length > 0) {\n    baseDoc = state.requests[0].before;\n    if (patch.actor === getActorId(doc) && patch.seq !== undefined) {\n      if (state.requests[0].seq !== patch.seq) {\n        throw new RangeError('Mismatched sequence number: patch ' + patch.seq + ' does not match next request ' + state.requests[0].seq);\n      }\n      state.requests = state.requests.slice(1).map(function (req) {\n        return Object.assign({}, req);\n      });\n    } else {\n      state.requests = state.requests.slice().map(function (req) {\n        return Object.assign({}, req);\n      });\n    }\n  } else {\n    baseDoc = doc;\n    state.requests = [];\n  }\n\n  if (doc[OPTIONS].backend) {\n    if (!patch.state) {\n      throw new RangeError('When an immediate backend is used, a patch must contain the new backend state');\n    }\n    state.backendState = patch.state;\n    state.requests = [];\n    return applyPatchToDoc(doc, patch, state, true);\n  }\n\n  var newDoc = applyPatchToDoc(baseDoc, patch, state, true);\n  var _iteratorNormalCompletion4 = true;\n  var _didIteratorError4 = false;\n  var _iteratorError4 = undefined;\n\n  try {\n    for (var _iterator4 = state.requests[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n      var request = _step4.value;\n\n      request.before = newDoc;\n      transformRequest(request, patch);\n      newDoc = applyPatchToDoc(request.before, request, state, false);\n    }\n  } catch (err) {\n    _didIteratorError4 = true;\n    _iteratorError4 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion4 && _iterator4.return) {\n        _iterator4.return();\n      }\n    } finally {\n      if (_didIteratorError4) {\n        throw _iteratorError4;\n      }\n    }\n  }\n\n  return newDoc;\n}\n\n/**\n * Returns `true` if undo is currently possible on the document `doc` (because\n * there is a local change that has not already been undone); `false` if not.\n */\nfunction canUndo(doc) {\n  return !!doc[STATE].canUndo && !isUndoRedoInFlight(doc);\n}\n\n/**\n * Returns `true` if one of the pending requests is an undo or redo.\n */\nfunction isUndoRedoInFlight(doc) {\n  return doc[STATE].requests.some(function (req) {\n    return ['undo', 'redo'].includes(req.requestType);\n  });\n}\n\n/**\n * Creates a request to perform an undo on the document `doc`, returning a\n * two-element array `[doc, request]` where `doc` is the updated document, and\n * `request` needs to be sent to the backend. `message` is an optional change\n * description to attach to the undo. Note that the undo does not take effect\n * immediately: only after the request is sent to the backend, and the backend\n * responds with a patch, does the user-visible document update actually happen.\n */\nfunction undo(doc, message) {\n  if (message !== undefined && typeof message !== 'string') {\n    throw new TypeError('Change message must be a string');\n  }\n  if (!doc[STATE].canUndo) {\n    throw new Error('Cannot undo: there is nothing to be undone');\n  }\n  if (isUndoRedoInFlight(doc)) {\n    throw new Error('Can only have one undo in flight at any one time');\n  }\n  return makeChange(doc, 'undo', null, message);\n}\n\n/**\n * Returns `true` if redo is currently possible on the document `doc` (because\n * a prior action was an undo that has not already been redone); `false` if not.\n */\nfunction canRedo(doc) {\n  return !!doc[STATE].canRedo && !isUndoRedoInFlight(doc);\n}\n\n/**\n * Creates a request to perform a redo of a prior undo on the document `doc`,\n * returning a two-element array `[doc, request]` where `doc` is the updated\n * document, and `request` needs to be sent to the backend. `message` is an\n * optional change description to attach to the redo. Note that the redo does\n * not take effect immediately: only after the request is sent to the backend,\n * and the backend responds with a patch, does the user-visible document\n * update actually happen.\n */\nfunction redo(doc, message) {\n  if (message !== undefined && typeof message !== 'string') {\n    throw new TypeError('Change message must be a string');\n  }\n  if (!doc[STATE].canRedo) {\n    throw new Error('Cannot redo: there is no prior undo');\n  }\n  if (isUndoRedoInFlight(doc)) {\n    throw new Error('Can only have one redo in flight at any one time');\n  }\n  return makeChange(doc, 'redo', null, message);\n}\n\n/**\n * Returns the Automerge object ID of the given object.\n */\nfunction getObjectId(object) {\n  return object[OBJECT_ID];\n}\n\n/**\n * Returns the Automerge actor ID of the given document.\n */\nfunction getActorId(doc) {\n  return doc[STATE].actorId || doc[OPTIONS].actorId;\n}\n\n/**\n * Sets the Automerge actor ID on the document object `doc`, returning a\n * document object with updated metadata.\n */\nfunction setActorId(doc, actorId) {\n  var state = Object.assign({}, doc[STATE], { actorId: actorId });\n  return updateRootObject(doc, {}, doc[INBOUND], state);\n}\n\n/**\n * Fetches the conflicts on `object`, which may be any object in a document.\n * If the object is a map, returns an object mapping keys to conflict sets\n * (only for those keys that actually have conflicts). If the object is a list,\n * returns a list that contains null for non-conflicting indexes and a conflict\n * set otherwise.\n */\nfunction getConflicts(object) {\n  return object[CONFLICTS];\n}\n\n/**\n * Returns the backend state associated with the document `doc` (only used if\n * a backend implementation is passed to `init()`).\n */\nfunction getBackendState(doc) {\n  return doc[STATE].backendState;\n}\n\nfunction getElementIds(list) {\n  return list[ELEM_IDS];\n}\n\nmodule.exports = {\n  init: init, change: change, emptyChange: emptyChange, applyPatch: applyPatch,\n  canUndo: canUndo, undo: undo, canRedo: canRedo, redo: redo,\n  getObjectId: getObjectId, getActorId: getActorId, setActorId: setActorId, getConflicts: getConflicts, getBackendState: getBackendState, getElementIds: getElementIds,\n  Text: Text\n};\n\n/***/ }),\n\n/***/ \"./frontend/proxies.js\":\n/*!*****************************!*\\\n  !*** ./frontend/proxies.js ***!\n  \\*****************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar _require = __webpack_require__(/*! ../src/common */ \"./src/common.js\"),\n    ROOT_ID = _require.ROOT_ID;\n\nvar _require2 = __webpack_require__(/*! ./constants */ \"./frontend/constants.js\"),\n    CHANGE = _require2.CHANGE;\n\nvar _require3 = __webpack_require__(/*! ./text */ \"./frontend/text.js\"),\n    Text = _require3.Text;\n\nfunction parseListIndex(key) {\n  if (typeof key === 'string' && /^[0-9]+$/.test(key)) key = parseInt(key);\n  if (typeof key !== 'number') {\n    throw new TypeError('A list index must be a number, but you passed ' + JSON.stringify(key));\n  }\n  if (key < 0 || isNaN(key) || key === Infinity || key === -Infinity) {\n    throw new RangeError('A list index must be positive, but you passed ' + key);\n  }\n  return key;\n}\n\nfunction listMethods(context, listId) {\n  var methods = {\n    deleteAt: function deleteAt(index, numDelete) {\n      context.splice(listId, parseListIndex(index), numDelete || 1, []);\n      return this;\n    },\n    fill: function fill(value, start, end) {\n      var list = context.getObject(listId);\n      for (var index = parseListIndex(start || 0); index < parseListIndex(end || list.length); index++) {\n        context.setListIndex(listId, index, value);\n      }\n      return this;\n    },\n    insertAt: function insertAt(index) {\n      for (var _len = arguments.length, values = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        values[_key - 1] = arguments[_key];\n      }\n\n      context.splice(listId, parseListIndex(index), 0, values);\n      return this;\n    },\n    pop: function pop() {\n      var list = context.getObject(listId);\n      if (list.length == 0) return;\n      var last = context.getObjectField(listId, list.length - 1);\n      context.splice(listId, list.length - 1, 1, []);\n      return last;\n    },\n    push: function push() {\n      var list = context.getObject(listId);\n\n      for (var _len2 = arguments.length, values = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        values[_key2] = arguments[_key2];\n      }\n\n      context.splice(listId, list.length, 0, values);\n      // need to getObject() again because the list object above may be immutable\n      return context.getObject(listId).length;\n    },\n    shift: function shift() {\n      var list = context.getObject(listId);\n      if (list.length == 0) return;\n      var first = context.getObjectField(listId, 0);\n      context.splice(listId, 0, 1, []);\n      return first;\n    },\n    splice: function splice(start, deleteCount) {\n      var list = context.getObject(listId);\n      start = parseListIndex(start);\n      if (deleteCount === undefined) {\n        deleteCount = list.length - start;\n      }\n      var deleted = [];\n      for (var n = 0; n < deleteCount; n++) {\n        deleted.push(context.getObjectField(listId, start + n));\n      }\n\n      for (var _len3 = arguments.length, values = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n        values[_key3 - 2] = arguments[_key3];\n      }\n\n      context.splice(listId, start, deleteCount, values);\n      return deleted;\n    },\n    unshift: function unshift() {\n      for (var _len4 = arguments.length, values = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        values[_key4] = arguments[_key4];\n      }\n\n      context.splice(listId, 0, 0, values);\n      return context.getObject(listId).length;\n    }\n  };\n\n  var _loop = function _loop(iterator) {\n    var list = context.getObject(listId);\n    methods[iterator] = function () {\n      return list[iterator]();\n    };\n  };\n\n  var _arr = ['entries', 'keys', 'values'];\n  for (var _i = 0; _i < _arr.length; _i++) {\n    var iterator = _arr[_i];\n    _loop(iterator);\n  }\n\n  // Read-only methods that can delegate to the JavaScript built-in implementations\n\n  var _loop2 = function _loop2(method) {\n    methods[method] = function () {\n      var _list$method;\n\n      for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n\n      var list = context.getObject(listId);\n      return (_list$method = list[method]).call.apply(_list$method, [list].concat(args));\n    };\n  };\n\n  var _arr2 = ['concat', 'every', 'filter', 'find', 'findIndex', 'forEach', 'includes', 'indexOf', 'join', 'lastIndexOf', 'map', 'reduce', 'reduceRight', 'slice', 'some', 'toLocaleString', 'toString'];\n  for (var _i2 = 0; _i2 < _arr2.length; _i2++) {\n    var method = _arr2[_i2];\n    _loop2(method);\n  }\n\n  return methods;\n}\n\nvar MapHandler = {\n  get: function get(target, key) {\n    var context = target.context,\n        objectId = target.objectId;\n\n    if (key === '_inspect') return JSON.parse(JSON.stringify(mapProxy(context, objectId)));\n    if (key === '_type') return 'map';\n    if (key === '_objectId') return objectId;\n    if (key === CHANGE) return context;\n    if (key === '_get') return context._get;\n    return context.getObjectField(objectId, key);\n  },\n  set: function set(target, key, value) {\n    var context = target.context,\n        objectId = target.objectId;\n\n    context.setMapKey(objectId, key, value);\n    return true;\n  },\n  deleteProperty: function deleteProperty(target, key) {\n    var context = target.context,\n        objectId = target.objectId;\n\n    context.deleteMapKey(objectId, key);\n    return true;\n  },\n  has: function has(target, key) {\n    var context = target.context,\n        objectId = target.objectId;\n\n    return ['_type', '_objectId', CHANGE, '_get'].includes(key) || key in context.getObject(objectId);\n  },\n  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, key) {\n    var context = target.context,\n        objectId = target.objectId;\n\n    var object = context.getObject(objectId);\n    if (key in object) {\n      return { configurable: true, enumerable: true };\n    }\n  },\n  ownKeys: function ownKeys(target) {\n    var context = target.context,\n        objectId = target.objectId;\n\n    return Object.keys(context.getObject(objectId));\n  }\n};\n\nvar ListHandler = {\n  get: function get(target, key) {\n    var _target = _slicedToArray(target, 2),\n        context = _target[0],\n        objectId = _target[1];\n\n    if (key === Symbol.iterator) return context.getObject(objectId)[Symbol.iterator];\n    if (key === '_inspect') return JSON.parse(JSON.stringify(listProxy(context, objectId)));\n    if (key === '_type') return 'list';\n    if (key === '_objectId') return objectId;\n    if (key === CHANGE) return context;\n    if (key === 'length') return context.getObject(objectId).length;\n    if (typeof key === 'string' && /^[0-9]+$/.test(key)) {\n      return context.getObjectField(objectId, parseListIndex(key));\n    }\n    return listMethods(context, objectId)[key];\n  },\n  set: function set(target, key, value) {\n    var _target2 = _slicedToArray(target, 2),\n        context = _target2[0],\n        objectId = _target2[1];\n\n    context.setListIndex(objectId, parseListIndex(key), value);\n    return true;\n  },\n  deleteProperty: function deleteProperty(target, key) {\n    var _target3 = _slicedToArray(target, 2),\n        context = _target3[0],\n        objectId = _target3[1];\n\n    context.splice(objectId, parseListIndex(key), 1, []);\n    return true;\n  },\n  has: function has(target, key) {\n    var _target4 = _slicedToArray(target, 2),\n        context = _target4[0],\n        objectId = _target4[1];\n\n    if (typeof key === 'string' && /^[0-9]+$/.test(key)) {\n      return parseListIndex(key) < context.getObject(objectId).length;\n    }\n    return ['length', '_type', '_objectId', CHANGE].includes(key);\n  },\n  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, key) {\n    if (key === 'length') return {};\n    if (key === '_objectId') return { configurable: true, enumerable: false };\n\n    var _target5 = _slicedToArray(target, 2),\n        context = _target5[0],\n        objectId = _target5[1];\n\n    var object = context.getObject(objectId);\n\n    if (typeof key === 'string' && /^[0-9]+$/.test(key)) {\n      var index = parseListIndex(key);\n      if (index < object.length) return { configurable: true, enumerable: true };\n    }\n  },\n  ownKeys: function ownKeys(target) {\n    var _target6 = _slicedToArray(target, 2),\n        context = _target6[0],\n        objectId = _target6[1];\n\n    var object = context.getObject(objectId);\n    var keys = ['length', '_objectId'];\n    keys.push.apply(keys, _toConsumableArray(Object.keys(object)));\n    return keys;\n  }\n};\n\nfunction mapProxy(context, objectId) {\n  return new Proxy({ context: context, objectId: objectId }, MapHandler);\n}\n\nfunction listProxy(context, objectId) {\n  return new Proxy([context, objectId], ListHandler);\n}\n\n/**\n * Instantiates a proxy object for the given `objectId`.\n * This function is added as a method to the context object by rootObjectProxy().\n * When it is called, `this` is the context object.\n */\nfunction instantiateProxy(objectId) {\n  var object = this.getObject(objectId);\n  if (Array.isArray(object) || object instanceof Text) {\n    return listProxy(this, objectId);\n  } else {\n    return mapProxy(this, objectId);\n  }\n}\n\nfunction rootObjectProxy(context) {\n  context.instantiateObject = instantiateProxy;\n  context._get = function (objId) {\n    return instantiateProxy.call(context, objId);\n  };\n  return mapProxy(context, ROOT_ID);\n}\n\nmodule.exports = { rootObjectProxy: rootObjectProxy };\n\n/***/ }),\n\n/***/ \"./frontend/text.js\":\n/*!**************************!*\\\n  !*** ./frontend/text.js ***!\n  \\**************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _require = __webpack_require__(/*! ./constants */ \"./frontend/constants.js\"),\n    OBJECT_ID = _require.OBJECT_ID,\n    ELEM_IDS = _require.ELEM_IDS,\n    MAX_ELEM = _require.MAX_ELEM;\n\nvar Text = function () {\n  function Text(objectId, elems, maxElem) {\n    _classCallCheck(this, Text);\n\n    return makeInstance(objectId, elems, maxElem);\n  }\n\n  _createClass(Text, [{\n    key: 'get',\n    value: function get(index) {\n      return this.elems[index].value;\n    }\n  }, {\n    key: 'getElemId',\n    value: function getElemId(index) {\n      return this.elems[index].elemId;\n    }\n  }, {\n    key: Symbol.iterator,\n    value: function value() {\n      var elems = this.elems,\n          index = -1;\n      return {\n        next: function next() {\n          index += 1;\n          if (index < elems.length) {\n            return { done: false, value: elems[index].value };\n          } else {\n            return { done: true };\n          }\n        }\n      };\n    }\n  }, {\n    key: 'length',\n    get: function get() {\n      return this.elems.length;\n    }\n  }]);\n\n  return Text;\n}();\n\n// Read-only methods that can delegate to the JavaScript built-in array\n\n\nvar _loop = function _loop(method) {\n  Text.prototype[method] = function () {\n    var _array$method;\n\n    var array = [].concat(_toConsumableArray(this));\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return (_array$method = array[method]).call.apply(_array$method, [array].concat(args));\n  };\n};\n\nvar _arr = ['concat', 'every', 'filter', 'find', 'findIndex', 'forEach', 'includes', 'indexOf', 'join', 'lastIndexOf', 'map', 'reduce', 'reduceRight', 'slice', 'some', 'toLocaleString', 'toString'];\nfor (var _i = 0; _i < _arr.length; _i++) {\n  var method = _arr[_i];\n  _loop(method);\n}\n\nfunction makeInstance(objectId, elems, maxElem) {\n  var instance = Object.create(Text.prototype);\n  instance[OBJECT_ID] = objectId;\n  instance.elems = elems || [];\n  instance[MAX_ELEM] = maxElem || 0;\n  return instance;\n}\n\n/**\n * Returns the elemId of the `index`-th element. `object` may be either\n * a list object or a Text object.\n */\nfunction getElemId(object, index) {\n  return object instanceof Text ? object.getElemId(index) : object[ELEM_IDS][index];\n}\n\nmodule.exports = { Text: Text, getElemId: getElemId };\n\n/***/ }),\n\n/***/ \"./node_modules/immutable/dist/immutable.js\":\n/*!**************************************************!*\\\n  !*** ./node_modules/immutable/dist/immutable.js ***!\n  \\**************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n(function (global, factory) {\n   true ? module.exports = factory() :\n  undefined;\n}(this, function () { 'use strict';var SLICE$0 = Array.prototype.slice;\n\n  function createClass(ctor, superClass) {\n    if (superClass) {\n      ctor.prototype = Object.create(superClass.prototype);\n    }\n    ctor.prototype.constructor = ctor;\n  }\n\n  function Iterable(value) {\n      return isIterable(value) ? value : Seq(value);\n    }\n\n\n  createClass(KeyedIterable, Iterable);\n    function KeyedIterable(value) {\n      return isKeyed(value) ? value : KeyedSeq(value);\n    }\n\n\n  createClass(IndexedIterable, Iterable);\n    function IndexedIterable(value) {\n      return isIndexed(value) ? value : IndexedSeq(value);\n    }\n\n\n  createClass(SetIterable, Iterable);\n    function SetIterable(value) {\n      return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);\n    }\n\n\n\n  function isIterable(maybeIterable) {\n    return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);\n  }\n\n  function isKeyed(maybeKeyed) {\n    return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);\n  }\n\n  function isIndexed(maybeIndexed) {\n    return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);\n  }\n\n  function isAssociative(maybeAssociative) {\n    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);\n  }\n\n  function isOrdered(maybeOrdered) {\n    return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);\n  }\n\n  Iterable.isIterable = isIterable;\n  Iterable.isKeyed = isKeyed;\n  Iterable.isIndexed = isIndexed;\n  Iterable.isAssociative = isAssociative;\n  Iterable.isOrdered = isOrdered;\n\n  Iterable.Keyed = KeyedIterable;\n  Iterable.Indexed = IndexedIterable;\n  Iterable.Set = SetIterable;\n\n\n  var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n  var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n  var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n  var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\n  // Used for setting prototype methods that IE8 chokes on.\n  var DELETE = 'delete';\n\n  // Constants describing the size of trie nodes.\n  var SHIFT = 5; // Resulted in best performance after ______?\n  var SIZE = 1 << SHIFT;\n  var MASK = SIZE - 1;\n\n  // A consistent shared value representing \"not set\" which equals nothing other\n  // than itself, and nothing that could be provided externally.\n  var NOT_SET = {};\n\n  // Boolean references, Rough equivalent of `bool &`.\n  var CHANGE_LENGTH = { value: false };\n  var DID_ALTER = { value: false };\n\n  function MakeRef(ref) {\n    ref.value = false;\n    return ref;\n  }\n\n  function SetRef(ref) {\n    ref && (ref.value = true);\n  }\n\n  // A function which returns a value representing an \"owner\" for transient writes\n  // to tries. The return value will only ever equal itself, and will not equal\n  // the return of any subsequent call of this function.\n  function OwnerID() {}\n\n  // http://jsperf.com/copy-array-inline\n  function arrCopy(arr, offset) {\n    offset = offset || 0;\n    var len = Math.max(0, arr.length - offset);\n    var newArr = new Array(len);\n    for (var ii = 0; ii < len; ii++) {\n      newArr[ii] = arr[ii + offset];\n    }\n    return newArr;\n  }\n\n  function ensureSize(iter) {\n    if (iter.size === undefined) {\n      iter.size = iter.__iterate(returnTrue);\n    }\n    return iter.size;\n  }\n\n  function wrapIndex(iter, index) {\n    // This implements \"is array index\" which the ECMAString spec defines as:\n    //\n    //     A String property name P is an array index if and only if\n    //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal\n    //     to 2^32−1.\n    //\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects\n    if (typeof index !== 'number') {\n      var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32\n      if ('' + uint32Index !== index || uint32Index === 4294967295) {\n        return NaN;\n      }\n      index = uint32Index;\n    }\n    return index < 0 ? ensureSize(iter) + index : index;\n  }\n\n  function returnTrue() {\n    return true;\n  }\n\n  function wholeSlice(begin, end, size) {\n    return (begin === 0 || (size !== undefined && begin <= -size)) &&\n      (end === undefined || (size !== undefined && end >= size));\n  }\n\n  function resolveBegin(begin, size) {\n    return resolveIndex(begin, size, 0);\n  }\n\n  function resolveEnd(end, size) {\n    return resolveIndex(end, size, size);\n  }\n\n  function resolveIndex(index, size, defaultIndex) {\n    return index === undefined ?\n      defaultIndex :\n      index < 0 ?\n        Math.max(0, size + index) :\n        size === undefined ?\n          index :\n          Math.min(size, index);\n  }\n\n  /* global Symbol */\n\n  var ITERATE_KEYS = 0;\n  var ITERATE_VALUES = 1;\n  var ITERATE_ENTRIES = 2;\n\n  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n  var FAUX_ITERATOR_SYMBOL = '@@iterator';\n\n  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;\n\n\n  function Iterator(next) {\n      this.next = next;\n    }\n\n    Iterator.prototype.toString = function() {\n      return '[Iterator]';\n    };\n\n\n  Iterator.KEYS = ITERATE_KEYS;\n  Iterator.VALUES = ITERATE_VALUES;\n  Iterator.ENTRIES = ITERATE_ENTRIES;\n\n  Iterator.prototype.inspect =\n  Iterator.prototype.toSource = function () { return this.toString(); }\n  Iterator.prototype[ITERATOR_SYMBOL] = function () {\n    return this;\n  };\n\n\n  function iteratorValue(type, k, v, iteratorResult) {\n    var value = type === 0 ? k : type === 1 ? v : [k, v];\n    iteratorResult ? (iteratorResult.value = value) : (iteratorResult = {\n      value: value, done: false\n    });\n    return iteratorResult;\n  }\n\n  function iteratorDone() {\n    return { value: undefined, done: true };\n  }\n\n  function hasIterator(maybeIterable) {\n    return !!getIteratorFn(maybeIterable);\n  }\n\n  function isIterator(maybeIterator) {\n    return maybeIterator && typeof maybeIterator.next === 'function';\n  }\n\n  function getIterator(iterable) {\n    var iteratorFn = getIteratorFn(iterable);\n    return iteratorFn && iteratorFn.call(iterable);\n  }\n\n  function getIteratorFn(iterable) {\n    var iteratorFn = iterable && (\n      (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||\n      iterable[FAUX_ITERATOR_SYMBOL]\n    );\n    if (typeof iteratorFn === 'function') {\n      return iteratorFn;\n    }\n  }\n\n  function isArrayLike(value) {\n    return value && typeof value.length === 'number';\n  }\n\n  createClass(Seq, Iterable);\n    function Seq(value) {\n      return value === null || value === undefined ? emptySequence() :\n        isIterable(value) ? value.toSeq() : seqFromValue(value);\n    }\n\n    Seq.of = function(/*...values*/) {\n      return Seq(arguments);\n    };\n\n    Seq.prototype.toSeq = function() {\n      return this;\n    };\n\n    Seq.prototype.toString = function() {\n      return this.__toString('Seq {', '}');\n    };\n\n    Seq.prototype.cacheResult = function() {\n      if (!this._cache && this.__iterateUncached) {\n        this._cache = this.entrySeq().toArray();\n        this.size = this._cache.length;\n      }\n      return this;\n    };\n\n    // abstract __iterateUncached(fn, reverse)\n\n    Seq.prototype.__iterate = function(fn, reverse) {\n      return seqIterate(this, fn, reverse, true);\n    };\n\n    // abstract __iteratorUncached(type, reverse)\n\n    Seq.prototype.__iterator = function(type, reverse) {\n      return seqIterator(this, type, reverse, true);\n    };\n\n\n\n  createClass(KeyedSeq, Seq);\n    function KeyedSeq(value) {\n      return value === null || value === undefined ?\n        emptySequence().toKeyedSeq() :\n        isIterable(value) ?\n          (isKeyed(value) ? value.toSeq() : value.fromEntrySeq()) :\n          keyedSeqFromValue(value);\n    }\n\n    KeyedSeq.prototype.toKeyedSeq = function() {\n      return this;\n    };\n\n\n\n  createClass(IndexedSeq, Seq);\n    function IndexedSeq(value) {\n      return value === null || value === undefined ? emptySequence() :\n        !isIterable(value) ? indexedSeqFromValue(value) :\n        isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();\n    }\n\n    IndexedSeq.of = function(/*...values*/) {\n      return IndexedSeq(arguments);\n    };\n\n    IndexedSeq.prototype.toIndexedSeq = function() {\n      return this;\n    };\n\n    IndexedSeq.prototype.toString = function() {\n      return this.__toString('Seq [', ']');\n    };\n\n    IndexedSeq.prototype.__iterate = function(fn, reverse) {\n      return seqIterate(this, fn, reverse, false);\n    };\n\n    IndexedSeq.prototype.__iterator = function(type, reverse) {\n      return seqIterator(this, type, reverse, false);\n    };\n\n\n\n  createClass(SetSeq, Seq);\n    function SetSeq(value) {\n      return (\n        value === null || value === undefined ? emptySequence() :\n        !isIterable(value) ? indexedSeqFromValue(value) :\n        isKeyed(value) ? value.entrySeq() : value\n      ).toSetSeq();\n    }\n\n    SetSeq.of = function(/*...values*/) {\n      return SetSeq(arguments);\n    };\n\n    SetSeq.prototype.toSetSeq = function() {\n      return this;\n    };\n\n\n\n  Seq.isSeq = isSeq;\n  Seq.Keyed = KeyedSeq;\n  Seq.Set = SetSeq;\n  Seq.Indexed = IndexedSeq;\n\n  var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';\n\n  Seq.prototype[IS_SEQ_SENTINEL] = true;\n\n\n\n  createClass(ArraySeq, IndexedSeq);\n    function ArraySeq(array) {\n      this._array = array;\n      this.size = array.length;\n    }\n\n    ArraySeq.prototype.get = function(index, notSetValue) {\n      return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;\n    };\n\n    ArraySeq.prototype.__iterate = function(fn, reverse) {\n      var array = this._array;\n      var maxIndex = array.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    ArraySeq.prototype.__iterator = function(type, reverse) {\n      var array = this._array;\n      var maxIndex = array.length - 1;\n      var ii = 0;\n      return new Iterator(function() \n        {return ii > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++])}\n      );\n    };\n\n\n\n  createClass(ObjectSeq, KeyedSeq);\n    function ObjectSeq(object) {\n      var keys = Object.keys(object);\n      this._object = object;\n      this._keys = keys;\n      this.size = keys.length;\n    }\n\n    ObjectSeq.prototype.get = function(key, notSetValue) {\n      if (notSetValue !== undefined && !this.has(key)) {\n        return notSetValue;\n      }\n      return this._object[key];\n    };\n\n    ObjectSeq.prototype.has = function(key) {\n      return this._object.hasOwnProperty(key);\n    };\n\n    ObjectSeq.prototype.__iterate = function(fn, reverse) {\n      var object = this._object;\n      var keys = this._keys;\n      var maxIndex = keys.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        var key = keys[reverse ? maxIndex - ii : ii];\n        if (fn(object[key], key, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    ObjectSeq.prototype.__iterator = function(type, reverse) {\n      var object = this._object;\n      var keys = this._keys;\n      var maxIndex = keys.length - 1;\n      var ii = 0;\n      return new Iterator(function()  {\n        var key = keys[reverse ? maxIndex - ii : ii];\n        return ii++ > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, key, object[key]);\n      });\n    };\n\n  ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n  createClass(IterableSeq, IndexedSeq);\n    function IterableSeq(iterable) {\n      this._iterable = iterable;\n      this.size = iterable.length || iterable.size;\n    }\n\n    IterableSeq.prototype.__iterateUncached = function(fn, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterable = this._iterable;\n      var iterator = getIterator(iterable);\n      var iterations = 0;\n      if (isIterator(iterator)) {\n        var step;\n        while (!(step = iterator.next()).done) {\n          if (fn(step.value, iterations++, this) === false) {\n            break;\n          }\n        }\n      }\n      return iterations;\n    };\n\n    IterableSeq.prototype.__iteratorUncached = function(type, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterable = this._iterable;\n      var iterator = getIterator(iterable);\n      if (!isIterator(iterator)) {\n        return new Iterator(iteratorDone);\n      }\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step : iteratorValue(type, iterations++, step.value);\n      });\n    };\n\n\n\n  createClass(IteratorSeq, IndexedSeq);\n    function IteratorSeq(iterator) {\n      this._iterator = iterator;\n      this._iteratorCache = [];\n    }\n\n    IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterator = this._iterator;\n      var cache = this._iteratorCache;\n      var iterations = 0;\n      while (iterations < cache.length) {\n        if (fn(cache[iterations], iterations++, this) === false) {\n          return iterations;\n        }\n      }\n      var step;\n      while (!(step = iterator.next()).done) {\n        var val = step.value;\n        cache[iterations] = val;\n        if (fn(val, iterations++, this) === false) {\n          break;\n        }\n      }\n      return iterations;\n    };\n\n    IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = this._iterator;\n      var cache = this._iteratorCache;\n      var iterations = 0;\n      return new Iterator(function()  {\n        if (iterations >= cache.length) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          cache[iterations] = step.value;\n        }\n        return iteratorValue(type, iterations, cache[iterations++]);\n      });\n    };\n\n\n\n\n  // # pragma Helper functions\n\n  function isSeq(maybeSeq) {\n    return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);\n  }\n\n  var EMPTY_SEQ;\n\n  function emptySequence() {\n    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));\n  }\n\n  function keyedSeqFromValue(value) {\n    var seq =\n      Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() :\n      isIterator(value) ? new IteratorSeq(value).fromEntrySeq() :\n      hasIterator(value) ? new IterableSeq(value).fromEntrySeq() :\n      typeof value === 'object' ? new ObjectSeq(value) :\n      undefined;\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of [k, v] entries, '+\n        'or keyed object: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function indexedSeqFromValue(value) {\n    var seq = maybeIndexedSeqFromValue(value);\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of values: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function seqFromValue(value) {\n    var seq = maybeIndexedSeqFromValue(value) ||\n      (typeof value === 'object' && new ObjectSeq(value));\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of values, or keyed object: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function maybeIndexedSeqFromValue(value) {\n    return (\n      isArrayLike(value) ? new ArraySeq(value) :\n      isIterator(value) ? new IteratorSeq(value) :\n      hasIterator(value) ? new IterableSeq(value) :\n      undefined\n    );\n  }\n\n  function seqIterate(seq, fn, reverse, useKeys) {\n    var cache = seq._cache;\n    if (cache) {\n      var maxIndex = cache.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        var entry = cache[reverse ? maxIndex - ii : ii];\n        if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    }\n    return seq.__iterateUncached(fn, reverse);\n  }\n\n  function seqIterator(seq, type, reverse, useKeys) {\n    var cache = seq._cache;\n    if (cache) {\n      var maxIndex = cache.length - 1;\n      var ii = 0;\n      return new Iterator(function()  {\n        var entry = cache[reverse ? maxIndex - ii : ii];\n        return ii++ > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);\n      });\n    }\n    return seq.__iteratorUncached(type, reverse);\n  }\n\n  function fromJS(json, converter) {\n    return converter ?\n      fromJSWith(converter, json, '', {'': json}) :\n      fromJSDefault(json);\n  }\n\n  function fromJSWith(converter, json, key, parentJSON) {\n    if (Array.isArray(json)) {\n      return converter.call(parentJSON, key, IndexedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n    }\n    if (isPlainObj(json)) {\n      return converter.call(parentJSON, key, KeyedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n    }\n    return json;\n  }\n\n  function fromJSDefault(json) {\n    if (Array.isArray(json)) {\n      return IndexedSeq(json).map(fromJSDefault).toList();\n    }\n    if (isPlainObj(json)) {\n      return KeyedSeq(json).map(fromJSDefault).toMap();\n    }\n    return json;\n  }\n\n  function isPlainObj(value) {\n    return value && (value.constructor === Object || value.constructor === undefined);\n  }\n\n  /**\n   * An extension of the \"same-value\" algorithm as [described for use by ES6 Map\n   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)\n   *\n   * NaN is considered the same as NaN, however -0 and 0 are considered the same\n   * value, which is different from the algorithm described by\n   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n   *\n   * This is extended further to allow Objects to describe the values they\n   * represent, by way of `valueOf` or `equals` (and `hashCode`).\n   *\n   * Note: because of this extension, the key equality of Immutable.Map and the\n   * value equality of Immutable.Set will differ from ES6 Map and Set.\n   *\n   * ### Defining custom values\n   *\n   * The easiest way to describe the value an object represents is by implementing\n   * `valueOf`. For example, `Date` represents a value by returning a unix\n   * timestamp for `valueOf`:\n   *\n   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...\n   *     var date2 = new Date(1234567890000);\n   *     date1.valueOf(); // 1234567890000\n   *     assert( date1 !== date2 );\n   *     assert( Immutable.is( date1, date2 ) );\n   *\n   * Note: overriding `valueOf` may have other implications if you use this object\n   * where JavaScript expects a primitive, such as implicit string coercion.\n   *\n   * For more complex types, especially collections, implementing `valueOf` may\n   * not be performant. An alternative is to implement `equals` and `hashCode`.\n   *\n   * `equals` takes another object, presumably of similar type, and returns true\n   * if the it is equal. Equality is symmetrical, so the same result should be\n   * returned if this and the argument are flipped.\n   *\n   *     assert( a.equals(b) === b.equals(a) );\n   *\n   * `hashCode` returns a 32bit integer number representing the object which will\n   * be used to determine how to store the value object in a Map or Set. You must\n   * provide both or neither methods, one must not exist without the other.\n   *\n   * Also, an important relationship between these methods must be upheld: if two\n   * values are equal, they *must* return the same hashCode. If the values are not\n   * equal, they might have the same hashCode; this is called a hash collision,\n   * and while undesirable for performance reasons, it is acceptable.\n   *\n   *     if (a.equals(b)) {\n   *       assert( a.hashCode() === b.hashCode() );\n   *     }\n   *\n   * All Immutable collections implement `equals` and `hashCode`.\n   *\n   */\n  function is(valueA, valueB) {\n    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n      return true;\n    }\n    if (!valueA || !valueB) {\n      return false;\n    }\n    if (typeof valueA.valueOf === 'function' &&\n        typeof valueB.valueOf === 'function') {\n      valueA = valueA.valueOf();\n      valueB = valueB.valueOf();\n      if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n        return true;\n      }\n      if (!valueA || !valueB) {\n        return false;\n      }\n    }\n    if (typeof valueA.equals === 'function' &&\n        typeof valueB.equals === 'function' &&\n        valueA.equals(valueB)) {\n      return true;\n    }\n    return false;\n  }\n\n  function deepEqual(a, b) {\n    if (a === b) {\n      return true;\n    }\n\n    if (\n      !isIterable(b) ||\n      a.size !== undefined && b.size !== undefined && a.size !== b.size ||\n      a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash ||\n      isKeyed(a) !== isKeyed(b) ||\n      isIndexed(a) !== isIndexed(b) ||\n      isOrdered(a) !== isOrdered(b)\n    ) {\n      return false;\n    }\n\n    if (a.size === 0 && b.size === 0) {\n      return true;\n    }\n\n    var notAssociative = !isAssociative(a);\n\n    if (isOrdered(a)) {\n      var entries = a.entries();\n      return b.every(function(v, k)  {\n        var entry = entries.next().value;\n        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));\n      }) && entries.next().done;\n    }\n\n    var flipped = false;\n\n    if (a.size === undefined) {\n      if (b.size === undefined) {\n        if (typeof a.cacheResult === 'function') {\n          a.cacheResult();\n        }\n      } else {\n        flipped = true;\n        var _ = a;\n        a = b;\n        b = _;\n      }\n    }\n\n    var allEqual = true;\n    var bSize = b.__iterate(function(v, k)  {\n      if (notAssociative ? !a.has(v) :\n          flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {\n        allEqual = false;\n        return false;\n      }\n    });\n\n    return allEqual && a.size === bSize;\n  }\n\n  createClass(Repeat, IndexedSeq);\n\n    function Repeat(value, times) {\n      if (!(this instanceof Repeat)) {\n        return new Repeat(value, times);\n      }\n      this._value = value;\n      this.size = times === undefined ? Infinity : Math.max(0, times);\n      if (this.size === 0) {\n        if (EMPTY_REPEAT) {\n          return EMPTY_REPEAT;\n        }\n        EMPTY_REPEAT = this;\n      }\n    }\n\n    Repeat.prototype.toString = function() {\n      if (this.size === 0) {\n        return 'Repeat []';\n      }\n      return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';\n    };\n\n    Repeat.prototype.get = function(index, notSetValue) {\n      return this.has(index) ? this._value : notSetValue;\n    };\n\n    Repeat.prototype.includes = function(searchValue) {\n      return is(this._value, searchValue);\n    };\n\n    Repeat.prototype.slice = function(begin, end) {\n      var size = this.size;\n      return wholeSlice(begin, end, size) ? this :\n        new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));\n    };\n\n    Repeat.prototype.reverse = function() {\n      return this;\n    };\n\n    Repeat.prototype.indexOf = function(searchValue) {\n      if (is(this._value, searchValue)) {\n        return 0;\n      }\n      return -1;\n    };\n\n    Repeat.prototype.lastIndexOf = function(searchValue) {\n      if (is(this._value, searchValue)) {\n        return this.size;\n      }\n      return -1;\n    };\n\n    Repeat.prototype.__iterate = function(fn, reverse) {\n      for (var ii = 0; ii < this.size; ii++) {\n        if (fn(this._value, ii, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    Repeat.prototype.__iterator = function(type, reverse) {var this$0 = this;\n      var ii = 0;\n      return new Iterator(function() \n        {return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone()}\n      );\n    };\n\n    Repeat.prototype.equals = function(other) {\n      return other instanceof Repeat ?\n        is(this._value, other._value) :\n        deepEqual(other);\n    };\n\n\n  var EMPTY_REPEAT;\n\n  function invariant(condition, error) {\n    if (!condition) throw new Error(error);\n  }\n\n  createClass(Range, IndexedSeq);\n\n    function Range(start, end, step) {\n      if (!(this instanceof Range)) {\n        return new Range(start, end, step);\n      }\n      invariant(step !== 0, 'Cannot step a Range by 0');\n      start = start || 0;\n      if (end === undefined) {\n        end = Infinity;\n      }\n      step = step === undefined ? 1 : Math.abs(step);\n      if (end < start) {\n        step = -step;\n      }\n      this._start = start;\n      this._end = end;\n      this._step = step;\n      this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);\n      if (this.size === 0) {\n        if (EMPTY_RANGE) {\n          return EMPTY_RANGE;\n        }\n        EMPTY_RANGE = this;\n      }\n    }\n\n    Range.prototype.toString = function() {\n      if (this.size === 0) {\n        return 'Range []';\n      }\n      return 'Range [ ' +\n        this._start + '...' + this._end +\n        (this._step !== 1 ? ' by ' + this._step : '') +\n      ' ]';\n    };\n\n    Range.prototype.get = function(index, notSetValue) {\n      return this.has(index) ?\n        this._start + wrapIndex(this, index) * this._step :\n        notSetValue;\n    };\n\n    Range.prototype.includes = function(searchValue) {\n      var possibleIndex = (searchValue - this._start) / this._step;\n      return possibleIndex >= 0 &&\n        possibleIndex < this.size &&\n        possibleIndex === Math.floor(possibleIndex);\n    };\n\n    Range.prototype.slice = function(begin, end) {\n      if (wholeSlice(begin, end, this.size)) {\n        return this;\n      }\n      begin = resolveBegin(begin, this.size);\n      end = resolveEnd(end, this.size);\n      if (end <= begin) {\n        return new Range(0, 0);\n      }\n      return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);\n    };\n\n    Range.prototype.indexOf = function(searchValue) {\n      var offsetValue = searchValue - this._start;\n      if (offsetValue % this._step === 0) {\n        var index = offsetValue / this._step;\n        if (index >= 0 && index < this.size) {\n          return index\n        }\n      }\n      return -1;\n    };\n\n    Range.prototype.lastIndexOf = function(searchValue) {\n      return this.indexOf(searchValue);\n    };\n\n    Range.prototype.__iterate = function(fn, reverse) {\n      var maxIndex = this.size - 1;\n      var step = this._step;\n      var value = reverse ? this._start + maxIndex * step : this._start;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        if (fn(value, ii, this) === false) {\n          return ii + 1;\n        }\n        value += reverse ? -step : step;\n      }\n      return ii;\n    };\n\n    Range.prototype.__iterator = function(type, reverse) {\n      var maxIndex = this.size - 1;\n      var step = this._step;\n      var value = reverse ? this._start + maxIndex * step : this._start;\n      var ii = 0;\n      return new Iterator(function()  {\n        var v = value;\n        value += reverse ? -step : step;\n        return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);\n      });\n    };\n\n    Range.prototype.equals = function(other) {\n      return other instanceof Range ?\n        this._start === other._start &&\n        this._end === other._end &&\n        this._step === other._step :\n        deepEqual(this, other);\n    };\n\n\n  var EMPTY_RANGE;\n\n  createClass(Collection, Iterable);\n    function Collection() {\n      throw TypeError('Abstract');\n    }\n\n\n  createClass(KeyedCollection, Collection);function KeyedCollection() {}\n\n  createClass(IndexedCollection, Collection);function IndexedCollection() {}\n\n  createClass(SetCollection, Collection);function SetCollection() {}\n\n\n  Collection.Keyed = KeyedCollection;\n  Collection.Indexed = IndexedCollection;\n  Collection.Set = SetCollection;\n\n  var imul =\n    typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2 ?\n    Math.imul :\n    function imul(a, b) {\n      a = a | 0; // int\n      b = b | 0; // int\n      var c = a & 0xffff;\n      var d = b & 0xffff;\n      // Shift by 0 fixes the sign on the high part.\n      return (c * d) + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0) | 0; // int\n    };\n\n  // v8 has an optimization for storing 31-bit signed numbers.\n  // Values which have either 00 or 11 as the high order bits qualify.\n  // This function drops the highest order bit in a signed number, maintaining\n  // the sign bit.\n  function smi(i32) {\n    return ((i32 >>> 1) & 0x40000000) | (i32 & 0xBFFFFFFF);\n  }\n\n  function hash(o) {\n    if (o === false || o === null || o === undefined) {\n      return 0;\n    }\n    if (typeof o.valueOf === 'function') {\n      o = o.valueOf();\n      if (o === false || o === null || o === undefined) {\n        return 0;\n      }\n    }\n    if (o === true) {\n      return 1;\n    }\n    var type = typeof o;\n    if (type === 'number') {\n      if (o !== o || o === Infinity) {\n        return 0;\n      }\n      var h = o | 0;\n      if (h !== o) {\n        h ^= o * 0xFFFFFFFF;\n      }\n      while (o > 0xFFFFFFFF) {\n        o /= 0xFFFFFFFF;\n        h ^= o;\n      }\n      return smi(h);\n    }\n    if (type === 'string') {\n      return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);\n    }\n    if (typeof o.hashCode === 'function') {\n      return o.hashCode();\n    }\n    if (type === 'object') {\n      return hashJSObj(o);\n    }\n    if (typeof o.toString === 'function') {\n      return hashString(o.toString());\n    }\n    throw new Error('Value type ' + type + ' cannot be hashed.');\n  }\n\n  function cachedHashString(string) {\n    var hash = stringHashCache[string];\n    if (hash === undefined) {\n      hash = hashString(string);\n      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {\n        STRING_HASH_CACHE_SIZE = 0;\n        stringHashCache = {};\n      }\n      STRING_HASH_CACHE_SIZE++;\n      stringHashCache[string] = hash;\n    }\n    return hash;\n  }\n\n  // http://jsperf.com/hashing-strings\n  function hashString(string) {\n    // This is the hash from JVM\n    // The hash code for a string is computed as\n    // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n    // where s[i] is the ith character of the string and n is the length of\n    // the string. We \"mod\" the result to make it between 0 (inclusive) and 2^31\n    // (exclusive) by dropping high bits.\n    var hash = 0;\n    for (var ii = 0; ii < string.length; ii++) {\n      hash = 31 * hash + string.charCodeAt(ii) | 0;\n    }\n    return smi(hash);\n  }\n\n  function hashJSObj(obj) {\n    var hash;\n    if (usingWeakMap) {\n      hash = weakMap.get(obj);\n      if (hash !== undefined) {\n        return hash;\n      }\n    }\n\n    hash = obj[UID_HASH_KEY];\n    if (hash !== undefined) {\n      return hash;\n    }\n\n    if (!canDefineProperty) {\n      hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];\n      if (hash !== undefined) {\n        return hash;\n      }\n\n      hash = getIENodeHash(obj);\n      if (hash !== undefined) {\n        return hash;\n      }\n    }\n\n    hash = ++objHashUID;\n    if (objHashUID & 0x40000000) {\n      objHashUID = 0;\n    }\n\n    if (usingWeakMap) {\n      weakMap.set(obj, hash);\n    } else if (isExtensible !== undefined && isExtensible(obj) === false) {\n      throw new Error('Non-extensible objects are not allowed as keys.');\n    } else if (canDefineProperty) {\n      Object.defineProperty(obj, UID_HASH_KEY, {\n        'enumerable': false,\n        'configurable': false,\n        'writable': false,\n        'value': hash\n      });\n    } else if (obj.propertyIsEnumerable !== undefined &&\n               obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {\n      // Since we can't define a non-enumerable property on the object\n      // we'll hijack one of the less-used non-enumerable properties to\n      // save our hash on it. Since this is a function it will not show up in\n      // `JSON.stringify` which is what we want.\n      obj.propertyIsEnumerable = function() {\n        return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);\n      };\n      obj.propertyIsEnumerable[UID_HASH_KEY] = hash;\n    } else if (obj.nodeType !== undefined) {\n      // At this point we couldn't get the IE `uniqueID` to use as a hash\n      // and we couldn't use a non-enumerable property to exploit the\n      // dontEnum bug so we simply add the `UID_HASH_KEY` on the node\n      // itself.\n      obj[UID_HASH_KEY] = hash;\n    } else {\n      throw new Error('Unable to set a non-enumerable property on object.');\n    }\n\n    return hash;\n  }\n\n  // Get references to ES5 object methods.\n  var isExtensible = Object.isExtensible;\n\n  // True if Object.defineProperty works as expected. IE8 fails this test.\n  var canDefineProperty = (function() {\n    try {\n      Object.defineProperty({}, '@', {});\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }());\n\n  // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it\n  // and avoid memory leaks from the IE cloneNode bug.\n  function getIENodeHash(node) {\n    if (node && node.nodeType > 0) {\n      switch (node.nodeType) {\n        case 1: // Element\n          return node.uniqueID;\n        case 9: // Document\n          return node.documentElement && node.documentElement.uniqueID;\n      }\n    }\n  }\n\n  // If possible, use a WeakMap.\n  var usingWeakMap = typeof WeakMap === 'function';\n  var weakMap;\n  if (usingWeakMap) {\n    weakMap = new WeakMap();\n  }\n\n  var objHashUID = 0;\n\n  var UID_HASH_KEY = '__immutablehash__';\n  if (typeof Symbol === 'function') {\n    UID_HASH_KEY = Symbol(UID_HASH_KEY);\n  }\n\n  var STRING_HASH_CACHE_MIN_STRLEN = 16;\n  var STRING_HASH_CACHE_MAX_SIZE = 255;\n  var STRING_HASH_CACHE_SIZE = 0;\n  var stringHashCache = {};\n\n  function assertNotInfinite(size) {\n    invariant(\n      size !== Infinity,\n      'Cannot perform this action with an infinite size.'\n    );\n  }\n\n  createClass(Map, KeyedCollection);\n\n    // @pragma Construction\n\n    function Map(value) {\n      return value === null || value === undefined ? emptyMap() :\n        isMap(value) && !isOrdered(value) ? value :\n        emptyMap().withMutations(function(map ) {\n          var iter = KeyedIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v, k)  {return map.set(k, v)});\n        });\n    }\n\n    Map.of = function() {var keyValues = SLICE$0.call(arguments, 0);\n      return emptyMap().withMutations(function(map ) {\n        for (var i = 0; i < keyValues.length; i += 2) {\n          if (i + 1 >= keyValues.length) {\n            throw new Error('Missing value for key: ' + keyValues[i]);\n          }\n          map.set(keyValues[i], keyValues[i + 1]);\n        }\n      });\n    };\n\n    Map.prototype.toString = function() {\n      return this.__toString('Map {', '}');\n    };\n\n    // @pragma Access\n\n    Map.prototype.get = function(k, notSetValue) {\n      return this._root ?\n        this._root.get(0, undefined, k, notSetValue) :\n        notSetValue;\n    };\n\n    // @pragma Modification\n\n    Map.prototype.set = function(k, v) {\n      return updateMap(this, k, v);\n    };\n\n    Map.prototype.setIn = function(keyPath, v) {\n      return this.updateIn(keyPath, NOT_SET, function()  {return v});\n    };\n\n    Map.prototype.remove = function(k) {\n      return updateMap(this, k, NOT_SET);\n    };\n\n    Map.prototype.deleteIn = function(keyPath) {\n      return this.updateIn(keyPath, function()  {return NOT_SET});\n    };\n\n    Map.prototype.update = function(k, notSetValue, updater) {\n      return arguments.length === 1 ?\n        k(this) :\n        this.updateIn([k], notSetValue, updater);\n    };\n\n    Map.prototype.updateIn = function(keyPath, notSetValue, updater) {\n      if (!updater) {\n        updater = notSetValue;\n        notSetValue = undefined;\n      }\n      var updatedValue = updateInDeepMap(\n        this,\n        forceIterator(keyPath),\n        notSetValue,\n        updater\n      );\n      return updatedValue === NOT_SET ? undefined : updatedValue;\n    };\n\n    Map.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._root = null;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyMap();\n    };\n\n    // @pragma Composition\n\n    Map.prototype.merge = function(/*...iters*/) {\n      return mergeIntoMapWith(this, undefined, arguments);\n    };\n\n    Map.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoMapWith(this, merger, iters);\n    };\n\n    Map.prototype.mergeIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n      return this.updateIn(\n        keyPath,\n        emptyMap(),\n        function(m ) {return typeof m.merge === 'function' ?\n          m.merge.apply(m, iters) :\n          iters[iters.length - 1]}\n      );\n    };\n\n    Map.prototype.mergeDeep = function(/*...iters*/) {\n      return mergeIntoMapWith(this, deepMerger, arguments);\n    };\n\n    Map.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoMapWith(this, deepMergerWith(merger), iters);\n    };\n\n    Map.prototype.mergeDeepIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n      return this.updateIn(\n        keyPath,\n        emptyMap(),\n        function(m ) {return typeof m.mergeDeep === 'function' ?\n          m.mergeDeep.apply(m, iters) :\n          iters[iters.length - 1]}\n      );\n    };\n\n    Map.prototype.sort = function(comparator) {\n      // Late binding\n      return OrderedMap(sortFactory(this, comparator));\n    };\n\n    Map.prototype.sortBy = function(mapper, comparator) {\n      // Late binding\n      return OrderedMap(sortFactory(this, comparator, mapper));\n    };\n\n    // @pragma Mutability\n\n    Map.prototype.withMutations = function(fn) {\n      var mutable = this.asMutable();\n      fn(mutable);\n      return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;\n    };\n\n    Map.prototype.asMutable = function() {\n      return this.__ownerID ? this : this.__ensureOwner(new OwnerID());\n    };\n\n    Map.prototype.asImmutable = function() {\n      return this.__ensureOwner();\n    };\n\n    Map.prototype.wasAltered = function() {\n      return this.__altered;\n    };\n\n    Map.prototype.__iterator = function(type, reverse) {\n      return new MapIterator(this, type, reverse);\n    };\n\n    Map.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      this._root && this._root.iterate(function(entry ) {\n        iterations++;\n        return fn(entry[1], entry[0], this$0);\n      }, reverse);\n      return iterations;\n    };\n\n    Map.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this.__altered = false;\n        return this;\n      }\n      return makeMap(this.size, this._root, ownerID, this.__hash);\n    };\n\n\n  function isMap(maybeMap) {\n    return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);\n  }\n\n  Map.isMap = isMap;\n\n  var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';\n\n  var MapPrototype = Map.prototype;\n  MapPrototype[IS_MAP_SENTINEL] = true;\n  MapPrototype[DELETE] = MapPrototype.remove;\n  MapPrototype.removeIn = MapPrototype.deleteIn;\n\n\n  // #pragma Trie Nodes\n\n\n\n    function ArrayMapNode(ownerID, entries) {\n      this.ownerID = ownerID;\n      this.entries = entries;\n    }\n\n    ArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      var entries = this.entries;\n      for (var ii = 0, len = entries.length; ii < len; ii++) {\n        if (is(key, entries[ii][0])) {\n          return entries[ii][1];\n        }\n      }\n      return notSetValue;\n    };\n\n    ArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      var removed = value === NOT_SET;\n\n      var entries = this.entries;\n      var idx = 0;\n      for (var len = entries.length; idx < len; idx++) {\n        if (is(key, entries[idx][0])) {\n          break;\n        }\n      }\n      var exists = idx < len;\n\n      if (exists ? entries[idx][1] === value : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n      (removed || !exists) && SetRef(didChangeSize);\n\n      if (removed && entries.length === 1) {\n        return; // undefined\n      }\n\n      if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {\n        return createNodes(ownerID, entries, key, value);\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newEntries = isEditable ? entries : arrCopy(entries);\n\n      if (exists) {\n        if (removed) {\n          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n        } else {\n          newEntries[idx] = [key, value];\n        }\n      } else {\n        newEntries.push([key, value]);\n      }\n\n      if (isEditable) {\n        this.entries = newEntries;\n        return this;\n      }\n\n      return new ArrayMapNode(ownerID, newEntries);\n    };\n\n\n\n\n    function BitmapIndexedNode(ownerID, bitmap, nodes) {\n      this.ownerID = ownerID;\n      this.bitmap = bitmap;\n      this.nodes = nodes;\n    }\n\n    BitmapIndexedNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var bit = (1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK));\n      var bitmap = this.bitmap;\n      return (bitmap & bit) === 0 ? notSetValue :\n        this.nodes[popCount(bitmap & (bit - 1))].get(shift + SHIFT, keyHash, key, notSetValue);\n    };\n\n    BitmapIndexedNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var bit = 1 << keyHashFrag;\n      var bitmap = this.bitmap;\n      var exists = (bitmap & bit) !== 0;\n\n      if (!exists && value === NOT_SET) {\n        return this;\n      }\n\n      var idx = popCount(bitmap & (bit - 1));\n      var nodes = this.nodes;\n      var node = exists ? nodes[idx] : undefined;\n      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n\n      if (newNode === node) {\n        return this;\n      }\n\n      if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {\n        return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);\n      }\n\n      if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {\n        return nodes[idx ^ 1];\n      }\n\n      if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {\n        return newNode;\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;\n      var newNodes = exists ? newNode ?\n        setIn(nodes, idx, newNode, isEditable) :\n        spliceOut(nodes, idx, isEditable) :\n        spliceIn(nodes, idx, newNode, isEditable);\n\n      if (isEditable) {\n        this.bitmap = newBitmap;\n        this.nodes = newNodes;\n        return this;\n      }\n\n      return new BitmapIndexedNode(ownerID, newBitmap, newNodes);\n    };\n\n\n\n\n    function HashArrayMapNode(ownerID, count, nodes) {\n      this.ownerID = ownerID;\n      this.count = count;\n      this.nodes = nodes;\n    }\n\n    HashArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var node = this.nodes[idx];\n      return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;\n    };\n\n    HashArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var removed = value === NOT_SET;\n      var nodes = this.nodes;\n      var node = nodes[idx];\n\n      if (removed && !node) {\n        return this;\n      }\n\n      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n      if (newNode === node) {\n        return this;\n      }\n\n      var newCount = this.count;\n      if (!node) {\n        newCount++;\n      } else if (!newNode) {\n        newCount--;\n        if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {\n          return packNodes(ownerID, nodes, newCount, idx);\n        }\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newNodes = setIn(nodes, idx, newNode, isEditable);\n\n      if (isEditable) {\n        this.count = newCount;\n        this.nodes = newNodes;\n        return this;\n      }\n\n      return new HashArrayMapNode(ownerID, newCount, newNodes);\n    };\n\n\n\n\n    function HashCollisionNode(ownerID, keyHash, entries) {\n      this.ownerID = ownerID;\n      this.keyHash = keyHash;\n      this.entries = entries;\n    }\n\n    HashCollisionNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      var entries = this.entries;\n      for (var ii = 0, len = entries.length; ii < len; ii++) {\n        if (is(key, entries[ii][0])) {\n          return entries[ii][1];\n        }\n      }\n      return notSetValue;\n    };\n\n    HashCollisionNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n\n      var removed = value === NOT_SET;\n\n      if (keyHash !== this.keyHash) {\n        if (removed) {\n          return this;\n        }\n        SetRef(didAlter);\n        SetRef(didChangeSize);\n        return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);\n      }\n\n      var entries = this.entries;\n      var idx = 0;\n      for (var len = entries.length; idx < len; idx++) {\n        if (is(key, entries[idx][0])) {\n          break;\n        }\n      }\n      var exists = idx < len;\n\n      if (exists ? entries[idx][1] === value : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n      (removed || !exists) && SetRef(didChangeSize);\n\n      if (removed && len === 2) {\n        return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newEntries = isEditable ? entries : arrCopy(entries);\n\n      if (exists) {\n        if (removed) {\n          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n        } else {\n          newEntries[idx] = [key, value];\n        }\n      } else {\n        newEntries.push([key, value]);\n      }\n\n      if (isEditable) {\n        this.entries = newEntries;\n        return this;\n      }\n\n      return new HashCollisionNode(ownerID, this.keyHash, newEntries);\n    };\n\n\n\n\n    function ValueNode(ownerID, keyHash, entry) {\n      this.ownerID = ownerID;\n      this.keyHash = keyHash;\n      this.entry = entry;\n    }\n\n    ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      return is(key, this.entry[0]) ? this.entry[1] : notSetValue;\n    };\n\n    ValueNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      var removed = value === NOT_SET;\n      var keyMatch = is(key, this.entry[0]);\n      if (keyMatch ? value === this.entry[1] : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n\n      if (removed) {\n        SetRef(didChangeSize);\n        return; // undefined\n      }\n\n      if (keyMatch) {\n        if (ownerID && ownerID === this.ownerID) {\n          this.entry[1] = value;\n          return this;\n        }\n        return new ValueNode(ownerID, this.keyHash, [key, value]);\n      }\n\n      SetRef(didChangeSize);\n      return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);\n    };\n\n\n\n  // #pragma Iterators\n\n  ArrayMapNode.prototype.iterate =\n  HashCollisionNode.prototype.iterate = function (fn, reverse) {\n    var entries = this.entries;\n    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {\n      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {\n        return false;\n      }\n    }\n  }\n\n  BitmapIndexedNode.prototype.iterate =\n  HashArrayMapNode.prototype.iterate = function (fn, reverse) {\n    var nodes = this.nodes;\n    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {\n      var node = nodes[reverse ? maxIndex - ii : ii];\n      if (node && node.iterate(fn, reverse) === false) {\n        return false;\n      }\n    }\n  }\n\n  ValueNode.prototype.iterate = function (fn, reverse) {\n    return fn(this.entry);\n  }\n\n  createClass(MapIterator, Iterator);\n\n    function MapIterator(map, type, reverse) {\n      this._type = type;\n      this._reverse = reverse;\n      this._stack = map._root && mapIteratorFrame(map._root);\n    }\n\n    MapIterator.prototype.next = function() {\n      var type = this._type;\n      var stack = this._stack;\n      while (stack) {\n        var node = stack.node;\n        var index = stack.index++;\n        var maxIndex;\n        if (node.entry) {\n          if (index === 0) {\n            return mapIteratorValue(type, node.entry);\n          }\n        } else if (node.entries) {\n          maxIndex = node.entries.length - 1;\n          if (index <= maxIndex) {\n            return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);\n          }\n        } else {\n          maxIndex = node.nodes.length - 1;\n          if (index <= maxIndex) {\n            var subNode = node.nodes[this._reverse ? maxIndex - index : index];\n            if (subNode) {\n              if (subNode.entry) {\n                return mapIteratorValue(type, subNode.entry);\n              }\n              stack = this._stack = mapIteratorFrame(subNode, stack);\n            }\n            continue;\n          }\n        }\n        stack = this._stack = this._stack.__prev;\n      }\n      return iteratorDone();\n    };\n\n\n  function mapIteratorValue(type, entry) {\n    return iteratorValue(type, entry[0], entry[1]);\n  }\n\n  function mapIteratorFrame(node, prev) {\n    return {\n      node: node,\n      index: 0,\n      __prev: prev\n    };\n  }\n\n  function makeMap(size, root, ownerID, hash) {\n    var map = Object.create(MapPrototype);\n    map.size = size;\n    map._root = root;\n    map.__ownerID = ownerID;\n    map.__hash = hash;\n    map.__altered = false;\n    return map;\n  }\n\n  var EMPTY_MAP;\n  function emptyMap() {\n    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));\n  }\n\n  function updateMap(map, k, v) {\n    var newRoot;\n    var newSize;\n    if (!map._root) {\n      if (v === NOT_SET) {\n        return map;\n      }\n      newSize = 1;\n      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);\n    } else {\n      var didChangeSize = MakeRef(CHANGE_LENGTH);\n      var didAlter = MakeRef(DID_ALTER);\n      newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);\n      if (!didAlter.value) {\n        return map;\n      }\n      newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);\n    }\n    if (map.__ownerID) {\n      map.size = newSize;\n      map._root = newRoot;\n      map.__hash = undefined;\n      map.__altered = true;\n      return map;\n    }\n    return newRoot ? makeMap(newSize, newRoot) : emptyMap();\n  }\n\n  function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n    if (!node) {\n      if (value === NOT_SET) {\n        return node;\n      }\n      SetRef(didAlter);\n      SetRef(didChangeSize);\n      return new ValueNode(ownerID, keyHash, [key, value]);\n    }\n    return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);\n  }\n\n  function isLeafNode(node) {\n    return node.constructor === ValueNode || node.constructor === HashCollisionNode;\n  }\n\n  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {\n    if (node.keyHash === keyHash) {\n      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);\n    }\n\n    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;\n    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\n    var newNode;\n    var nodes = idx1 === idx2 ?\n      [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] :\n      ((newNode = new ValueNode(ownerID, keyHash, entry)), idx1 < idx2 ? [node, newNode] : [newNode, node]);\n\n    return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);\n  }\n\n  function createNodes(ownerID, entries, key, value) {\n    if (!ownerID) {\n      ownerID = new OwnerID();\n    }\n    var node = new ValueNode(ownerID, hash(key), [key, value]);\n    for (var ii = 0; ii < entries.length; ii++) {\n      var entry = entries[ii];\n      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);\n    }\n    return node;\n  }\n\n  function packNodes(ownerID, nodes, count, excluding) {\n    var bitmap = 0;\n    var packedII = 0;\n    var packedNodes = new Array(count);\n    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {\n      var node = nodes[ii];\n      if (node !== undefined && ii !== excluding) {\n        bitmap |= bit;\n        packedNodes[packedII++] = node;\n      }\n    }\n    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);\n  }\n\n  function expandNodes(ownerID, nodes, bitmap, including, node) {\n    var count = 0;\n    var expandedNodes = new Array(SIZE);\n    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {\n      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;\n    }\n    expandedNodes[including] = node;\n    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);\n  }\n\n  function mergeIntoMapWith(map, merger, iterables) {\n    var iters = [];\n    for (var ii = 0; ii < iterables.length; ii++) {\n      var value = iterables[ii];\n      var iter = KeyedIterable(value);\n      if (!isIterable(value)) {\n        iter = iter.map(function(v ) {return fromJS(v)});\n      }\n      iters.push(iter);\n    }\n    return mergeIntoCollectionWith(map, merger, iters);\n  }\n\n  function deepMerger(existing, value, key) {\n    return existing && existing.mergeDeep && isIterable(value) ?\n      existing.mergeDeep(value) :\n      is(existing, value) ? existing : value;\n  }\n\n  function deepMergerWith(merger) {\n    return function(existing, value, key)  {\n      if (existing && existing.mergeDeepWith && isIterable(value)) {\n        return existing.mergeDeepWith(merger, value);\n      }\n      var nextValue = merger(existing, value, key);\n      return is(existing, nextValue) ? existing : nextValue;\n    };\n  }\n\n  function mergeIntoCollectionWith(collection, merger, iters) {\n    iters = iters.filter(function(x ) {return x.size !== 0});\n    if (iters.length === 0) {\n      return collection;\n    }\n    if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {\n      return collection.constructor(iters[0]);\n    }\n    return collection.withMutations(function(collection ) {\n      var mergeIntoMap = merger ?\n        function(value, key)  {\n          collection.update(key, NOT_SET, function(existing )\n            {return existing === NOT_SET ? value : merger(existing, value, key)}\n          );\n        } :\n        function(value, key)  {\n          collection.set(key, value);\n        }\n      for (var ii = 0; ii < iters.length; ii++) {\n        iters[ii].forEach(mergeIntoMap);\n      }\n    });\n  }\n\n  function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {\n    var isNotSet = existing === NOT_SET;\n    var step = keyPathIter.next();\n    if (step.done) {\n      var existingValue = isNotSet ? notSetValue : existing;\n      var newValue = updater(existingValue);\n      return newValue === existingValue ? existing : newValue;\n    }\n    invariant(\n      isNotSet || (existing && existing.set),\n      'invalid keyPath'\n    );\n    var key = step.value;\n    var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);\n    var nextUpdated = updateInDeepMap(\n      nextExisting,\n      keyPathIter,\n      notSetValue,\n      updater\n    );\n    return nextUpdated === nextExisting ? existing :\n      nextUpdated === NOT_SET ? existing.remove(key) :\n      (isNotSet ? emptyMap() : existing).set(key, nextUpdated);\n  }\n\n  function popCount(x) {\n    x = x - ((x >> 1) & 0x55555555);\n    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);\n    x = (x + (x >> 4)) & 0x0f0f0f0f;\n    x = x + (x >> 8);\n    x = x + (x >> 16);\n    return x & 0x7f;\n  }\n\n  function setIn(array, idx, val, canEdit) {\n    var newArray = canEdit ? array : arrCopy(array);\n    newArray[idx] = val;\n    return newArray;\n  }\n\n  function spliceIn(array, idx, val, canEdit) {\n    var newLen = array.length + 1;\n    if (canEdit && idx + 1 === newLen) {\n      array[idx] = val;\n      return array;\n    }\n    var newArray = new Array(newLen);\n    var after = 0;\n    for (var ii = 0; ii < newLen; ii++) {\n      if (ii === idx) {\n        newArray[ii] = val;\n        after = -1;\n      } else {\n        newArray[ii] = array[ii + after];\n      }\n    }\n    return newArray;\n  }\n\n  function spliceOut(array, idx, canEdit) {\n    var newLen = array.length - 1;\n    if (canEdit && idx === newLen) {\n      array.pop();\n      return array;\n    }\n    var newArray = new Array(newLen);\n    var after = 0;\n    for (var ii = 0; ii < newLen; ii++) {\n      if (ii === idx) {\n        after = 1;\n      }\n      newArray[ii] = array[ii + after];\n    }\n    return newArray;\n  }\n\n  var MAX_ARRAY_MAP_SIZE = SIZE / 4;\n  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;\n  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;\n\n  createClass(List, IndexedCollection);\n\n    // @pragma Construction\n\n    function List(value) {\n      var empty = emptyList();\n      if (value === null || value === undefined) {\n        return empty;\n      }\n      if (isList(value)) {\n        return value;\n      }\n      var iter = IndexedIterable(value);\n      var size = iter.size;\n      if (size === 0) {\n        return empty;\n      }\n      assertNotInfinite(size);\n      if (size > 0 && size < SIZE) {\n        return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));\n      }\n      return empty.withMutations(function(list ) {\n        list.setSize(size);\n        iter.forEach(function(v, i)  {return list.set(i, v)});\n      });\n    }\n\n    List.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    List.prototype.toString = function() {\n      return this.__toString('List [', ']');\n    };\n\n    // @pragma Access\n\n    List.prototype.get = function(index, notSetValue) {\n      index = wrapIndex(this, index);\n      if (index >= 0 && index < this.size) {\n        index += this._origin;\n        var node = listNodeFor(this, index);\n        return node && node.array[index & MASK];\n      }\n      return notSetValue;\n    };\n\n    // @pragma Modification\n\n    List.prototype.set = function(index, value) {\n      return updateList(this, index, value);\n    };\n\n    List.prototype.remove = function(index) {\n      return !this.has(index) ? this :\n        index === 0 ? this.shift() :\n        index === this.size - 1 ? this.pop() :\n        this.splice(index, 1);\n    };\n\n    List.prototype.insert = function(index, value) {\n      return this.splice(index, 0, value);\n    };\n\n    List.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = this._origin = this._capacity = 0;\n        this._level = SHIFT;\n        this._root = this._tail = null;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyList();\n    };\n\n    List.prototype.push = function(/*...values*/) {\n      var values = arguments;\n      var oldSize = this.size;\n      return this.withMutations(function(list ) {\n        setListBounds(list, 0, oldSize + values.length);\n        for (var ii = 0; ii < values.length; ii++) {\n          list.set(oldSize + ii, values[ii]);\n        }\n      });\n    };\n\n    List.prototype.pop = function() {\n      return setListBounds(this, 0, -1);\n    };\n\n    List.prototype.unshift = function(/*...values*/) {\n      var values = arguments;\n      return this.withMutations(function(list ) {\n        setListBounds(list, -values.length);\n        for (var ii = 0; ii < values.length; ii++) {\n          list.set(ii, values[ii]);\n        }\n      });\n    };\n\n    List.prototype.shift = function() {\n      return setListBounds(this, 1);\n    };\n\n    // @pragma Composition\n\n    List.prototype.merge = function(/*...iters*/) {\n      return mergeIntoListWith(this, undefined, arguments);\n    };\n\n    List.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoListWith(this, merger, iters);\n    };\n\n    List.prototype.mergeDeep = function(/*...iters*/) {\n      return mergeIntoListWith(this, deepMerger, arguments);\n    };\n\n    List.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoListWith(this, deepMergerWith(merger), iters);\n    };\n\n    List.prototype.setSize = function(size) {\n      return setListBounds(this, 0, size);\n    };\n\n    // @pragma Iteration\n\n    List.prototype.slice = function(begin, end) {\n      var size = this.size;\n      if (wholeSlice(begin, end, size)) {\n        return this;\n      }\n      return setListBounds(\n        this,\n        resolveBegin(begin, size),\n        resolveEnd(end, size)\n      );\n    };\n\n    List.prototype.__iterator = function(type, reverse) {\n      var index = 0;\n      var values = iterateList(this, reverse);\n      return new Iterator(function()  {\n        var value = values();\n        return value === DONE ?\n          iteratorDone() :\n          iteratorValue(type, index++, value);\n      });\n    };\n\n    List.prototype.__iterate = function(fn, reverse) {\n      var index = 0;\n      var values = iterateList(this, reverse);\n      var value;\n      while ((value = values()) !== DONE) {\n        if (fn(value, index++, this) === false) {\n          break;\n        }\n      }\n      return index;\n    };\n\n    List.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        return this;\n      }\n      return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);\n    };\n\n\n  function isList(maybeList) {\n    return !!(maybeList && maybeList[IS_LIST_SENTINEL]);\n  }\n\n  List.isList = isList;\n\n  var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';\n\n  var ListPrototype = List.prototype;\n  ListPrototype[IS_LIST_SENTINEL] = true;\n  ListPrototype[DELETE] = ListPrototype.remove;\n  ListPrototype.setIn = MapPrototype.setIn;\n  ListPrototype.deleteIn =\n  ListPrototype.removeIn = MapPrototype.removeIn;\n  ListPrototype.update = MapPrototype.update;\n  ListPrototype.updateIn = MapPrototype.updateIn;\n  ListPrototype.mergeIn = MapPrototype.mergeIn;\n  ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n  ListPrototype.withMutations = MapPrototype.withMutations;\n  ListPrototype.asMutable = MapPrototype.asMutable;\n  ListPrototype.asImmutable = MapPrototype.asImmutable;\n  ListPrototype.wasAltered = MapPrototype.wasAltered;\n\n\n\n    function VNode(array, ownerID) {\n      this.array = array;\n      this.ownerID = ownerID;\n    }\n\n    // TODO: seems like these methods are very similar\n\n    VNode.prototype.removeBefore = function(ownerID, level, index) {\n      if (index === level ? 1 << level : 0 || this.array.length === 0) {\n        return this;\n      }\n      var originIndex = (index >>> level) & MASK;\n      if (originIndex >= this.array.length) {\n        return new VNode([], ownerID);\n      }\n      var removingFirst = originIndex === 0;\n      var newChild;\n      if (level > 0) {\n        var oldChild = this.array[originIndex];\n        newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);\n        if (newChild === oldChild && removingFirst) {\n          return this;\n        }\n      }\n      if (removingFirst && !newChild) {\n        return this;\n      }\n      var editable = editableVNode(this, ownerID);\n      if (!removingFirst) {\n        for (var ii = 0; ii < originIndex; ii++) {\n          editable.array[ii] = undefined;\n        }\n      }\n      if (newChild) {\n        editable.array[originIndex] = newChild;\n      }\n      return editable;\n    };\n\n    VNode.prototype.removeAfter = function(ownerID, level, index) {\n      if (index === (level ? 1 << level : 0) || this.array.length === 0) {\n        return this;\n      }\n      var sizeIndex = ((index - 1) >>> level) & MASK;\n      if (sizeIndex >= this.array.length) {\n        return this;\n      }\n\n      var newChild;\n      if (level > 0) {\n        var oldChild = this.array[sizeIndex];\n        newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);\n        if (newChild === oldChild && sizeIndex === this.array.length - 1) {\n          return this;\n        }\n      }\n\n      var editable = editableVNode(this, ownerID);\n      editable.array.splice(sizeIndex + 1);\n      if (newChild) {\n        editable.array[sizeIndex] = newChild;\n      }\n      return editable;\n    };\n\n\n\n  var DONE = {};\n\n  function iterateList(list, reverse) {\n    var left = list._origin;\n    var right = list._capacity;\n    var tailPos = getTailOffset(right);\n    var tail = list._tail;\n\n    return iterateNodeOrLeaf(list._root, list._level, 0);\n\n    function iterateNodeOrLeaf(node, level, offset) {\n      return level === 0 ?\n        iterateLeaf(node, offset) :\n        iterateNode(node, level, offset);\n    }\n\n    function iterateLeaf(node, offset) {\n      var array = offset === tailPos ? tail && tail.array : node && node.array;\n      var from = offset > left ? 0 : left - offset;\n      var to = right - offset;\n      if (to > SIZE) {\n        to = SIZE;\n      }\n      return function()  {\n        if (from === to) {\n          return DONE;\n        }\n        var idx = reverse ? --to : from++;\n        return array && array[idx];\n      };\n    }\n\n    function iterateNode(node, level, offset) {\n      var values;\n      var array = node && node.array;\n      var from = offset > left ? 0 : (left - offset) >> level;\n      var to = ((right - offset) >> level) + 1;\n      if (to > SIZE) {\n        to = SIZE;\n      }\n      return function()  {\n        do {\n          if (values) {\n            var value = values();\n            if (value !== DONE) {\n              return value;\n            }\n            values = null;\n          }\n          if (from === to) {\n            return DONE;\n          }\n          var idx = reverse ? --to : from++;\n          values = iterateNodeOrLeaf(\n            array && array[idx], level - SHIFT, offset + (idx << level)\n          );\n        } while (true);\n      };\n    }\n  }\n\n  function makeList(origin, capacity, level, root, tail, ownerID, hash) {\n    var list = Object.create(ListPrototype);\n    list.size = capacity - origin;\n    list._origin = origin;\n    list._capacity = capacity;\n    list._level = level;\n    list._root = root;\n    list._tail = tail;\n    list.__ownerID = ownerID;\n    list.__hash = hash;\n    list.__altered = false;\n    return list;\n  }\n\n  var EMPTY_LIST;\n  function emptyList() {\n    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));\n  }\n\n  function updateList(list, index, value) {\n    index = wrapIndex(list, index);\n\n    if (index !== index) {\n      return list;\n    }\n\n    if (index >= list.size || index < 0) {\n      return list.withMutations(function(list ) {\n        index < 0 ?\n          setListBounds(list, index).set(0, value) :\n          setListBounds(list, 0, index + 1).set(index, value)\n      });\n    }\n\n    index += list._origin;\n\n    var newTail = list._tail;\n    var newRoot = list._root;\n    var didAlter = MakeRef(DID_ALTER);\n    if (index >= getTailOffset(list._capacity)) {\n      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);\n    } else {\n      newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);\n    }\n\n    if (!didAlter.value) {\n      return list;\n    }\n\n    if (list.__ownerID) {\n      list._root = newRoot;\n      list._tail = newTail;\n      list.__hash = undefined;\n      list.__altered = true;\n      return list;\n    }\n    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);\n  }\n\n  function updateVNode(node, ownerID, level, index, value, didAlter) {\n    var idx = (index >>> level) & MASK;\n    var nodeHas = node && idx < node.array.length;\n    if (!nodeHas && value === undefined) {\n      return node;\n    }\n\n    var newNode;\n\n    if (level > 0) {\n      var lowerNode = node && node.array[idx];\n      var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);\n      if (newLowerNode === lowerNode) {\n        return node;\n      }\n      newNode = editableVNode(node, ownerID);\n      newNode.array[idx] = newLowerNode;\n      return newNode;\n    }\n\n    if (nodeHas && node.array[idx] === value) {\n      return node;\n    }\n\n    SetRef(didAlter);\n\n    newNode = editableVNode(node, ownerID);\n    if (value === undefined && idx === newNode.array.length - 1) {\n      newNode.array.pop();\n    } else {\n      newNode.array[idx] = value;\n    }\n    return newNode;\n  }\n\n  function editableVNode(node, ownerID) {\n    if (ownerID && node && ownerID === node.ownerID) {\n      return node;\n    }\n    return new VNode(node ? node.array.slice() : [], ownerID);\n  }\n\n  function listNodeFor(list, rawIndex) {\n    if (rawIndex >= getTailOffset(list._capacity)) {\n      return list._tail;\n    }\n    if (rawIndex < 1 << (list._level + SHIFT)) {\n      var node = list._root;\n      var level = list._level;\n      while (node && level > 0) {\n        node = node.array[(rawIndex >>> level) & MASK];\n        level -= SHIFT;\n      }\n      return node;\n    }\n  }\n\n  function setListBounds(list, begin, end) {\n    // Sanitize begin & end using this shorthand for ToInt32(argument)\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n    if (begin !== undefined) {\n      begin = begin | 0;\n    }\n    if (end !== undefined) {\n      end = end | 0;\n    }\n    var owner = list.__ownerID || new OwnerID();\n    var oldOrigin = list._origin;\n    var oldCapacity = list._capacity;\n    var newOrigin = oldOrigin + begin;\n    var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;\n    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {\n      return list;\n    }\n\n    // If it's going to end after it starts, it's empty.\n    if (newOrigin >= newCapacity) {\n      return list.clear();\n    }\n\n    var newLevel = list._level;\n    var newRoot = list._root;\n\n    // New origin might need creating a higher root.\n    var offsetShift = 0;\n    while (newOrigin + offsetShift < 0) {\n      newRoot = new VNode(newRoot && newRoot.array.length ? [undefined, newRoot] : [], owner);\n      newLevel += SHIFT;\n      offsetShift += 1 << newLevel;\n    }\n    if (offsetShift) {\n      newOrigin += offsetShift;\n      oldOrigin += offsetShift;\n      newCapacity += offsetShift;\n      oldCapacity += offsetShift;\n    }\n\n    var oldTailOffset = getTailOffset(oldCapacity);\n    var newTailOffset = getTailOffset(newCapacity);\n\n    // New size might need creating a higher root.\n    while (newTailOffset >= 1 << (newLevel + SHIFT)) {\n      newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);\n      newLevel += SHIFT;\n    }\n\n    // Locate or create the new tail.\n    var oldTail = list._tail;\n    var newTail = newTailOffset < oldTailOffset ?\n      listNodeFor(list, newCapacity - 1) :\n      newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;\n\n    // Merge Tail into tree.\n    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {\n      newRoot = editableVNode(newRoot, owner);\n      var node = newRoot;\n      for (var level = newLevel; level > SHIFT; level -= SHIFT) {\n        var idx = (oldTailOffset >>> level) & MASK;\n        node = node.array[idx] = editableVNode(node.array[idx], owner);\n      }\n      node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;\n    }\n\n    // If the size has been reduced, there's a chance the tail needs to be trimmed.\n    if (newCapacity < oldCapacity) {\n      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);\n    }\n\n    // If the new origin is within the tail, then we do not need a root.\n    if (newOrigin >= newTailOffset) {\n      newOrigin -= newTailOffset;\n      newCapacity -= newTailOffset;\n      newLevel = SHIFT;\n      newRoot = null;\n      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);\n\n    // Otherwise, if the root has been trimmed, garbage collect.\n    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {\n      offsetShift = 0;\n\n      // Identify the new top root node of the subtree of the old root.\n      while (newRoot) {\n        var beginIndex = (newOrigin >>> newLevel) & MASK;\n        if (beginIndex !== (newTailOffset >>> newLevel) & MASK) {\n          break;\n        }\n        if (beginIndex) {\n          offsetShift += (1 << newLevel) * beginIndex;\n        }\n        newLevel -= SHIFT;\n        newRoot = newRoot.array[beginIndex];\n      }\n\n      // Trim the new sides of the new root.\n      if (newRoot && newOrigin > oldOrigin) {\n        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);\n      }\n      if (newRoot && newTailOffset < oldTailOffset) {\n        newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);\n      }\n      if (offsetShift) {\n        newOrigin -= offsetShift;\n        newCapacity -= offsetShift;\n      }\n    }\n\n    if (list.__ownerID) {\n      list.size = newCapacity - newOrigin;\n      list._origin = newOrigin;\n      list._capacity = newCapacity;\n      list._level = newLevel;\n      list._root = newRoot;\n      list._tail = newTail;\n      list.__hash = undefined;\n      list.__altered = true;\n      return list;\n    }\n    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);\n  }\n\n  function mergeIntoListWith(list, merger, iterables) {\n    var iters = [];\n    var maxSize = 0;\n    for (var ii = 0; ii < iterables.length; ii++) {\n      var value = iterables[ii];\n      var iter = IndexedIterable(value);\n      if (iter.size > maxSize) {\n        maxSize = iter.size;\n      }\n      if (!isIterable(value)) {\n        iter = iter.map(function(v ) {return fromJS(v)});\n      }\n      iters.push(iter);\n    }\n    if (maxSize > list.size) {\n      list = list.setSize(maxSize);\n    }\n    return mergeIntoCollectionWith(list, merger, iters);\n  }\n\n  function getTailOffset(size) {\n    return size < SIZE ? 0 : (((size - 1) >>> SHIFT) << SHIFT);\n  }\n\n  createClass(OrderedMap, Map);\n\n    // @pragma Construction\n\n    function OrderedMap(value) {\n      return value === null || value === undefined ? emptyOrderedMap() :\n        isOrderedMap(value) ? value :\n        emptyOrderedMap().withMutations(function(map ) {\n          var iter = KeyedIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v, k)  {return map.set(k, v)});\n        });\n    }\n\n    OrderedMap.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    OrderedMap.prototype.toString = function() {\n      return this.__toString('OrderedMap {', '}');\n    };\n\n    // @pragma Access\n\n    OrderedMap.prototype.get = function(k, notSetValue) {\n      var index = this._map.get(k);\n      return index !== undefined ? this._list.get(index)[1] : notSetValue;\n    };\n\n    // @pragma Modification\n\n    OrderedMap.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._map.clear();\n        this._list.clear();\n        return this;\n      }\n      return emptyOrderedMap();\n    };\n\n    OrderedMap.prototype.set = function(k, v) {\n      return updateOrderedMap(this, k, v);\n    };\n\n    OrderedMap.prototype.remove = function(k) {\n      return updateOrderedMap(this, k, NOT_SET);\n    };\n\n    OrderedMap.prototype.wasAltered = function() {\n      return this._map.wasAltered() || this._list.wasAltered();\n    };\n\n    OrderedMap.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._list.__iterate(\n        function(entry ) {return entry && fn(entry[1], entry[0], this$0)},\n        reverse\n      );\n    };\n\n    OrderedMap.prototype.__iterator = function(type, reverse) {\n      return this._list.fromEntrySeq().__iterator(type, reverse);\n    };\n\n    OrderedMap.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map.__ensureOwner(ownerID);\n      var newList = this._list.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        this._list = newList;\n        return this;\n      }\n      return makeOrderedMap(newMap, newList, ownerID, this.__hash);\n    };\n\n\n  function isOrderedMap(maybeOrderedMap) {\n    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);\n  }\n\n  OrderedMap.isOrderedMap = isOrderedMap;\n\n  OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;\n  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;\n\n\n\n  function makeOrderedMap(map, list, ownerID, hash) {\n    var omap = Object.create(OrderedMap.prototype);\n    omap.size = map ? map.size : 0;\n    omap._map = map;\n    omap._list = list;\n    omap.__ownerID = ownerID;\n    omap.__hash = hash;\n    return omap;\n  }\n\n  var EMPTY_ORDERED_MAP;\n  function emptyOrderedMap() {\n    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));\n  }\n\n  function updateOrderedMap(omap, k, v) {\n    var map = omap._map;\n    var list = omap._list;\n    var i = map.get(k);\n    var has = i !== undefined;\n    var newMap;\n    var newList;\n    if (v === NOT_SET) { // removed\n      if (!has) {\n        return omap;\n      }\n      if (list.size >= SIZE && list.size >= map.size * 2) {\n        newList = list.filter(function(entry, idx)  {return entry !== undefined && i !== idx});\n        newMap = newList.toKeyedSeq().map(function(entry ) {return entry[0]}).flip().toMap();\n        if (omap.__ownerID) {\n          newMap.__ownerID = newList.__ownerID = omap.__ownerID;\n        }\n      } else {\n        newMap = map.remove(k);\n        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);\n      }\n    } else {\n      if (has) {\n        if (v === list.get(i)[1]) {\n          return omap;\n        }\n        newMap = map;\n        newList = list.set(i, [k, v]);\n      } else {\n        newMap = map.set(k, list.size);\n        newList = list.set(list.size, [k, v]);\n      }\n    }\n    if (omap.__ownerID) {\n      omap.size = newMap.size;\n      omap._map = newMap;\n      omap._list = newList;\n      omap.__hash = undefined;\n      return omap;\n    }\n    return makeOrderedMap(newMap, newList);\n  }\n\n  createClass(ToKeyedSequence, KeyedSeq);\n    function ToKeyedSequence(indexed, useKeys) {\n      this._iter = indexed;\n      this._useKeys = useKeys;\n      this.size = indexed.size;\n    }\n\n    ToKeyedSequence.prototype.get = function(key, notSetValue) {\n      return this._iter.get(key, notSetValue);\n    };\n\n    ToKeyedSequence.prototype.has = function(key) {\n      return this._iter.has(key);\n    };\n\n    ToKeyedSequence.prototype.valueSeq = function() {\n      return this._iter.valueSeq();\n    };\n\n    ToKeyedSequence.prototype.reverse = function() {var this$0 = this;\n      var reversedSequence = reverseFactory(this, true);\n      if (!this._useKeys) {\n        reversedSequence.valueSeq = function()  {return this$0._iter.toSeq().reverse()};\n      }\n      return reversedSequence;\n    };\n\n    ToKeyedSequence.prototype.map = function(mapper, context) {var this$0 = this;\n      var mappedSequence = mapFactory(this, mapper, context);\n      if (!this._useKeys) {\n        mappedSequence.valueSeq = function()  {return this$0._iter.toSeq().map(mapper, context)};\n      }\n      return mappedSequence;\n    };\n\n    ToKeyedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var ii;\n      return this._iter.__iterate(\n        this._useKeys ?\n          function(v, k)  {return fn(v, k, this$0)} :\n          ((ii = reverse ? resolveSize(this) : 0),\n            function(v ) {return fn(v, reverse ? --ii : ii++, this$0)}),\n        reverse\n      );\n    };\n\n    ToKeyedSequence.prototype.__iterator = function(type, reverse) {\n      if (this._useKeys) {\n        return this._iter.__iterator(type, reverse);\n      }\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      var ii = reverse ? resolveSize(this) : 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, reverse ? --ii : ii++, step.value, step);\n      });\n    };\n\n  ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n  createClass(ToIndexedSequence, IndexedSeq);\n    function ToIndexedSequence(iter) {\n      this._iter = iter;\n      this.size = iter.size;\n    }\n\n    ToIndexedSequence.prototype.includes = function(value) {\n      return this._iter.includes(value);\n    };\n\n    ToIndexedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      return this._iter.__iterate(function(v ) {return fn(v, iterations++, this$0)}, reverse);\n    };\n\n    ToIndexedSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, iterations++, step.value, step)\n      });\n    };\n\n\n\n  createClass(ToSetSequence, SetSeq);\n    function ToSetSequence(iter) {\n      this._iter = iter;\n      this.size = iter.size;\n    }\n\n    ToSetSequence.prototype.has = function(key) {\n      return this._iter.includes(key);\n    };\n\n    ToSetSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._iter.__iterate(function(v ) {return fn(v, v, this$0)}, reverse);\n    };\n\n    ToSetSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, step.value, step.value, step);\n      });\n    };\n\n\n\n  createClass(FromEntriesSequence, KeyedSeq);\n    function FromEntriesSequence(entries) {\n      this._iter = entries;\n      this.size = entries.size;\n    }\n\n    FromEntriesSequence.prototype.entrySeq = function() {\n      return this._iter.toSeq();\n    };\n\n    FromEntriesSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._iter.__iterate(function(entry ) {\n        // Check if entry exists first so array access doesn't throw for holes\n        // in the parent iteration.\n        if (entry) {\n          validateEntry(entry);\n          var indexedIterable = isIterable(entry);\n          return fn(\n            indexedIterable ? entry.get(1) : entry[1],\n            indexedIterable ? entry.get(0) : entry[0],\n            this$0\n          );\n        }\n      }, reverse);\n    };\n\n    FromEntriesSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      return new Iterator(function()  {\n        while (true) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          var entry = step.value;\n          // Check if entry exists first so array access doesn't throw for holes\n          // in the parent iteration.\n          if (entry) {\n            validateEntry(entry);\n            var indexedIterable = isIterable(entry);\n            return iteratorValue(\n              type,\n              indexedIterable ? entry.get(0) : entry[0],\n              indexedIterable ? entry.get(1) : entry[1],\n              step\n            );\n          }\n        }\n      });\n    };\n\n\n  ToIndexedSequence.prototype.cacheResult =\n  ToKeyedSequence.prototype.cacheResult =\n  ToSetSequence.prototype.cacheResult =\n  FromEntriesSequence.prototype.cacheResult =\n    cacheResultThrough;\n\n\n  function flipFactory(iterable) {\n    var flipSequence = makeSequence(iterable);\n    flipSequence._iter = iterable;\n    flipSequence.size = iterable.size;\n    flipSequence.flip = function()  {return iterable};\n    flipSequence.reverse = function () {\n      var reversedSequence = iterable.reverse.apply(this); // super.reverse()\n      reversedSequence.flip = function()  {return iterable.reverse()};\n      return reversedSequence;\n    };\n    flipSequence.has = function(key ) {return iterable.includes(key)};\n    flipSequence.includes = function(key ) {return iterable.has(key)};\n    flipSequence.cacheResult = cacheResultThrough;\n    flipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(function(v, k)  {return fn(k, v, this$0) !== false}, reverse);\n    }\n    flipSequence.__iteratorUncached = function(type, reverse) {\n      if (type === ITERATE_ENTRIES) {\n        var iterator = iterable.__iterator(type, reverse);\n        return new Iterator(function()  {\n          var step = iterator.next();\n          if (!step.done) {\n            var k = step.value[0];\n            step.value[0] = step.value[1];\n            step.value[1] = k;\n          }\n          return step;\n        });\n      }\n      return iterable.__iterator(\n        type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,\n        reverse\n      );\n    }\n    return flipSequence;\n  }\n\n\n  function mapFactory(iterable, mapper, context) {\n    var mappedSequence = makeSequence(iterable);\n    mappedSequence.size = iterable.size;\n    mappedSequence.has = function(key ) {return iterable.has(key)};\n    mappedSequence.get = function(key, notSetValue)  {\n      var v = iterable.get(key, NOT_SET);\n      return v === NOT_SET ?\n        notSetValue :\n        mapper.call(context, v, key, iterable);\n    };\n    mappedSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(\n        function(v, k, c)  {return fn(mapper.call(context, v, k, c), k, this$0) !== false},\n        reverse\n      );\n    }\n    mappedSequence.__iteratorUncached = function (type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      return new Iterator(function()  {\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var key = entry[0];\n        return iteratorValue(\n          type,\n          key,\n          mapper.call(context, entry[1], key, iterable),\n          step\n        );\n      });\n    }\n    return mappedSequence;\n  }\n\n\n  function reverseFactory(iterable, useKeys) {\n    var reversedSequence = makeSequence(iterable);\n    reversedSequence._iter = iterable;\n    reversedSequence.size = iterable.size;\n    reversedSequence.reverse = function()  {return iterable};\n    if (iterable.flip) {\n      reversedSequence.flip = function () {\n        var flipSequence = flipFactory(iterable);\n        flipSequence.reverse = function()  {return iterable.flip()};\n        return flipSequence;\n      };\n    }\n    reversedSequence.get = function(key, notSetValue) \n      {return iterable.get(useKeys ? key : -1 - key, notSetValue)};\n    reversedSequence.has = function(key )\n      {return iterable.has(useKeys ? key : -1 - key)};\n    reversedSequence.includes = function(value ) {return iterable.includes(value)};\n    reversedSequence.cacheResult = cacheResultThrough;\n    reversedSequence.__iterate = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(function(v, k)  {return fn(v, k, this$0)}, !reverse);\n    };\n    reversedSequence.__iterator =\n      function(type, reverse)  {return iterable.__iterator(type, !reverse)};\n    return reversedSequence;\n  }\n\n\n  function filterFactory(iterable, predicate, context, useKeys) {\n    var filterSequence = makeSequence(iterable);\n    if (useKeys) {\n      filterSequence.has = function(key ) {\n        var v = iterable.get(key, NOT_SET);\n        return v !== NOT_SET && !!predicate.call(context, v, key, iterable);\n      };\n      filterSequence.get = function(key, notSetValue)  {\n        var v = iterable.get(key, NOT_SET);\n        return v !== NOT_SET && predicate.call(context, v, key, iterable) ?\n          v : notSetValue;\n      };\n    }\n    filterSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c)  {\n        if (predicate.call(context, v, k, c)) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0);\n        }\n      }, reverse);\n      return iterations;\n    };\n    filterSequence.__iteratorUncached = function (type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (true) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          var entry = step.value;\n          var key = entry[0];\n          var value = entry[1];\n          if (predicate.call(context, value, key, iterable)) {\n            return iteratorValue(type, useKeys ? key : iterations++, value, step);\n          }\n        }\n      });\n    }\n    return filterSequence;\n  }\n\n\n  function countByFactory(iterable, grouper, context) {\n    var groups = Map().asMutable();\n    iterable.__iterate(function(v, k)  {\n      groups.update(\n        grouper.call(context, v, k, iterable),\n        0,\n        function(a ) {return a + 1}\n      );\n    });\n    return groups.asImmutable();\n  }\n\n\n  function groupByFactory(iterable, grouper, context) {\n    var isKeyedIter = isKeyed(iterable);\n    var groups = (isOrdered(iterable) ? OrderedMap() : Map()).asMutable();\n    iterable.__iterate(function(v, k)  {\n      groups.update(\n        grouper.call(context, v, k, iterable),\n        function(a ) {return (a = a || [], a.push(isKeyedIter ? [k, v] : v), a)}\n      );\n    });\n    var coerce = iterableClass(iterable);\n    return groups.map(function(arr ) {return reify(iterable, coerce(arr))});\n  }\n\n\n  function sliceFactory(iterable, begin, end, useKeys) {\n    var originalSize = iterable.size;\n\n    // Sanitize begin & end using this shorthand for ToInt32(argument)\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n    if (begin !== undefined) {\n      begin = begin | 0;\n    }\n    if (end !== undefined) {\n      if (end === Infinity) {\n        end = originalSize;\n      } else {\n        end = end | 0;\n      }\n    }\n\n    if (wholeSlice(begin, end, originalSize)) {\n      return iterable;\n    }\n\n    var resolvedBegin = resolveBegin(begin, originalSize);\n    var resolvedEnd = resolveEnd(end, originalSize);\n\n    // begin or end will be NaN if they were provided as negative numbers and\n    // this iterable's size is unknown. In that case, cache first so there is\n    // a known size and these do not resolve to NaN.\n    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {\n      return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);\n    }\n\n    // Note: resolvedEnd is undefined when the original sequence's length is\n    // unknown and this slice did not supply an end and should contain all\n    // elements after resolvedBegin.\n    // In that case, resolvedSize will be NaN and sliceSize will remain undefined.\n    var resolvedSize = resolvedEnd - resolvedBegin;\n    var sliceSize;\n    if (resolvedSize === resolvedSize) {\n      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;\n    }\n\n    var sliceSeq = makeSequence(iterable);\n\n    // If iterable.size is undefined, the size of the realized sliceSeq is\n    // unknown at this point unless the number of items to slice is 0\n    sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;\n\n    if (!useKeys && isSeq(iterable) && sliceSize >= 0) {\n      sliceSeq.get = function (index, notSetValue) {\n        index = wrapIndex(this, index);\n        return index >= 0 && index < sliceSize ?\n          iterable.get(index + resolvedBegin, notSetValue) :\n          notSetValue;\n      }\n    }\n\n    sliceSeq.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      if (sliceSize === 0) {\n        return 0;\n      }\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var skipped = 0;\n      var isSkipping = true;\n      var iterations = 0;\n      iterable.__iterate(function(v, k)  {\n        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0) !== false &&\n                 iterations !== sliceSize;\n        }\n      });\n      return iterations;\n    };\n\n    sliceSeq.__iteratorUncached = function(type, reverse) {\n      if (sliceSize !== 0 && reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      // Don't bother instantiating parent iterator if taking 0.\n      var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);\n      var skipped = 0;\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (skipped++ < resolvedBegin) {\n          iterator.next();\n        }\n        if (++iterations > sliceSize) {\n          return iteratorDone();\n        }\n        var step = iterator.next();\n        if (useKeys || type === ITERATE_VALUES) {\n          return step;\n        } else if (type === ITERATE_KEYS) {\n          return iteratorValue(type, iterations - 1, undefined, step);\n        } else {\n          return iteratorValue(type, iterations - 1, step.value[1], step);\n        }\n      });\n    }\n\n    return sliceSeq;\n  }\n\n\n  function takeWhileFactory(iterable, predicate, context) {\n    var takeSequence = makeSequence(iterable);\n    takeSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c) \n        {return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0)}\n      );\n      return iterations;\n    };\n    takeSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var iterating = true;\n      return new Iterator(function()  {\n        if (!iterating) {\n          return iteratorDone();\n        }\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var k = entry[0];\n        var v = entry[1];\n        if (!predicate.call(context, v, k, this$0)) {\n          iterating = false;\n          return iteratorDone();\n        }\n        return type === ITERATE_ENTRIES ? step :\n          iteratorValue(type, k, v, step);\n      });\n    };\n    return takeSequence;\n  }\n\n\n  function skipWhileFactory(iterable, predicate, context, useKeys) {\n    var skipSequence = makeSequence(iterable);\n    skipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var isSkipping = true;\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c)  {\n        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0);\n        }\n      });\n      return iterations;\n    };\n    skipSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var skipping = true;\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step, k, v;\n        do {\n          step = iterator.next();\n          if (step.done) {\n            if (useKeys || type === ITERATE_VALUES) {\n              return step;\n            } else if (type === ITERATE_KEYS) {\n              return iteratorValue(type, iterations++, undefined, step);\n            } else {\n              return iteratorValue(type, iterations++, step.value[1], step);\n            }\n          }\n          var entry = step.value;\n          k = entry[0];\n          v = entry[1];\n          skipping && (skipping = predicate.call(context, v, k, this$0));\n        } while (skipping);\n        return type === ITERATE_ENTRIES ? step :\n          iteratorValue(type, k, v, step);\n      });\n    };\n    return skipSequence;\n  }\n\n\n  function concatFactory(iterable, values) {\n    var isKeyedIterable = isKeyed(iterable);\n    var iters = [iterable].concat(values).map(function(v ) {\n      if (!isIterable(v)) {\n        v = isKeyedIterable ?\n          keyedSeqFromValue(v) :\n          indexedSeqFromValue(Array.isArray(v) ? v : [v]);\n      } else if (isKeyedIterable) {\n        v = KeyedIterable(v);\n      }\n      return v;\n    }).filter(function(v ) {return v.size !== 0});\n\n    if (iters.length === 0) {\n      return iterable;\n    }\n\n    if (iters.length === 1) {\n      var singleton = iters[0];\n      if (singleton === iterable ||\n          isKeyedIterable && isKeyed(singleton) ||\n          isIndexed(iterable) && isIndexed(singleton)) {\n        return singleton;\n      }\n    }\n\n    var concatSeq = new ArraySeq(iters);\n    if (isKeyedIterable) {\n      concatSeq = concatSeq.toKeyedSeq();\n    } else if (!isIndexed(iterable)) {\n      concatSeq = concatSeq.toSetSeq();\n    }\n    concatSeq = concatSeq.flatten(true);\n    concatSeq.size = iters.reduce(\n      function(sum, seq)  {\n        if (sum !== undefined) {\n          var size = seq.size;\n          if (size !== undefined) {\n            return sum + size;\n          }\n        }\n      },\n      0\n    );\n    return concatSeq;\n  }\n\n\n  function flattenFactory(iterable, depth, useKeys) {\n    var flatSequence = makeSequence(iterable);\n    flatSequence.__iterateUncached = function(fn, reverse) {\n      var iterations = 0;\n      var stopped = false;\n      function flatDeep(iter, currentDepth) {var this$0 = this;\n        iter.__iterate(function(v, k)  {\n          if ((!depth || currentDepth < depth) && isIterable(v)) {\n            flatDeep(v, currentDepth + 1);\n          } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {\n            stopped = true;\n          }\n          return !stopped;\n        }, reverse);\n      }\n      flatDeep(iterable, 0);\n      return iterations;\n    }\n    flatSequence.__iteratorUncached = function(type, reverse) {\n      var iterator = iterable.__iterator(type, reverse);\n      var stack = [];\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (iterator) {\n          var step = iterator.next();\n          if (step.done !== false) {\n            iterator = stack.pop();\n            continue;\n          }\n          var v = step.value;\n          if (type === ITERATE_ENTRIES) {\n            v = v[1];\n          }\n          if ((!depth || stack.length < depth) && isIterable(v)) {\n            stack.push(iterator);\n            iterator = v.__iterator(type, reverse);\n          } else {\n            return useKeys ? step : iteratorValue(type, iterations++, v, step);\n          }\n        }\n        return iteratorDone();\n      });\n    }\n    return flatSequence;\n  }\n\n\n  function flatMapFactory(iterable, mapper, context) {\n    var coerce = iterableClass(iterable);\n    return iterable.toSeq().map(\n      function(v, k)  {return coerce(mapper.call(context, v, k, iterable))}\n    ).flatten(true);\n  }\n\n\n  function interposeFactory(iterable, separator) {\n    var interposedSequence = makeSequence(iterable);\n    interposedSequence.size = iterable.size && iterable.size * 2 -1;\n    interposedSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      iterable.__iterate(function(v, k) \n        {return (!iterations || fn(separator, iterations++, this$0) !== false) &&\n        fn(v, iterations++, this$0) !== false},\n        reverse\n      );\n      return iterations;\n    };\n    interposedSequence.__iteratorUncached = function(type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_VALUES, reverse);\n      var iterations = 0;\n      var step;\n      return new Iterator(function()  {\n        if (!step || iterations % 2) {\n          step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n        }\n        return iterations % 2 ?\n          iteratorValue(type, iterations++, separator) :\n          iteratorValue(type, iterations++, step.value, step);\n      });\n    };\n    return interposedSequence;\n  }\n\n\n  function sortFactory(iterable, comparator, mapper) {\n    if (!comparator) {\n      comparator = defaultComparator;\n    }\n    var isKeyedIterable = isKeyed(iterable);\n    var index = 0;\n    var entries = iterable.toSeq().map(\n      function(v, k)  {return [k, v, index++, mapper ? mapper(v, k, iterable) : v]}\n    ).toArray();\n    entries.sort(function(a, b)  {return comparator(a[3], b[3]) || a[2] - b[2]}).forEach(\n      isKeyedIterable ?\n      function(v, i)  { entries[i].length = 2; } :\n      function(v, i)  { entries[i] = v[1]; }\n    );\n    return isKeyedIterable ? KeyedSeq(entries) :\n      isIndexed(iterable) ? IndexedSeq(entries) :\n      SetSeq(entries);\n  }\n\n\n  function maxFactory(iterable, comparator, mapper) {\n    if (!comparator) {\n      comparator = defaultComparator;\n    }\n    if (mapper) {\n      var entry = iterable.toSeq()\n        .map(function(v, k)  {return [v, mapper(v, k, iterable)]})\n        .reduce(function(a, b)  {return maxCompare(comparator, a[1], b[1]) ? b : a});\n      return entry && entry[0];\n    } else {\n      return iterable.reduce(function(a, b)  {return maxCompare(comparator, a, b) ? b : a});\n    }\n  }\n\n  function maxCompare(comparator, a, b) {\n    var comp = comparator(b, a);\n    // b is considered the new max if the comparator declares them equal, but\n    // they are not equal and b is in fact a nullish value.\n    return (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) || comp > 0;\n  }\n\n\n  function zipWithFactory(keyIter, zipper, iters) {\n    var zipSequence = makeSequence(keyIter);\n    zipSequence.size = new ArraySeq(iters).map(function(i ) {return i.size}).min();\n    // Note: this a generic base implementation of __iterate in terms of\n    // __iterator which may be more generically useful in the future.\n    zipSequence.__iterate = function(fn, reverse) {\n      /* generic:\n      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);\n      var step;\n      var iterations = 0;\n      while (!(step = iterator.next()).done) {\n        iterations++;\n        if (fn(step.value[1], step.value[0], this) === false) {\n          break;\n        }\n      }\n      return iterations;\n      */\n      // indexed:\n      var iterator = this.__iterator(ITERATE_VALUES, reverse);\n      var step;\n      var iterations = 0;\n      while (!(step = iterator.next()).done) {\n        if (fn(step.value, iterations++, this) === false) {\n          break;\n        }\n      }\n      return iterations;\n    };\n    zipSequence.__iteratorUncached = function(type, reverse) {\n      var iterators = iters.map(function(i )\n        {return (i = Iterable(i), getIterator(reverse ? i.reverse() : i))}\n      );\n      var iterations = 0;\n      var isDone = false;\n      return new Iterator(function()  {\n        var steps;\n        if (!isDone) {\n          steps = iterators.map(function(i ) {return i.next()});\n          isDone = steps.some(function(s ) {return s.done});\n        }\n        if (isDone) {\n          return iteratorDone();\n        }\n        return iteratorValue(\n          type,\n          iterations++,\n          zipper.apply(null, steps.map(function(s ) {return s.value}))\n        );\n      });\n    };\n    return zipSequence\n  }\n\n\n  // #pragma Helper Functions\n\n  function reify(iter, seq) {\n    return isSeq(iter) ? seq : iter.constructor(seq);\n  }\n\n  function validateEntry(entry) {\n    if (entry !== Object(entry)) {\n      throw new TypeError('Expected [K, V] tuple: ' + entry);\n    }\n  }\n\n  function resolveSize(iter) {\n    assertNotInfinite(iter.size);\n    return ensureSize(iter);\n  }\n\n  function iterableClass(iterable) {\n    return isKeyed(iterable) ? KeyedIterable :\n      isIndexed(iterable) ? IndexedIterable :\n      SetIterable;\n  }\n\n  function makeSequence(iterable) {\n    return Object.create(\n      (\n        isKeyed(iterable) ? KeyedSeq :\n        isIndexed(iterable) ? IndexedSeq :\n        SetSeq\n      ).prototype\n    );\n  }\n\n  function cacheResultThrough() {\n    if (this._iter.cacheResult) {\n      this._iter.cacheResult();\n      this.size = this._iter.size;\n      return this;\n    } else {\n      return Seq.prototype.cacheResult.call(this);\n    }\n  }\n\n  function defaultComparator(a, b) {\n    return a > b ? 1 : a < b ? -1 : 0;\n  }\n\n  function forceIterator(keyPath) {\n    var iter = getIterator(keyPath);\n    if (!iter) {\n      // Array might not be iterable in this environment, so we need a fallback\n      // to our wrapped type.\n      if (!isArrayLike(keyPath)) {\n        throw new TypeError('Expected iterable or array-like: ' + keyPath);\n      }\n      iter = getIterator(Iterable(keyPath));\n    }\n    return iter;\n  }\n\n  createClass(Record, KeyedCollection);\n\n    function Record(defaultValues, name) {\n      var hasInitialized;\n\n      var RecordType = function Record(values) {\n        if (values instanceof RecordType) {\n          return values;\n        }\n        if (!(this instanceof RecordType)) {\n          return new RecordType(values);\n        }\n        if (!hasInitialized) {\n          hasInitialized = true;\n          var keys = Object.keys(defaultValues);\n          setProps(RecordTypePrototype, keys);\n          RecordTypePrototype.size = keys.length;\n          RecordTypePrototype._name = name;\n          RecordTypePrototype._keys = keys;\n          RecordTypePrototype._defaultValues = defaultValues;\n        }\n        this._map = Map(values);\n      };\n\n      var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);\n      RecordTypePrototype.constructor = RecordType;\n\n      return RecordType;\n    }\n\n    Record.prototype.toString = function() {\n      return this.__toString(recordName(this) + ' {', '}');\n    };\n\n    // @pragma Access\n\n    Record.prototype.has = function(k) {\n      return this._defaultValues.hasOwnProperty(k);\n    };\n\n    Record.prototype.get = function(k, notSetValue) {\n      if (!this.has(k)) {\n        return notSetValue;\n      }\n      var defaultVal = this._defaultValues[k];\n      return this._map ? this._map.get(k, defaultVal) : defaultVal;\n    };\n\n    // @pragma Modification\n\n    Record.prototype.clear = function() {\n      if (this.__ownerID) {\n        this._map && this._map.clear();\n        return this;\n      }\n      var RecordType = this.constructor;\n      return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));\n    };\n\n    Record.prototype.set = function(k, v) {\n      if (!this.has(k)) {\n        throw new Error('Cannot set unknown key \"' + k + '\" on ' + recordName(this));\n      }\n      if (this._map && !this._map.has(k)) {\n        var defaultVal = this._defaultValues[k];\n        if (v === defaultVal) {\n          return this;\n        }\n      }\n      var newMap = this._map && this._map.set(k, v);\n      if (this.__ownerID || newMap === this._map) {\n        return this;\n      }\n      return makeRecord(this, newMap);\n    };\n\n    Record.prototype.remove = function(k) {\n      if (!this.has(k)) {\n        return this;\n      }\n      var newMap = this._map && this._map.remove(k);\n      if (this.__ownerID || newMap === this._map) {\n        return this;\n      }\n      return makeRecord(this, newMap);\n    };\n\n    Record.prototype.wasAltered = function() {\n      return this._map.wasAltered();\n    };\n\n    Record.prototype.__iterator = function(type, reverse) {var this$0 = this;\n      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterator(type, reverse);\n    };\n\n    Record.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterate(fn, reverse);\n    };\n\n    Record.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map && this._map.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        return this;\n      }\n      return makeRecord(this, newMap, ownerID);\n    };\n\n\n  var RecordPrototype = Record.prototype;\n  RecordPrototype[DELETE] = RecordPrototype.remove;\n  RecordPrototype.deleteIn =\n  RecordPrototype.removeIn = MapPrototype.removeIn;\n  RecordPrototype.merge = MapPrototype.merge;\n  RecordPrototype.mergeWith = MapPrototype.mergeWith;\n  RecordPrototype.mergeIn = MapPrototype.mergeIn;\n  RecordPrototype.mergeDeep = MapPrototype.mergeDeep;\n  RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;\n  RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n  RecordPrototype.setIn = MapPrototype.setIn;\n  RecordPrototype.update = MapPrototype.update;\n  RecordPrototype.updateIn = MapPrototype.updateIn;\n  RecordPrototype.withMutations = MapPrototype.withMutations;\n  RecordPrototype.asMutable = MapPrototype.asMutable;\n  RecordPrototype.asImmutable = MapPrototype.asImmutable;\n\n\n  function makeRecord(likeRecord, map, ownerID) {\n    var record = Object.create(Object.getPrototypeOf(likeRecord));\n    record._map = map;\n    record.__ownerID = ownerID;\n    return record;\n  }\n\n  function recordName(record) {\n    return record._name || record.constructor.name || 'Record';\n  }\n\n  function setProps(prototype, names) {\n    try {\n      names.forEach(setProp.bind(undefined, prototype));\n    } catch (error) {\n      // Object.defineProperty failed. Probably IE8.\n    }\n  }\n\n  function setProp(prototype, name) {\n    Object.defineProperty(prototype, name, {\n      get: function() {\n        return this.get(name);\n      },\n      set: function(value) {\n        invariant(this.__ownerID, 'Cannot set on an immutable record.');\n        this.set(name, value);\n      }\n    });\n  }\n\n  createClass(Set, SetCollection);\n\n    // @pragma Construction\n\n    function Set(value) {\n      return value === null || value === undefined ? emptySet() :\n        isSet(value) && !isOrdered(value) ? value :\n        emptySet().withMutations(function(set ) {\n          var iter = SetIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v ) {return set.add(v)});\n        });\n    }\n\n    Set.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    Set.fromKeys = function(value) {\n      return this(KeyedIterable(value).keySeq());\n    };\n\n    Set.prototype.toString = function() {\n      return this.__toString('Set {', '}');\n    };\n\n    // @pragma Access\n\n    Set.prototype.has = function(value) {\n      return this._map.has(value);\n    };\n\n    // @pragma Modification\n\n    Set.prototype.add = function(value) {\n      return updateSet(this, this._map.set(value, true));\n    };\n\n    Set.prototype.remove = function(value) {\n      return updateSet(this, this._map.remove(value));\n    };\n\n    Set.prototype.clear = function() {\n      return updateSet(this, this._map.clear());\n    };\n\n    // @pragma Composition\n\n    Set.prototype.union = function() {var iters = SLICE$0.call(arguments, 0);\n      iters = iters.filter(function(x ) {return x.size !== 0});\n      if (iters.length === 0) {\n        return this;\n      }\n      if (this.size === 0 && !this.__ownerID && iters.length === 1) {\n        return this.constructor(iters[0]);\n      }\n      return this.withMutations(function(set ) {\n        for (var ii = 0; ii < iters.length; ii++) {\n          SetIterable(iters[ii]).forEach(function(value ) {return set.add(value)});\n        }\n      });\n    };\n\n    Set.prototype.intersect = function() {var iters = SLICE$0.call(arguments, 0);\n      if (iters.length === 0) {\n        return this;\n      }\n      iters = iters.map(function(iter ) {return SetIterable(iter)});\n      var originalSet = this;\n      return this.withMutations(function(set ) {\n        originalSet.forEach(function(value ) {\n          if (!iters.every(function(iter ) {return iter.includes(value)})) {\n            set.remove(value);\n          }\n        });\n      });\n    };\n\n    Set.prototype.subtract = function() {var iters = SLICE$0.call(arguments, 0);\n      if (iters.length === 0) {\n        return this;\n      }\n      iters = iters.map(function(iter ) {return SetIterable(iter)});\n      var originalSet = this;\n      return this.withMutations(function(set ) {\n        originalSet.forEach(function(value ) {\n          if (iters.some(function(iter ) {return iter.includes(value)})) {\n            set.remove(value);\n          }\n        });\n      });\n    };\n\n    Set.prototype.merge = function() {\n      return this.union.apply(this, arguments);\n    };\n\n    Set.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return this.union.apply(this, iters);\n    };\n\n    Set.prototype.sort = function(comparator) {\n      // Late binding\n      return OrderedSet(sortFactory(this, comparator));\n    };\n\n    Set.prototype.sortBy = function(mapper, comparator) {\n      // Late binding\n      return OrderedSet(sortFactory(this, comparator, mapper));\n    };\n\n    Set.prototype.wasAltered = function() {\n      return this._map.wasAltered();\n    };\n\n    Set.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._map.__iterate(function(_, k)  {return fn(k, k, this$0)}, reverse);\n    };\n\n    Set.prototype.__iterator = function(type, reverse) {\n      return this._map.map(function(_, k)  {return k}).__iterator(type, reverse);\n    };\n\n    Set.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        return this;\n      }\n      return this.__make(newMap, ownerID);\n    };\n\n\n  function isSet(maybeSet) {\n    return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);\n  }\n\n  Set.isSet = isSet;\n\n  var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';\n\n  var SetPrototype = Set.prototype;\n  SetPrototype[IS_SET_SENTINEL] = true;\n  SetPrototype[DELETE] = SetPrototype.remove;\n  SetPrototype.mergeDeep = SetPrototype.merge;\n  SetPrototype.mergeDeepWith = SetPrototype.mergeWith;\n  SetPrototype.withMutations = MapPrototype.withMutations;\n  SetPrototype.asMutable = MapPrototype.asMutable;\n  SetPrototype.asImmutable = MapPrototype.asImmutable;\n\n  SetPrototype.__empty = emptySet;\n  SetPrototype.__make = makeSet;\n\n  function updateSet(set, newMap) {\n    if (set.__ownerID) {\n      set.size = newMap.size;\n      set._map = newMap;\n      return set;\n    }\n    return newMap === set._map ? set :\n      newMap.size === 0 ? set.__empty() :\n      set.__make(newMap);\n  }\n\n  function makeSet(map, ownerID) {\n    var set = Object.create(SetPrototype);\n    set.size = map ? map.size : 0;\n    set._map = map;\n    set.__ownerID = ownerID;\n    return set;\n  }\n\n  var EMPTY_SET;\n  function emptySet() {\n    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));\n  }\n\n  createClass(OrderedSet, Set);\n\n    // @pragma Construction\n\n    function OrderedSet(value) {\n      return value === null || value === undefined ? emptyOrderedSet() :\n        isOrderedSet(value) ? value :\n        emptyOrderedSet().withMutations(function(set ) {\n          var iter = SetIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v ) {return set.add(v)});\n        });\n    }\n\n    OrderedSet.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    OrderedSet.fromKeys = function(value) {\n      return this(KeyedIterable(value).keySeq());\n    };\n\n    OrderedSet.prototype.toString = function() {\n      return this.__toString('OrderedSet {', '}');\n    };\n\n\n  function isOrderedSet(maybeOrderedSet) {\n    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);\n  }\n\n  OrderedSet.isOrderedSet = isOrderedSet;\n\n  var OrderedSetPrototype = OrderedSet.prototype;\n  OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;\n\n  OrderedSetPrototype.__empty = emptyOrderedSet;\n  OrderedSetPrototype.__make = makeOrderedSet;\n\n  function makeOrderedSet(map, ownerID) {\n    var set = Object.create(OrderedSetPrototype);\n    set.size = map ? map.size : 0;\n    set._map = map;\n    set.__ownerID = ownerID;\n    return set;\n  }\n\n  var EMPTY_ORDERED_SET;\n  function emptyOrderedSet() {\n    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));\n  }\n\n  createClass(Stack, IndexedCollection);\n\n    // @pragma Construction\n\n    function Stack(value) {\n      return value === null || value === undefined ? emptyStack() :\n        isStack(value) ? value :\n        emptyStack().unshiftAll(value);\n    }\n\n    Stack.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    Stack.prototype.toString = function() {\n      return this.__toString('Stack [', ']');\n    };\n\n    // @pragma Access\n\n    Stack.prototype.get = function(index, notSetValue) {\n      var head = this._head;\n      index = wrapIndex(this, index);\n      while (head && index--) {\n        head = head.next;\n      }\n      return head ? head.value : notSetValue;\n    };\n\n    Stack.prototype.peek = function() {\n      return this._head && this._head.value;\n    };\n\n    // @pragma Modification\n\n    Stack.prototype.push = function(/*...values*/) {\n      if (arguments.length === 0) {\n        return this;\n      }\n      var newSize = this.size + arguments.length;\n      var head = this._head;\n      for (var ii = arguments.length - 1; ii >= 0; ii--) {\n        head = {\n          value: arguments[ii],\n          next: head\n        };\n      }\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    Stack.prototype.pushAll = function(iter) {\n      iter = IndexedIterable(iter);\n      if (iter.size === 0) {\n        return this;\n      }\n      assertNotInfinite(iter.size);\n      var newSize = this.size;\n      var head = this._head;\n      iter.reverse().forEach(function(value ) {\n        newSize++;\n        head = {\n          value: value,\n          next: head\n        };\n      });\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    Stack.prototype.pop = function() {\n      return this.slice(1);\n    };\n\n    Stack.prototype.unshift = function(/*...values*/) {\n      return this.push.apply(this, arguments);\n    };\n\n    Stack.prototype.unshiftAll = function(iter) {\n      return this.pushAll(iter);\n    };\n\n    Stack.prototype.shift = function() {\n      return this.pop.apply(this, arguments);\n    };\n\n    Stack.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._head = undefined;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyStack();\n    };\n\n    Stack.prototype.slice = function(begin, end) {\n      if (wholeSlice(begin, end, this.size)) {\n        return this;\n      }\n      var resolvedBegin = resolveBegin(begin, this.size);\n      var resolvedEnd = resolveEnd(end, this.size);\n      if (resolvedEnd !== this.size) {\n        // super.slice(begin, end);\n        return IndexedCollection.prototype.slice.call(this, begin, end);\n      }\n      var newSize = this.size - resolvedBegin;\n      var head = this._head;\n      while (resolvedBegin--) {\n        head = head.next;\n      }\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    // @pragma Mutability\n\n    Stack.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this.__altered = false;\n        return this;\n      }\n      return makeStack(this.size, this._head, ownerID, this.__hash);\n    };\n\n    // @pragma Iteration\n\n    Stack.prototype.__iterate = function(fn, reverse) {\n      if (reverse) {\n        return this.reverse().__iterate(fn);\n      }\n      var iterations = 0;\n      var node = this._head;\n      while (node) {\n        if (fn(node.value, iterations++, this) === false) {\n          break;\n        }\n        node = node.next;\n      }\n      return iterations;\n    };\n\n    Stack.prototype.__iterator = function(type, reverse) {\n      if (reverse) {\n        return this.reverse().__iterator(type);\n      }\n      var iterations = 0;\n      var node = this._head;\n      return new Iterator(function()  {\n        if (node) {\n          var value = node.value;\n          node = node.next;\n          return iteratorValue(type, iterations++, value);\n        }\n        return iteratorDone();\n      });\n    };\n\n\n  function isStack(maybeStack) {\n    return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);\n  }\n\n  Stack.isStack = isStack;\n\n  var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';\n\n  var StackPrototype = Stack.prototype;\n  StackPrototype[IS_STACK_SENTINEL] = true;\n  StackPrototype.withMutations = MapPrototype.withMutations;\n  StackPrototype.asMutable = MapPrototype.asMutable;\n  StackPrototype.asImmutable = MapPrototype.asImmutable;\n  StackPrototype.wasAltered = MapPrototype.wasAltered;\n\n\n  function makeStack(size, head, ownerID, hash) {\n    var map = Object.create(StackPrototype);\n    map.size = size;\n    map._head = head;\n    map.__ownerID = ownerID;\n    map.__hash = hash;\n    map.__altered = false;\n    return map;\n  }\n\n  var EMPTY_STACK;\n  function emptyStack() {\n    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));\n  }\n\n  /**\n   * Contributes additional methods to a constructor\n   */\n  function mixin(ctor, methods) {\n    var keyCopier = function(key ) { ctor.prototype[key] = methods[key]; };\n    Object.keys(methods).forEach(keyCopier);\n    Object.getOwnPropertySymbols &&\n      Object.getOwnPropertySymbols(methods).forEach(keyCopier);\n    return ctor;\n  }\n\n  Iterable.Iterator = Iterator;\n\n  mixin(Iterable, {\n\n    // ### Conversion to other types\n\n    toArray: function() {\n      assertNotInfinite(this.size);\n      var array = new Array(this.size || 0);\n      this.valueSeq().__iterate(function(v, i)  { array[i] = v; });\n      return array;\n    },\n\n    toIndexedSeq: function() {\n      return new ToIndexedSequence(this);\n    },\n\n    toJS: function() {\n      return this.toSeq().map(\n        function(value ) {return value && typeof value.toJS === 'function' ? value.toJS() : value}\n      ).__toJS();\n    },\n\n    toJSON: function() {\n      return this.toSeq().map(\n        function(value ) {return value && typeof value.toJSON === 'function' ? value.toJSON() : value}\n      ).__toJS();\n    },\n\n    toKeyedSeq: function() {\n      return new ToKeyedSequence(this, true);\n    },\n\n    toMap: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Map(this.toKeyedSeq());\n    },\n\n    toObject: function() {\n      assertNotInfinite(this.size);\n      var object = {};\n      this.__iterate(function(v, k)  { object[k] = v; });\n      return object;\n    },\n\n    toOrderedMap: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return OrderedMap(this.toKeyedSeq());\n    },\n\n    toOrderedSet: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toSet: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Set(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toSetSeq: function() {\n      return new ToSetSequence(this);\n    },\n\n    toSeq: function() {\n      return isIndexed(this) ? this.toIndexedSeq() :\n        isKeyed(this) ? this.toKeyedSeq() :\n        this.toSetSeq();\n    },\n\n    toStack: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Stack(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toList: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return List(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n\n    // ### Common JavaScript methods and properties\n\n    toString: function() {\n      return '[Iterable]';\n    },\n\n    __toString: function(head, tail) {\n      if (this.size === 0) {\n        return head + tail;\n      }\n      return head + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + tail;\n    },\n\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    concat: function() {var values = SLICE$0.call(arguments, 0);\n      return reify(this, concatFactory(this, values));\n    },\n\n    includes: function(searchValue) {\n      return this.some(function(value ) {return is(value, searchValue)});\n    },\n\n    entries: function() {\n      return this.__iterator(ITERATE_ENTRIES);\n    },\n\n    every: function(predicate, context) {\n      assertNotInfinite(this.size);\n      var returnValue = true;\n      this.__iterate(function(v, k, c)  {\n        if (!predicate.call(context, v, k, c)) {\n          returnValue = false;\n          return false;\n        }\n      });\n      return returnValue;\n    },\n\n    filter: function(predicate, context) {\n      return reify(this, filterFactory(this, predicate, context, true));\n    },\n\n    find: function(predicate, context, notSetValue) {\n      var entry = this.findEntry(predicate, context);\n      return entry ? entry[1] : notSetValue;\n    },\n\n    forEach: function(sideEffect, context) {\n      assertNotInfinite(this.size);\n      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);\n    },\n\n    join: function(separator) {\n      assertNotInfinite(this.size);\n      separator = separator !== undefined ? '' + separator : ',';\n      var joined = '';\n      var isFirst = true;\n      this.__iterate(function(v ) {\n        isFirst ? (isFirst = false) : (joined += separator);\n        joined += v !== null && v !== undefined ? v.toString() : '';\n      });\n      return joined;\n    },\n\n    keys: function() {\n      return this.__iterator(ITERATE_KEYS);\n    },\n\n    map: function(mapper, context) {\n      return reify(this, mapFactory(this, mapper, context));\n    },\n\n    reduce: function(reducer, initialReduction, context) {\n      assertNotInfinite(this.size);\n      var reduction;\n      var useFirst;\n      if (arguments.length < 2) {\n        useFirst = true;\n      } else {\n        reduction = initialReduction;\n      }\n      this.__iterate(function(v, k, c)  {\n        if (useFirst) {\n          useFirst = false;\n          reduction = v;\n        } else {\n          reduction = reducer.call(context, reduction, v, k, c);\n        }\n      });\n      return reduction;\n    },\n\n    reduceRight: function(reducer, initialReduction, context) {\n      var reversed = this.toKeyedSeq().reverse();\n      return reversed.reduce.apply(reversed, arguments);\n    },\n\n    reverse: function() {\n      return reify(this, reverseFactory(this, true));\n    },\n\n    slice: function(begin, end) {\n      return reify(this, sliceFactory(this, begin, end, true));\n    },\n\n    some: function(predicate, context) {\n      return !this.every(not(predicate), context);\n    },\n\n    sort: function(comparator) {\n      return reify(this, sortFactory(this, comparator));\n    },\n\n    values: function() {\n      return this.__iterator(ITERATE_VALUES);\n    },\n\n\n    // ### More sequential methods\n\n    butLast: function() {\n      return this.slice(0, -1);\n    },\n\n    isEmpty: function() {\n      return this.size !== undefined ? this.size === 0 : !this.some(function()  {return true});\n    },\n\n    count: function(predicate, context) {\n      return ensureSize(\n        predicate ? this.toSeq().filter(predicate, context) : this\n      );\n    },\n\n    countBy: function(grouper, context) {\n      return countByFactory(this, grouper, context);\n    },\n\n    equals: function(other) {\n      return deepEqual(this, other);\n    },\n\n    entrySeq: function() {\n      var iterable = this;\n      if (iterable._cache) {\n        // We cache as an entries array, so we can just return the cache!\n        return new ArraySeq(iterable._cache);\n      }\n      var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();\n      entriesSequence.fromEntrySeq = function()  {return iterable.toSeq()};\n      return entriesSequence;\n    },\n\n    filterNot: function(predicate, context) {\n      return this.filter(not(predicate), context);\n    },\n\n    findEntry: function(predicate, context, notSetValue) {\n      var found = notSetValue;\n      this.__iterate(function(v, k, c)  {\n        if (predicate.call(context, v, k, c)) {\n          found = [k, v];\n          return false;\n        }\n      });\n      return found;\n    },\n\n    findKey: function(predicate, context) {\n      var entry = this.findEntry(predicate, context);\n      return entry && entry[0];\n    },\n\n    findLast: function(predicate, context, notSetValue) {\n      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);\n    },\n\n    findLastEntry: function(predicate, context, notSetValue) {\n      return this.toKeyedSeq().reverse().findEntry(predicate, context, notSetValue);\n    },\n\n    findLastKey: function(predicate, context) {\n      return this.toKeyedSeq().reverse().findKey(predicate, context);\n    },\n\n    first: function() {\n      return this.find(returnTrue);\n    },\n\n    flatMap: function(mapper, context) {\n      return reify(this, flatMapFactory(this, mapper, context));\n    },\n\n    flatten: function(depth) {\n      return reify(this, flattenFactory(this, depth, true));\n    },\n\n    fromEntrySeq: function() {\n      return new FromEntriesSequence(this);\n    },\n\n    get: function(searchKey, notSetValue) {\n      return this.find(function(_, key)  {return is(key, searchKey)}, undefined, notSetValue);\n    },\n\n    getIn: function(searchKeyPath, notSetValue) {\n      var nested = this;\n      // Note: in an ES6 environment, we would prefer:\n      // for (var key of searchKeyPath) {\n      var iter = forceIterator(searchKeyPath);\n      var step;\n      while (!(step = iter.next()).done) {\n        var key = step.value;\n        nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;\n        if (nested === NOT_SET) {\n          return notSetValue;\n        }\n      }\n      return nested;\n    },\n\n    groupBy: function(grouper, context) {\n      return groupByFactory(this, grouper, context);\n    },\n\n    has: function(searchKey) {\n      return this.get(searchKey, NOT_SET) !== NOT_SET;\n    },\n\n    hasIn: function(searchKeyPath) {\n      return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;\n    },\n\n    isSubset: function(iter) {\n      iter = typeof iter.includes === 'function' ? iter : Iterable(iter);\n      return this.every(function(value ) {return iter.includes(value)});\n    },\n\n    isSuperset: function(iter) {\n      iter = typeof iter.isSubset === 'function' ? iter : Iterable(iter);\n      return iter.isSubset(this);\n    },\n\n    keyOf: function(searchValue) {\n      return this.findKey(function(value ) {return is(value, searchValue)});\n    },\n\n    keySeq: function() {\n      return this.toSeq().map(keyMapper).toIndexedSeq();\n    },\n\n    last: function() {\n      return this.toSeq().reverse().first();\n    },\n\n    lastKeyOf: function(searchValue) {\n      return this.toKeyedSeq().reverse().keyOf(searchValue);\n    },\n\n    max: function(comparator) {\n      return maxFactory(this, comparator);\n    },\n\n    maxBy: function(mapper, comparator) {\n      return maxFactory(this, comparator, mapper);\n    },\n\n    min: function(comparator) {\n      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);\n    },\n\n    minBy: function(mapper, comparator) {\n      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);\n    },\n\n    rest: function() {\n      return this.slice(1);\n    },\n\n    skip: function(amount) {\n      return this.slice(Math.max(0, amount));\n    },\n\n    skipLast: function(amount) {\n      return reify(this, this.toSeq().reverse().skip(amount).reverse());\n    },\n\n    skipWhile: function(predicate, context) {\n      return reify(this, skipWhileFactory(this, predicate, context, true));\n    },\n\n    skipUntil: function(predicate, context) {\n      return this.skipWhile(not(predicate), context);\n    },\n\n    sortBy: function(mapper, comparator) {\n      return reify(this, sortFactory(this, comparator, mapper));\n    },\n\n    take: function(amount) {\n      return this.slice(0, Math.max(0, amount));\n    },\n\n    takeLast: function(amount) {\n      return reify(this, this.toSeq().reverse().take(amount).reverse());\n    },\n\n    takeWhile: function(predicate, context) {\n      return reify(this, takeWhileFactory(this, predicate, context));\n    },\n\n    takeUntil: function(predicate, context) {\n      return this.takeWhile(not(predicate), context);\n    },\n\n    valueSeq: function() {\n      return this.toIndexedSeq();\n    },\n\n\n    // ### Hashable Object\n\n    hashCode: function() {\n      return this.__hash || (this.__hash = hashIterable(this));\n    }\n\n\n    // ### Internal\n\n    // abstract __iterate(fn, reverse)\n\n    // abstract __iterator(type, reverse)\n  });\n\n  // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n  // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n  // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n  // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\n  var IterablePrototype = Iterable.prototype;\n  IterablePrototype[IS_ITERABLE_SENTINEL] = true;\n  IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;\n  IterablePrototype.__toJS = IterablePrototype.toArray;\n  IterablePrototype.__toStringMapper = quoteString;\n  IterablePrototype.inspect =\n  IterablePrototype.toSource = function() { return this.toString(); };\n  IterablePrototype.chain = IterablePrototype.flatMap;\n  IterablePrototype.contains = IterablePrototype.includes;\n\n  mixin(KeyedIterable, {\n\n    // ### More sequential methods\n\n    flip: function() {\n      return reify(this, flipFactory(this));\n    },\n\n    mapEntries: function(mapper, context) {var this$0 = this;\n      var iterations = 0;\n      return reify(this,\n        this.toSeq().map(\n          function(v, k)  {return mapper.call(context, [k, v], iterations++, this$0)}\n        ).fromEntrySeq()\n      );\n    },\n\n    mapKeys: function(mapper, context) {var this$0 = this;\n      return reify(this,\n        this.toSeq().flip().map(\n          function(k, v)  {return mapper.call(context, k, v, this$0)}\n        ).flip()\n      );\n    }\n\n  });\n\n  var KeyedIterablePrototype = KeyedIterable.prototype;\n  KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;\n  KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;\n  KeyedIterablePrototype.__toJS = IterablePrototype.toObject;\n  KeyedIterablePrototype.__toStringMapper = function(v, k)  {return JSON.stringify(k) + ': ' + quoteString(v)};\n\n\n\n  mixin(IndexedIterable, {\n\n    // ### Conversion to other types\n\n    toKeyedSeq: function() {\n      return new ToKeyedSequence(this, false);\n    },\n\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    filter: function(predicate, context) {\n      return reify(this, filterFactory(this, predicate, context, false));\n    },\n\n    findIndex: function(predicate, context) {\n      var entry = this.findEntry(predicate, context);\n      return entry ? entry[0] : -1;\n    },\n\n    indexOf: function(searchValue) {\n      var key = this.keyOf(searchValue);\n      return key === undefined ? -1 : key;\n    },\n\n    lastIndexOf: function(searchValue) {\n      var key = this.lastKeyOf(searchValue);\n      return key === undefined ? -1 : key;\n    },\n\n    reverse: function() {\n      return reify(this, reverseFactory(this, false));\n    },\n\n    slice: function(begin, end) {\n      return reify(this, sliceFactory(this, begin, end, false));\n    },\n\n    splice: function(index, removeNum /*, ...values*/) {\n      var numArgs = arguments.length;\n      removeNum = Math.max(removeNum | 0, 0);\n      if (numArgs === 0 || (numArgs === 2 && !removeNum)) {\n        return this;\n      }\n      // If index is negative, it should resolve relative to the size of the\n      // collection. However size may be expensive to compute if not cached, so\n      // only call count() if the number is in fact negative.\n      index = resolveBegin(index, index < 0 ? this.count() : this.size);\n      var spliced = this.slice(0, index);\n      return reify(\n        this,\n        numArgs === 1 ?\n          spliced :\n          spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))\n      );\n    },\n\n\n    // ### More collection methods\n\n    findLastIndex: function(predicate, context) {\n      var entry = this.findLastEntry(predicate, context);\n      return entry ? entry[0] : -1;\n    },\n\n    first: function() {\n      return this.get(0);\n    },\n\n    flatten: function(depth) {\n      return reify(this, flattenFactory(this, depth, false));\n    },\n\n    get: function(index, notSetValue) {\n      index = wrapIndex(this, index);\n      return (index < 0 || (this.size === Infinity ||\n          (this.size !== undefined && index > this.size))) ?\n        notSetValue :\n        this.find(function(_, key)  {return key === index}, undefined, notSetValue);\n    },\n\n    has: function(index) {\n      index = wrapIndex(this, index);\n      return index >= 0 && (this.size !== undefined ?\n        this.size === Infinity || index < this.size :\n        this.indexOf(index) !== -1\n      );\n    },\n\n    interpose: function(separator) {\n      return reify(this, interposeFactory(this, separator));\n    },\n\n    interleave: function(/*...iterables*/) {\n      var iterables = [this].concat(arrCopy(arguments));\n      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);\n      var interleaved = zipped.flatten(true);\n      if (zipped.size) {\n        interleaved.size = zipped.size * iterables.length;\n      }\n      return reify(this, interleaved);\n    },\n\n    keySeq: function() {\n      return Range(0, this.size);\n    },\n\n    last: function() {\n      return this.get(-1);\n    },\n\n    skipWhile: function(predicate, context) {\n      return reify(this, skipWhileFactory(this, predicate, context, false));\n    },\n\n    zip: function(/*, ...iterables */) {\n      var iterables = [this].concat(arrCopy(arguments));\n      return reify(this, zipWithFactory(this, defaultZipper, iterables));\n    },\n\n    zipWith: function(zipper/*, ...iterables */) {\n      var iterables = arrCopy(arguments);\n      iterables[0] = this;\n      return reify(this, zipWithFactory(this, zipper, iterables));\n    }\n\n  });\n\n  IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;\n  IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n\n  mixin(SetIterable, {\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    get: function(value, notSetValue) {\n      return this.has(value) ? value : notSetValue;\n    },\n\n    includes: function(value) {\n      return this.has(value);\n    },\n\n\n    // ### More sequential methods\n\n    keySeq: function() {\n      return this.valueSeq();\n    }\n\n  });\n\n  SetIterable.prototype.has = IterablePrototype.includes;\n  SetIterable.prototype.contains = SetIterable.prototype.includes;\n\n\n  // Mixin subclasses\n\n  mixin(KeyedSeq, KeyedIterable.prototype);\n  mixin(IndexedSeq, IndexedIterable.prototype);\n  mixin(SetSeq, SetIterable.prototype);\n\n  mixin(KeyedCollection, KeyedIterable.prototype);\n  mixin(IndexedCollection, IndexedIterable.prototype);\n  mixin(SetCollection, SetIterable.prototype);\n\n\n  // #pragma Helper functions\n\n  function keyMapper(v, k) {\n    return k;\n  }\n\n  function entryMapper(v, k) {\n    return [k, v];\n  }\n\n  function not(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    }\n  }\n\n  function neg(predicate) {\n    return function() {\n      return -predicate.apply(this, arguments);\n    }\n  }\n\n  function quoteString(value) {\n    return typeof value === 'string' ? JSON.stringify(value) : String(value);\n  }\n\n  function defaultZipper() {\n    return arrCopy(arguments);\n  }\n\n  function defaultNegComparator(a, b) {\n    return a < b ? 1 : a > b ? -1 : 0;\n  }\n\n  function hashIterable(iterable) {\n    if (iterable.size === Infinity) {\n      return 0;\n    }\n    var ordered = isOrdered(iterable);\n    var keyed = isKeyed(iterable);\n    var h = ordered ? 1 : 0;\n    var size = iterable.__iterate(\n      keyed ?\n        ordered ?\n          function(v, k)  { h = 31 * h + hashMerge(hash(v), hash(k)) | 0; } :\n          function(v, k)  { h = h + hashMerge(hash(v), hash(k)) | 0; } :\n        ordered ?\n          function(v ) { h = 31 * h + hash(v) | 0; } :\n          function(v ) { h = h + hash(v) | 0; }\n    );\n    return murmurHashOfSize(size, h);\n  }\n\n  function murmurHashOfSize(size, h) {\n    h = imul(h, 0xCC9E2D51);\n    h = imul(h << 15 | h >>> -15, 0x1B873593);\n    h = imul(h << 13 | h >>> -13, 5);\n    h = (h + 0xE6546B64 | 0) ^ size;\n    h = imul(h ^ h >>> 16, 0x85EBCA6B);\n    h = imul(h ^ h >>> 13, 0xC2B2AE35);\n    h = smi(h ^ h >>> 16);\n    return h;\n  }\n\n  function hashMerge(a, b) {\n    return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0; // int\n  }\n\n  var Immutable = {\n\n    Iterable: Iterable,\n\n    Seq: Seq,\n    Collection: Collection,\n    Map: Map,\n    OrderedMap: OrderedMap,\n    List: List,\n    Stack: Stack,\n    Set: Set,\n    OrderedSet: OrderedSet,\n\n    Record: Record,\n    Range: Range,\n    Repeat: Repeat,\n\n    is: is,\n    fromJS: fromJS\n\n  };\n\n  return Immutable;\n\n}));\n\n/***/ }),\n\n/***/ \"./node_modules/transit-immutable-js/index.js\":\n/*!****************************************************!*\\\n  !*** ./node_modules/transit-immutable-js/index.js ***!\n  \\****************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar transit = __webpack_require__(/*! transit-js */ \"./node_modules/transit-js/transit.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"./node_modules/immutable/dist/immutable.js\");\n\nfunction createReader(handlers) {\n  return transit.reader('json', {\n    mapBuilder: {\n      init: function() {\n        return {};\n      },\n      add: function(m, k, v) {\n        m[k] = v;\n        return m;\n      },\n      finalize: function(m) {\n        return m;\n      }\n    },\n    handlers: handlers\n  });\n}\n\nfunction createReaderHandlers(extras, recordMap, missingRecordHandler) {\n  var handlers = {\n    iM: function(v) {\n      var m = Immutable.Map().asMutable();\n      for (var i = 0; i < v.length; i += 2) {\n        m = m.set(v[i], v[i + 1]);\n      }\n      return m.asImmutable();\n    },\n    iOM: function(v) {\n      var m = Immutable.OrderedMap().asMutable();\n      for (var i = 0; i < v.length; i += 2) {\n        m = m.set(v[i], v[i + 1]);\n      }\n      return m.asImmutable();\n    },\n    iL: function(v) {\n      return Immutable.List(v);\n    },\n    iS: function(v) {\n      return Immutable.Set(v);\n    },\n    iOS: function(v) {\n      return Immutable.OrderedSet(v);\n    },\n    iR: function(v) {\n      var RecordType = recordMap[v.n];\n      if (!RecordType) {\n        return missingRecordHandler(v.n, v.v);\n      }\n\n      return new RecordType(v.v);\n    }\n  };\n  extras.forEach(function(extra) {\n    handlers[extra.tag] = extra.read;\n  });\n  return handlers;\n}\n\nfunction createWriter(handlers) {\n  return transit.writer('json', {\n    handlers: handlers\n  });\n}\n\nfunction createWriterHandlers(extras, recordMap, predicate) {\n  function mapSerializer(m) {\n    var i = 0;\n    if (predicate) {\n      m = m.filter(predicate);\n    }\n    var a = new Array(2 * m.size);\n    m.forEach(function(v, k) {\n      a[i++] = k;\n      a[i++] = v;\n    });\n    return a;\n  }\n\n  var handlers = transit.map([\n    Immutable.Map, transit.makeWriteHandler({\n      tag: function() {\n        return 'iM';\n      },\n      rep: mapSerializer\n    }),\n    Immutable.OrderedMap, transit.makeWriteHandler({\n      tag: function() {\n        return 'iOM';\n      },\n      rep: mapSerializer\n    }),\n    Immutable.List, transit.makeWriteHandler({\n      tag: function() {\n        return \"iL\";\n      },\n      rep: function(v) {\n        if (predicate) {\n          v = v.filter(predicate);\n        }\n        return v.toArray();\n      }\n    }),\n    Immutable.Set, transit.makeWriteHandler({\n      tag: function() {\n        return \"iS\";\n      },\n      rep: function(v) {\n        if (predicate) {\n          v = v.filter(predicate);\n        }\n        return v.toArray();\n      }\n    }),\n    Immutable.OrderedSet, transit.makeWriteHandler({\n      tag: function() {\n        return \"iOS\";\n      },\n      rep: function(v) {\n        if (predicate) {\n          v = v.filter(predicate);\n        }\n        return v.toArray();\n      }\n    }),\n    Function, transit.makeWriteHandler({\n      tag: function() {\n        return '_';\n      },\n      rep: function() {\n        return null;\n      }\n    }),\n    \"default\", transit.makeWriteHandler({\n      tag: function() {\n        return 'iM';\n      },\n      rep: function(m) {\n        if (!('toMap' in m)) {\n          var e = \"Error serializing unrecognized object \" + m.toString();\n          throw new Error(e);\n        }\n        return mapSerializer(m.toMap());\n      }\n    })\n  ]);\n\n  Object.keys(recordMap).forEach(function(name) {\n    handlers.set(recordMap[name], makeRecordHandler(name, predicate));\n  });\n\n  extras.forEach(function(extra) {\n    handlers.set(extra.class, transit.makeWriteHandler({\n      tag: function() { return extra.tag; },\n      rep: extra.write\n    }));\n  });\n\n  return handlers;\n}\n\nfunction validateExtras(extras) {\n  if (!Array.isArray(extras)) {\n    invalidExtras(extras, \"Expected array of handlers, got %j\");\n  }\n  extras.forEach(function(extra) {\n    if (typeof extra.tag !== \"string\") {\n      invalidExtras(extra,\n        \"Expected %j to have property 'tag' which is a string\");\n    }\n    if (typeof extra.class !== \"function\") {\n      invalidExtras(extra,\n        \"Expected %j to have property 'class' which is a constructor function\");\n    }\n    if (typeof extra.write !== \"function\") {\n      invalidExtras(extra,\n        \"Expected %j to have property 'write' which is a function\");\n    }\n    if (typeof extra.read !== \"function\") {\n      invalidExtras(extra,\n        \"Expected %j to have property 'write' which is a function\");\n    }\n  });\n}\nfunction invalidExtras(data, msg) {\n  var json = JSON.stringify(data);\n  throw new Error(msg.replace(\"%j\", json));\n}\n\nfunction recordName(record) {\n  /* eslint no-underscore-dangle: 0 */\n  return record._name || record.constructor.name || 'Record';\n}\n\nfunction makeRecordHandler(name) {\n  return transit.makeWriteHandler({\n    tag: function() {\n      return 'iR';\n    },\n    rep: function(m) {\n      return {\n        n: name,\n        v: m.toObject()\n      };\n    }\n  });\n}\n\nfunction buildRecordMap(recordClasses) {\n  var recordMap = {};\n\n  recordClasses.forEach(function(RecordType) {\n    var rec = new RecordType({});\n    var recName = recordName(rec);\n\n    if (!recName || recName === 'Record') {\n      throw new Error('Cannot (de)serialize Record() without a name');\n    }\n\n    if (recordMap[recName]) {\n      throw new Error('There\\'s already a constructor for a Record named ' +\n                      recName);\n    }\n    recordMap[recName] = RecordType;\n  });\n\n  return recordMap;\n}\n\nfunction defaultMissingRecordHandler(recName) {\n  var msg = 'Tried to deserialize Record type named `' + recName + '`, ' +\n            'but no type with that name was passed to withRecords()';\n  throw new Error(msg);\n}\n\nfunction createInstanceFromHandlers(handlers) {\n  var reader = createReader(handlers.read);\n  var writer = createWriter(handlers.write);\n\n  return {\n    toJSON: function toJSON(data) {\n      return writer.write(data);\n    },\n    fromJSON: function fromJSON(json) {\n      return reader.read(json);\n    },\n    withExtraHandlers: function(extra) {\n      return createInstanceFromHandlers(handlers.withExtraHandlers(extra));\n    },\n    withFilter: function(predicate) {\n      return createInstanceFromHandlers(handlers.withFilter(predicate));\n    },\n    withRecords: function(recordClasses, missingRecordHandler) {\n      return createInstanceFromHandlers(\n        handlers.withRecords(recordClasses, missingRecordHandler)\n      );\n    }\n  };\n}\n\nfunction createHandlers(options) {\n  var records = options.records || {};\n  var filter = options.filter || false;\n  var missingRecordFn = options.missingRecordHandler\n                          || defaultMissingRecordHandler;\n  var extras = options.extras || [];\n\n  return {\n    read: createReaderHandlers(extras, records, missingRecordFn),\n    write: createWriterHandlers(extras, records, filter),\n    withExtraHandlers: function(moreExtras) {\n      validateExtras(moreExtras);\n\n      return createHandlers({\n        extras: extras.concat(moreExtras),\n        records: records,\n        filter: filter,\n        missingRecordHandler: missingRecordFn\n      });\n    },\n    withFilter: function(newFilter) {\n      return createHandlers({\n        extras: extras,\n        records: records,\n        filter: newFilter,\n        missingRecordHandler: missingRecordFn\n      });\n    },\n    withRecords: function(recordClasses, missingRecordHandler) {\n      var recordMap = buildRecordMap(recordClasses);\n      return createHandlers({\n        extras: extras,\n        records: recordMap,\n        filter: filter,\n        missingRecordHandler: missingRecordHandler\n      });\n    }\n  };\n}\n\nmodule.exports = createInstanceFromHandlers(createHandlers({}));\nmodule.exports.handlers = createHandlers({});\n\n\n/***/ }),\n\n/***/ \"./node_modules/transit-js/transit.js\":\n/*!********************************************!*\\\n  !*** ./node_modules/transit-js/transit.js ***!\n  \\********************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {// transit-js 0.8.862\n// http://transit-format.org\n// \n// Copyright 2014 Cognitect. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License..\nvar $jscomp = $jscomp || {};\n$jscomp.scope = {};\n$jscomp.checkStringArgs = function(a, b, c) {\n  if (null == a) {\n    throw new TypeError(\"The 'this' value for String.prototype.\" + c + \" must not be null or undefined\");\n  }\n  if (b instanceof RegExp) {\n    throw new TypeError(\"First argument to String.prototype.\" + c + \" must not be a regular expression\");\n  }\n  return a + \"\";\n};\n$jscomp.defineProperty = \"function\" == typeof Object.defineProperties ? Object.defineProperty : function(a, b, c) {\n  a != Array.prototype && a != Object.prototype && (a[b] = c.value);\n};\n$jscomp.getGlobal = function(a) {\n  return \"undefined\" != typeof window && window === a ? a : \"undefined\" != typeof global && null != global ? global : a;\n};\n$jscomp.global = $jscomp.getGlobal(this);\n$jscomp.polyfill = function(a, b, c, d) {\n  if (b) {\n    c = $jscomp.global;\n    a = a.split(\".\");\n    for (d = 0; d < a.length - 1; d++) {\n      var e = a[d];\n      e in c || (c[e] = {});\n      c = c[e];\n    }\n    a = a[a.length - 1];\n    d = c[a];\n    b = b(d);\n    b != d && null != b && $jscomp.defineProperty(c, a, {configurable:!0, writable:!0, value:b});\n  }\n};\n$jscomp.polyfill(\"String.prototype.repeat\", function(a) {\n  return a ? a : function(a) {\n    var b = $jscomp.checkStringArgs(this, null, \"repeat\");\n    if (0 > a || 1342177279 < a) {\n      throw new RangeError(\"Invalid count value\");\n    }\n    a |= 0;\n    for (var d = \"\"; a;) {\n      if (a & 1 && (d += b), a >>>= 1) {\n        b += b;\n      }\n    }\n    return d;\n  };\n}, \"es6-impl\", \"es3\");\n$jscomp.SYMBOL_PREFIX = \"jscomp_symbol_\";\n$jscomp.initSymbol = function() {\n  $jscomp.initSymbol = function() {\n  };\n  $jscomp.global.Symbol || ($jscomp.global.Symbol = $jscomp.Symbol);\n};\n$jscomp.symbolCounter_ = 0;\n$jscomp.Symbol = function(a) {\n  return $jscomp.SYMBOL_PREFIX + (a || \"\") + $jscomp.symbolCounter_++;\n};\n$jscomp.initSymbolIterator = function() {\n  $jscomp.initSymbol();\n  var a = $jscomp.global.Symbol.iterator;\n  a || (a = $jscomp.global.Symbol.iterator = $jscomp.global.Symbol(\"iterator\"));\n  \"function\" != typeof Array.prototype[a] && $jscomp.defineProperty(Array.prototype, a, {configurable:!0, writable:!0, value:function() {\n    return $jscomp.arrayIterator(this);\n  }});\n  $jscomp.initSymbolIterator = function() {\n  };\n};\n$jscomp.arrayIterator = function(a) {\n  var b = 0;\n  return $jscomp.iteratorPrototype(function() {\n    return b < a.length ? {done:!1, value:a[b++]} : {done:!0};\n  });\n};\n$jscomp.iteratorPrototype = function(a) {\n  $jscomp.initSymbolIterator();\n  a = {next:a};\n  a[$jscomp.global.Symbol.iterator] = function() {\n    return this;\n  };\n  return a;\n};\n$jscomp.iteratorFromArray = function(a, b) {\n  $jscomp.initSymbolIterator();\n  a instanceof String && (a += \"\");\n  var c = 0, d = {next:function() {\n    if (c < a.length) {\n      var e = c++;\n      return {value:b(e, a[e]), done:!1};\n    }\n    d.next = function() {\n      return {done:!0, value:void 0};\n    };\n    return d.next();\n  }};\n  d[Symbol.iterator] = function() {\n    return d;\n  };\n  return d;\n};\n$jscomp.polyfill(\"Array.prototype.entries\", function(a) {\n  return a ? a : function() {\n    return $jscomp.iteratorFromArray(this, function(a, c) {\n      return [a, c];\n    });\n  };\n}, \"es6-impl\", \"es3\");\n$jscomp.polyfill(\"Array.prototype.keys\", function(a) {\n  return a ? a : function() {\n    return $jscomp.iteratorFromArray(this, function(a) {\n      return a;\n    });\n  };\n}, \"es6-impl\", \"es3\");\n$jscomp.polyfill(\"Array.prototype.values\", function(a) {\n  return a ? a : function() {\n    return $jscomp.iteratorFromArray(this, function(a, c) {\n      return c;\n    });\n  };\n}, \"es6\", \"es3\");\nvar COMPILED = !0, goog = goog || {};\ngoog.global = this;\ngoog.isDef = function(a) {\n  return void 0 !== a;\n};\ngoog.exportPath_ = function(a, b, c) {\n  a = a.split(\".\");\n  c = c || goog.global;\n  a[0] in c || !c.execScript || c.execScript(\"var \" + a[0]);\n  for (var d; a.length && (d = a.shift());) {\n    !a.length && goog.isDef(b) ? c[d] = b : c = c[d] && c[d] !== Object.prototype[d] ? c[d] : c[d] = {};\n  }\n};\ngoog.define = function(a, b) {\n  var c = b;\n  COMPILED || (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, a) ? c = goog.global.CLOSURE_UNCOMPILED_DEFINES[a] : goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, a) && (c = goog.global.CLOSURE_DEFINES[a]));\n  goog.exportPath_(a, c);\n};\ngoog.DEBUG = !0;\ngoog.LOCALE = \"en\";\ngoog.TRUSTED_SITE = !0;\ngoog.STRICT_MODE_COMPATIBLE = !1;\ngoog.DISALLOW_TEST_ONLY_CODE = COMPILED && !goog.DEBUG;\ngoog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING = !1;\ngoog.provide = function(a) {\n  if (goog.isInModuleLoader_()) {\n    throw Error(\"goog.provide can not be used within a goog.module.\");\n  }\n  if (!COMPILED && goog.isProvided_(a)) {\n    throw Error('Namespace \"' + a + '\" already declared.');\n  }\n  goog.constructNamespace_(a);\n};\ngoog.constructNamespace_ = function(a, b) {\n  if (!COMPILED) {\n    delete goog.implicitNamespaces_[a];\n    for (var c = a; (c = c.substring(0, c.lastIndexOf(\".\"))) && !goog.getObjectByName(c);) {\n      goog.implicitNamespaces_[c] = !0;\n    }\n  }\n  goog.exportPath_(a, b);\n};\ngoog.VALID_MODULE_RE_ = /^[a-zA-Z_$][a-zA-Z0-9._$]*$/;\ngoog.module = function(a) {\n  if (!goog.isString(a) || !a || -1 == a.search(goog.VALID_MODULE_RE_)) {\n    throw Error(\"Invalid module identifier\");\n  }\n  if (!goog.isInModuleLoader_()) {\n    throw Error(\"Module \" + a + \" has been loaded incorrectly. Note, modules cannot be loaded as normal scripts. They require some kind of pre-processing step. You're likely trying to load a module via a script tag or as a part of a concatenated bundle without rewriting the module. For more info see: https://github.com/google/closure-library/wiki/goog.module:-an-ES6-module-like-alternative-to-goog.provide.\");\n  }\n  if (goog.moduleLoaderState_.moduleName) {\n    throw Error(\"goog.module may only be called once per module.\");\n  }\n  goog.moduleLoaderState_.moduleName = a;\n  if (!COMPILED) {\n    if (goog.isProvided_(a)) {\n      throw Error('Namespace \"' + a + '\" already declared.');\n    }\n    delete goog.implicitNamespaces_[a];\n  }\n};\ngoog.module.get = function(a) {\n  return goog.module.getInternal_(a);\n};\ngoog.module.getInternal_ = function(a) {\n  if (!COMPILED) {\n    if (a in goog.loadedModules_) {\n      return goog.loadedModules_[a];\n    }\n    if (!goog.implicitNamespaces_[a]) {\n      return a = goog.getObjectByName(a), null != a ? a : null;\n    }\n  }\n  return null;\n};\ngoog.moduleLoaderState_ = null;\ngoog.isInModuleLoader_ = function() {\n  return null != goog.moduleLoaderState_;\n};\ngoog.module.declareLegacyNamespace = function() {\n  if (!COMPILED && !goog.isInModuleLoader_()) {\n    throw Error(\"goog.module.declareLegacyNamespace must be called from within a goog.module\");\n  }\n  if (!COMPILED && !goog.moduleLoaderState_.moduleName) {\n    throw Error(\"goog.module must be called prior to goog.module.declareLegacyNamespace.\");\n  }\n  goog.moduleLoaderState_.declareLegacyNamespace = !0;\n};\ngoog.setTestOnly = function(a) {\n  if (goog.DISALLOW_TEST_ONLY_CODE) {\n    throw a = a || \"\", Error(\"Importing test-only code into non-debug environment\" + (a ? \": \" + a : \".\"));\n  }\n};\ngoog.forwardDeclare = function(a) {\n};\nCOMPILED || (goog.isProvided_ = function(a) {\n  return a in goog.loadedModules_ || !goog.implicitNamespaces_[a] && goog.isDefAndNotNull(goog.getObjectByName(a));\n}, goog.implicitNamespaces_ = {\"goog.module\":!0});\ngoog.getObjectByName = function(a, b) {\n  for (var c = a.split(\".\"), d = b || goog.global, e; e = c.shift();) {\n    if (goog.isDefAndNotNull(d[e])) {\n      d = d[e];\n    } else {\n      return null;\n    }\n  }\n  return d;\n};\ngoog.globalize = function(a, b) {\n  var c = b || goog.global, d;\n  for (d in a) {\n    c[d] = a[d];\n  }\n};\ngoog.addDependency = function(a, b, c, d) {\n  if (goog.DEPENDENCIES_ENABLED) {\n    var e;\n    a = a.replace(/\\\\/g, \"/\");\n    var f = goog.dependencies_;\n    d && \"boolean\" !== typeof d || (d = d ? {module:\"goog\"} : {});\n    for (var g = 0; e = b[g]; g++) {\n      f.nameToPath[e] = a, f.loadFlags[a] = d;\n    }\n    for (d = 0; b = c[d]; d++) {\n      a in f.requires || (f.requires[a] = {}), f.requires[a][b] = !0;\n    }\n  }\n};\ngoog.ENABLE_DEBUG_LOADER = !0;\ngoog.logToConsole_ = function(a) {\n  goog.global.console && goog.global.console.error(a);\n};\ngoog.require = function(a) {\n  if (!COMPILED) {\n    goog.ENABLE_DEBUG_LOADER && goog.IS_OLD_IE_ && goog.maybeProcessDeferredDep_(a);\n    if (goog.isProvided_(a)) {\n      if (goog.isInModuleLoader_()) {\n        return goog.module.getInternal_(a);\n      }\n    } else {\n      if (goog.ENABLE_DEBUG_LOADER) {\n        var b = goog.getPathFromDeps_(a);\n        if (b) {\n          goog.writeScripts_(b);\n        } else {\n          throw a = \"goog.require could not find: \" + a, goog.logToConsole_(a), Error(a);\n        }\n      }\n    }\n    return null;\n  }\n};\ngoog.basePath = \"\";\ngoog.nullFunction = function() {\n};\ngoog.abstractMethod = function() {\n  throw Error(\"unimplemented abstract method\");\n};\ngoog.addSingletonGetter = function(a) {\n  a.instance_ = void 0;\n  a.getInstance = function() {\n    if (a.instance_) {\n      return a.instance_;\n    }\n    goog.DEBUG && (goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = a);\n    return a.instance_ = new a;\n  };\n};\ngoog.instantiatedSingletons_ = [];\ngoog.LOAD_MODULE_USING_EVAL = !0;\ngoog.SEAL_MODULE_EXPORTS = goog.DEBUG;\ngoog.loadedModules_ = {};\ngoog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;\ngoog.TRANSPILE = \"detect\";\ngoog.TRANSPILER = \"transpile.js\";\ngoog.DEPENDENCIES_ENABLED && (goog.dependencies_ = {loadFlags:{}, nameToPath:{}, requires:{}, visited:{}, written:{}, deferred:{}}, goog.inHtmlDocument_ = function() {\n  var a = goog.global.document;\n  return null != a && \"write\" in a;\n}, goog.findBasePath_ = function() {\n  if (goog.isDef(goog.global.CLOSURE_BASE_PATH)) {\n    goog.basePath = goog.global.CLOSURE_BASE_PATH;\n  } else {\n    if (goog.inHtmlDocument_()) {\n      for (var a = goog.global.document.getElementsByTagName(\"SCRIPT\"), b = a.length - 1; 0 <= b; --b) {\n        var c = a[b].src, d = c.lastIndexOf(\"?\"), d = -1 == d ? c.length : d;\n        if (\"base.js\" == c.substr(d - 7, 7)) {\n          goog.basePath = c.substr(0, d - 7);\n          break;\n        }\n      }\n    }\n  }\n}, goog.importScript_ = function(a, b) {\n  (goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_)(a, b) && (goog.dependencies_.written[a] = !0);\n}, goog.IS_OLD_IE_ = !(goog.global.atob || !goog.global.document || !goog.global.document.all), goog.oldIeWaiting_ = !1, goog.importProcessedScript_ = function(a, b, c) {\n  goog.importScript_(\"\", 'goog.retrieveAndExec_(\"' + a + '\", ' + b + \", \" + c + \");\");\n}, goog.queuedModules_ = [], goog.wrapModule_ = function(a, b) {\n  return goog.LOAD_MODULE_USING_EVAL && goog.isDef(goog.global.JSON) ? \"goog.loadModule(\" + goog.global.JSON.stringify(b + \"\\n//# sourceURL=\" + a + \"\\n\") + \");\" : 'goog.loadModule(function(exports) {\"use strict\";' + b + \"\\n;return exports});\\n//# sourceURL=\" + a + \"\\n\";\n}, goog.loadQueuedModules_ = function() {\n  var a = goog.queuedModules_.length;\n  if (0 < a) {\n    var b = goog.queuedModules_;\n    goog.queuedModules_ = [];\n    for (var c = 0; c < a; c++) {\n      goog.maybeProcessDeferredPath_(b[c]);\n    }\n  }\n  goog.oldIeWaiting_ = !1;\n}, goog.maybeProcessDeferredDep_ = function(a) {\n  goog.isDeferredModule_(a) && goog.allDepsAreAvailable_(a) && (a = goog.getPathFromDeps_(a), goog.maybeProcessDeferredPath_(goog.basePath + a));\n}, goog.isDeferredModule_ = function(a) {\n  var b = (a = goog.getPathFromDeps_(a)) && goog.dependencies_.loadFlags[a] || {}, c = b.lang || \"es3\";\n  return a && (\"goog\" == b.module || goog.needsTranspile_(c)) ? goog.basePath + a in goog.dependencies_.deferred : !1;\n}, goog.allDepsAreAvailable_ = function(a) {\n  if ((a = goog.getPathFromDeps_(a)) && a in goog.dependencies_.requires) {\n    for (var b in goog.dependencies_.requires[a]) {\n      if (!goog.isProvided_(b) && !goog.isDeferredModule_(b)) {\n        return !1;\n      }\n    }\n  }\n  return !0;\n}, goog.maybeProcessDeferredPath_ = function(a) {\n  if (a in goog.dependencies_.deferred) {\n    var b = goog.dependencies_.deferred[a];\n    delete goog.dependencies_.deferred[a];\n    goog.globalEval(b);\n  }\n}, goog.loadModuleFromUrl = function(a) {\n  goog.retrieveAndExec_(a, !0, !1);\n}, goog.writeScriptSrcNode_ = function(a) {\n  goog.global.document.write('<script type=\"text/javascript\" src=\"' + a + '\">\\x3c/script>');\n}, goog.appendScriptSrcNode_ = function(a) {\n  var b = goog.global.document, c = b.createElement(\"script\");\n  c.type = \"text/javascript\";\n  c.src = a;\n  c.defer = !1;\n  c.async = !1;\n  b.head.appendChild(c);\n}, goog.writeScriptTag_ = function(a, b) {\n  if (goog.inHtmlDocument_()) {\n    var c = goog.global.document;\n    if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING && \"complete\" == c.readyState) {\n      if (/\\bdeps.js$/.test(a)) {\n        return !1;\n      }\n      throw Error('Cannot write \"' + a + '\" after document load');\n    }\n    if (void 0 === b) {\n      if (goog.IS_OLD_IE_) {\n        goog.oldIeWaiting_ = !0;\n        var d = \" onreadystatechange='goog.onScriptLoad_(this, \" + ++goog.lastNonModuleScriptIndex_ + \")' \";\n        c.write('<script type=\"text/javascript\" src=\"' + a + '\"' + d + \">\\x3c/script>\");\n      } else {\n        goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING ? goog.appendScriptSrcNode_(a) : goog.writeScriptSrcNode_(a);\n      }\n    } else {\n      c.write('<script type=\"text/javascript\">' + goog.protectScriptTag_(b) + \"\\x3c/script>\");\n    }\n    return !0;\n  }\n  return !1;\n}, goog.protectScriptTag_ = function(a) {\n  return a.replace(/<\\/(SCRIPT)/ig, \"\\\\x3c/$1\");\n}, goog.needsTranspile_ = function(a) {\n  if (\"always\" == goog.TRANSPILE) {\n    return !0;\n  }\n  if (\"never\" == goog.TRANSPILE) {\n    return !1;\n  }\n  goog.requiresTranspilation_ || (goog.requiresTranspilation_ = goog.createRequiresTranspilation_());\n  if (a in goog.requiresTranspilation_) {\n    return goog.requiresTranspilation_[a];\n  }\n  throw Error(\"Unknown language mode: \" + a);\n}, goog.requiresTranspilation_ = null, goog.lastNonModuleScriptIndex_ = 0, goog.onScriptLoad_ = function(a, b) {\n  \"complete\" == a.readyState && goog.lastNonModuleScriptIndex_ == b && goog.loadQueuedModules_();\n  return !0;\n}, goog.writeScripts_ = function(a) {\n  function b(a) {\n    if (!(a in e.written || a in e.visited)) {\n      e.visited[a] = !0;\n      if (a in e.requires) {\n        for (var f in e.requires[a]) {\n          if (!goog.isProvided_(f)) {\n            if (f in e.nameToPath) {\n              b(e.nameToPath[f]);\n            } else {\n              throw Error(\"Undefined nameToPath for \" + f);\n            }\n          }\n        }\n      }\n      a in d || (d[a] = !0, c.push(a));\n    }\n  }\n  var c = [], d = {}, e = goog.dependencies_;\n  b(a);\n  for (var f = 0; f < c.length; f++) {\n    a = c[f], goog.dependencies_.written[a] = !0;\n  }\n  var g = goog.moduleLoaderState_;\n  goog.moduleLoaderState_ = null;\n  for (f = 0; f < c.length; f++) {\n    if (a = c[f]) {\n      var h = e.loadFlags[a] || {}, k = goog.needsTranspile_(h.lang || \"es3\");\n      \"goog\" == h.module || k ? goog.importProcessedScript_(goog.basePath + a, \"goog\" == h.module, k) : goog.importScript_(goog.basePath + a);\n    } else {\n      throw goog.moduleLoaderState_ = g, Error(\"Undefined script input\");\n    }\n  }\n  goog.moduleLoaderState_ = g;\n}, goog.getPathFromDeps_ = function(a) {\n  return a in goog.dependencies_.nameToPath ? goog.dependencies_.nameToPath[a] : null;\n}, goog.findBasePath_(), goog.global.CLOSURE_NO_DEPS || goog.importScript_(goog.basePath + \"deps.js\"));\ngoog.hasBadLetScoping = null;\ngoog.useSafari10Workaround = function() {\n  if (null == goog.hasBadLetScoping) {\n    try {\n      var a = !eval('\"use strict\";let x = 1; function f() { return typeof x; };f() == \"number\";');\n    } catch (b) {\n      a = !1;\n    }\n    goog.hasBadLetScoping = a;\n  }\n  return goog.hasBadLetScoping;\n};\ngoog.workaroundSafari10EvalBug = function(a) {\n  return \"(function(){\" + a + \"\\n;})();\\n\";\n};\ngoog.loadModule = function(a) {\n  var b = goog.moduleLoaderState_;\n  try {\n    goog.moduleLoaderState_ = {moduleName:void 0, declareLegacyNamespace:!1};\n    if (goog.isFunction(a)) {\n      var c = a.call(void 0, {});\n    } else {\n      if (goog.isString(a)) {\n        goog.useSafari10Workaround() && (a = goog.workaroundSafari10EvalBug(a)), c = goog.loadModuleFromSource_.call(void 0, a);\n      } else {\n        throw Error(\"Invalid module definition\");\n      }\n    }\n    var d = goog.moduleLoaderState_.moduleName;\n    if (!goog.isString(d) || !d) {\n      throw Error('Invalid module name \"' + d + '\"');\n    }\n    goog.moduleLoaderState_.declareLegacyNamespace ? goog.constructNamespace_(d, c) : goog.SEAL_MODULE_EXPORTS && Object.seal && \"object\" == typeof c && null != c && Object.seal(c);\n    goog.loadedModules_[d] = c;\n  } finally {\n    goog.moduleLoaderState_ = b;\n  }\n};\ngoog.loadModuleFromSource_ = function(a) {\n  eval(a);\n  return {};\n};\ngoog.normalizePath_ = function(a) {\n  a = a.split(\"/\");\n  for (var b = 0; b < a.length;) {\n    \".\" == a[b] ? a.splice(b, 1) : b && \"..\" == a[b] && a[b - 1] && \"..\" != a[b - 1] ? a.splice(--b, 2) : b++;\n  }\n  return a.join(\"/\");\n};\ngoog.loadFileSync_ = function(a) {\n  if (goog.global.CLOSURE_LOAD_FILE_SYNC) {\n    return goog.global.CLOSURE_LOAD_FILE_SYNC(a);\n  }\n  try {\n    var b = new goog.global.XMLHttpRequest;\n    b.open(\"get\", a, !1);\n    b.send();\n    return 0 == b.status || 200 == b.status ? b.responseText : null;\n  } catch (c) {\n    return null;\n  }\n};\ngoog.retrieveAndExec_ = function(a, b, c) {\n  if (!COMPILED) {\n    var d = a;\n    a = goog.normalizePath_(a);\n    var e = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_, f = goog.loadFileSync_(a);\n    if (null == f) {\n      throw Error('Load of \"' + a + '\" failed');\n    }\n    c && (f = goog.transpile_.call(goog.global, f, a));\n    f = b ? goog.wrapModule_(a, f) : f + (\"\\n//# sourceURL=\" + a);\n    goog.IS_OLD_IE_ && goog.oldIeWaiting_ ? (goog.dependencies_.deferred[d] = f, goog.queuedModules_.push(d)) : e(a, f);\n  }\n};\ngoog.transpile_ = function(a, b) {\n  var c = goog.global.$jscomp;\n  c || (goog.global.$jscomp = c = {});\n  var d = c.transpile;\n  if (!d) {\n    var e = goog.basePath + goog.TRANSPILER, f = goog.loadFileSync_(e);\n    if (f) {\n      eval(f + \"\\n//# sourceURL=\" + e);\n      if (goog.global.$gwtExport && goog.global.$gwtExport.$jscomp && !goog.global.$gwtExport.$jscomp.transpile) {\n        throw Error('The transpiler did not properly export the \"transpile\" method. $gwtExport: ' + JSON.stringify(goog.global.$gwtExport));\n      }\n      goog.global.$jscomp.transpile = goog.global.$gwtExport.$jscomp.transpile;\n      c = goog.global.$jscomp;\n      d = c.transpile;\n    }\n  }\n  d || (d = c.transpile = function(a, b) {\n    goog.logToConsole_(b + \" requires transpilation but no transpiler was found.\");\n    return a;\n  });\n  return d(a, b);\n};\ngoog.typeOf = function(a) {\n  var b = typeof a;\n  if (\"object\" == b) {\n    if (a) {\n      if (a instanceof Array) {\n        return \"array\";\n      }\n      if (a instanceof Object) {\n        return b;\n      }\n      var c = Object.prototype.toString.call(a);\n      if (\"[object Window]\" == c) {\n        return \"object\";\n      }\n      if (\"[object Array]\" == c || \"number\" == typeof a.length && \"undefined\" != typeof a.splice && \"undefined\" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable(\"splice\")) {\n        return \"array\";\n      }\n      if (\"[object Function]\" == c || \"undefined\" != typeof a.call && \"undefined\" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable(\"call\")) {\n        return \"function\";\n      }\n    } else {\n      return \"null\";\n    }\n  } else {\n    if (\"function\" == b && \"undefined\" == typeof a.call) {\n      return \"object\";\n    }\n  }\n  return b;\n};\ngoog.isNull = function(a) {\n  return null === a;\n};\ngoog.isDefAndNotNull = function(a) {\n  return null != a;\n};\ngoog.isArray = function(a) {\n  return \"array\" == goog.typeOf(a);\n};\ngoog.isArrayLike = function(a) {\n  var b = goog.typeOf(a);\n  return \"array\" == b || \"object\" == b && \"number\" == typeof a.length;\n};\ngoog.isDateLike = function(a) {\n  return goog.isObject(a) && \"function\" == typeof a.getFullYear;\n};\ngoog.isString = function(a) {\n  return \"string\" == typeof a;\n};\ngoog.isBoolean = function(a) {\n  return \"boolean\" == typeof a;\n};\ngoog.isNumber = function(a) {\n  return \"number\" == typeof a;\n};\ngoog.isFunction = function(a) {\n  return \"function\" == goog.typeOf(a);\n};\ngoog.isObject = function(a) {\n  var b = typeof a;\n  return \"object\" == b && null != a || \"function\" == b;\n};\ngoog.getUid = function(a) {\n  return a[goog.UID_PROPERTY_] || (a[goog.UID_PROPERTY_] = ++goog.uidCounter_);\n};\ngoog.hasUid = function(a) {\n  return !!a[goog.UID_PROPERTY_];\n};\ngoog.removeUid = function(a) {\n  null !== a && \"removeAttribute\" in a && a.removeAttribute(goog.UID_PROPERTY_);\n  try {\n    delete a[goog.UID_PROPERTY_];\n  } catch (b) {\n  }\n};\ngoog.UID_PROPERTY_ = \"closure_uid_\" + (1e9 * Math.random() >>> 0);\ngoog.uidCounter_ = 0;\ngoog.getHashCode = goog.getUid;\ngoog.removeHashCode = goog.removeUid;\ngoog.cloneObject = function(a) {\n  var b = goog.typeOf(a);\n  if (\"object\" == b || \"array\" == b) {\n    if (a.clone) {\n      return a.clone();\n    }\n    var b = \"array\" == b ? [] : {}, c;\n    for (c in a) {\n      b[c] = goog.cloneObject(a[c]);\n    }\n    return b;\n  }\n  return a;\n};\ngoog.bindNative_ = function(a, b, c) {\n  return a.call.apply(a.bind, arguments);\n};\ngoog.bindJs_ = function(a, b, c) {\n  if (!a) {\n    throw Error();\n  }\n  if (2 < arguments.length) {\n    var d = Array.prototype.slice.call(arguments, 2);\n    return function() {\n      var c = Array.prototype.slice.call(arguments);\n      Array.prototype.unshift.apply(c, d);\n      return a.apply(b, c);\n    };\n  }\n  return function() {\n    return a.apply(b, arguments);\n  };\n};\ngoog.bind = function(a, b, c) {\n  Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf(\"native code\") ? goog.bind = goog.bindNative_ : goog.bind = goog.bindJs_;\n  return goog.bind.apply(null, arguments);\n};\ngoog.partial = function(a, b) {\n  var c = Array.prototype.slice.call(arguments, 1);\n  return function() {\n    var b = c.slice();\n    b.push.apply(b, arguments);\n    return a.apply(this, b);\n  };\n};\ngoog.mixin = function(a, b) {\n  for (var c in b) {\n    a[c] = b[c];\n  }\n};\ngoog.now = goog.TRUSTED_SITE && Date.now || function() {\n  return +new Date;\n};\ngoog.globalEval = function(a) {\n  if (goog.global.execScript) {\n    goog.global.execScript(a, \"JavaScript\");\n  } else {\n    if (goog.global.eval) {\n      if (null == goog.evalWorksForGlobals_) {\n        if (goog.global.eval(\"var _evalTest_ = 1;\"), \"undefined\" != typeof goog.global._evalTest_) {\n          try {\n            delete goog.global._evalTest_;\n          } catch (d) {\n          }\n          goog.evalWorksForGlobals_ = !0;\n        } else {\n          goog.evalWorksForGlobals_ = !1;\n        }\n      }\n      if (goog.evalWorksForGlobals_) {\n        goog.global.eval(a);\n      } else {\n        var b = goog.global.document, c = b.createElement(\"SCRIPT\");\n        c.type = \"text/javascript\";\n        c.defer = !1;\n        c.appendChild(b.createTextNode(a));\n        b.body.appendChild(c);\n        b.body.removeChild(c);\n      }\n    } else {\n      throw Error(\"goog.globalEval not available\");\n    }\n  }\n};\ngoog.evalWorksForGlobals_ = null;\ngoog.getCssName = function(a, b) {\n  if (\".\" == String(a).charAt(0)) {\n    throw Error('className passed in goog.getCssName must not start with \".\". You passed: ' + a);\n  }\n  var c = function(a) {\n    return goog.cssNameMapping_[a] || a;\n  }, d = function(a) {\n    a = a.split(\"-\");\n    for (var b = [], d = 0; d < a.length; d++) {\n      b.push(c(a[d]));\n    }\n    return b.join(\"-\");\n  }, d = goog.cssNameMapping_ ? \"BY_WHOLE\" == goog.cssNameMappingStyle_ ? c : d : function(a) {\n    return a;\n  }, d = b ? a + \"-\" + d(b) : d(a);\n  return goog.global.CLOSURE_CSS_NAME_MAP_FN ? goog.global.CLOSURE_CSS_NAME_MAP_FN(d) : d;\n};\ngoog.setCssNameMapping = function(a, b) {\n  goog.cssNameMapping_ = a;\n  goog.cssNameMappingStyle_ = b;\n};\n!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING && (goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING);\ngoog.getMsg = function(a, b) {\n  b && (a = a.replace(/\\{\\$([^}]+)}/g, function(a, d) {\n    return null != b && d in b ? b[d] : a;\n  }));\n  return a;\n};\ngoog.getMsgWithFallback = function(a, b) {\n  return a;\n};\ngoog.exportSymbol = function(a, b, c) {\n  goog.exportPath_(a, b, c);\n};\ngoog.exportProperty = function(a, b, c) {\n  a[b] = c;\n};\ngoog.inherits = function(a, b) {\n  function c() {\n  }\n  c.prototype = b.prototype;\n  a.superClass_ = b.prototype;\n  a.prototype = new c;\n  a.prototype.constructor = a;\n  a.base = function(a, c, f) {\n    for (var d = Array(arguments.length - 2), e = 2; e < arguments.length; e++) {\n      d[e - 2] = arguments[e];\n    }\n    return b.prototype[c].apply(a, d);\n  };\n};\ngoog.base = function(a, b, c) {\n  var d = arguments.callee.caller;\n  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !d) {\n    throw Error(\"arguments.caller not defined.  goog.base() cannot be used with strict mode code. See http://www.ecma-international.org/ecma-262/5.1/#sec-C\");\n  }\n  if (d.superClass_) {\n    for (var e = Array(arguments.length - 1), f = 1; f < arguments.length; f++) {\n      e[f - 1] = arguments[f];\n    }\n    return d.superClass_.constructor.apply(a, e);\n  }\n  e = Array(arguments.length - 2);\n  for (f = 2; f < arguments.length; f++) {\n    e[f - 2] = arguments[f];\n  }\n  for (var f = !1, g = a.constructor; g; g = g.superClass_ && g.superClass_.constructor) {\n    if (g.prototype[b] === d) {\n      f = !0;\n    } else {\n      if (f) {\n        return g.prototype[b].apply(a, e);\n      }\n    }\n  }\n  if (a[b] === d) {\n    return a.constructor.prototype[b].apply(a, e);\n  }\n  throw Error(\"goog.base called from a method of one name to a method of a different name\");\n};\ngoog.scope = function(a) {\n  if (goog.isInModuleLoader_()) {\n    throw Error(\"goog.scope is not supported within a goog.module.\");\n  }\n  a.call(goog.global);\n};\nCOMPILED || (goog.global.COMPILED = COMPILED);\ngoog.defineClass = function(a, b) {\n  var c = b.constructor, d = b.statics;\n  c && c != Object.prototype.constructor || (c = function() {\n    throw Error(\"cannot instantiate an interface (no constructor defined).\");\n  });\n  c = goog.defineClass.createSealingConstructor_(c, a);\n  a && goog.inherits(c, a);\n  delete b.constructor;\n  delete b.statics;\n  goog.defineClass.applyProperties_(c.prototype, b);\n  null != d && (d instanceof Function ? d(c) : goog.defineClass.applyProperties_(c, d));\n  return c;\n};\ngoog.defineClass.SEAL_CLASS_INSTANCES = goog.DEBUG;\ngoog.defineClass.createSealingConstructor_ = function(a, b) {\n  if (!goog.defineClass.SEAL_CLASS_INSTANCES) {\n    return a;\n  }\n  var c = !goog.defineClass.isUnsealable_(b), d = function() {\n    var b = a.apply(this, arguments) || this;\n    b[goog.UID_PROPERTY_] = b[goog.UID_PROPERTY_];\n    this.constructor === d && c && Object.seal instanceof Function && Object.seal(b);\n    return b;\n  };\n  return d;\n};\ngoog.defineClass.isUnsealable_ = function(a) {\n  return a && a.prototype && a.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_];\n};\ngoog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = \"constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf\".split(\" \");\ngoog.defineClass.applyProperties_ = function(a, b) {\n  for (var c in b) {\n    Object.prototype.hasOwnProperty.call(b, c) && (a[c] = b[c]);\n  }\n  for (var d = 0; d < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length; d++) {\n    c = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[d], Object.prototype.hasOwnProperty.call(b, c) && (a[c] = b[c]);\n  }\n};\ngoog.tagUnsealableClass = function(a) {\n  !COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES && (a.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = !0);\n};\ngoog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = \"goog_defineClass_legacy_unsealable\";\ngoog.createRequiresTranspilation_ = function() {\n  function a(a, b) {\n    d ? c[a] = !0 : b() ? c[a] = !1 : d = c[a] = !0;\n  }\n  function b(a) {\n    try {\n      return !!eval(a);\n    } catch (g) {\n      return !1;\n    }\n  }\n  var c = {es3:!1}, d = !1, e = goog.global.navigator && goog.global.navigator.userAgent ? goog.global.navigator.userAgent : \"\";\n  a(\"es5\", function() {\n    return b(\"[1,].length==1\");\n  });\n  a(\"es6\", function() {\n    var a = e.match(/Edge\\/(\\d+)(\\.\\d)*/i);\n    return a && 15 > Number(a[1]) ? !1 : b('(()=>{\"use strict\";class X{constructor(){if(new.target!=String)throw 1;this.x=42}}let q=Reflect.construct(X,[],String);if(q.x!=42||!(q instanceof String))throw 1;for(const a of[2,3]){if(a==2)continue;function f(z={a}){let a=0;return z.a}{function f(){return 0;}}return f()==3}})()');\n  });\n  a(\"es6-impl\", function() {\n    return !0;\n  });\n  a(\"es7\", function() {\n    return b(\"2 ** 2 == 4\");\n  });\n  a(\"es8\", function() {\n    return b(\"async () => 1, true\");\n  });\n  return c;\n};\ngoog.debug = {};\ngoog.debug.Error = function(a) {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, goog.debug.Error);\n  } else {\n    var b = Error().stack;\n    b && (this.stack = b);\n  }\n  a && (this.message = String(a));\n  this.reportErrorToServer = !0;\n};\ngoog.inherits(goog.debug.Error, Error);\ngoog.debug.Error.prototype.name = \"CustomError\";\ngoog.dom = {};\ngoog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};\ngoog.string = {};\ngoog.string.DETECT_DOUBLE_ESCAPING = !1;\ngoog.string.FORCE_NON_DOM_HTML_UNESCAPING = !1;\ngoog.string.Unicode = {NBSP:\"\\u00a0\"};\ngoog.string.startsWith = function(a, b) {\n  return 0 == a.lastIndexOf(b, 0);\n};\ngoog.string.endsWith = function(a, b) {\n  var c = a.length - b.length;\n  return 0 <= c && a.indexOf(b, c) == c;\n};\ngoog.string.caseInsensitiveStartsWith = function(a, b) {\n  return 0 == goog.string.caseInsensitiveCompare(b, a.substr(0, b.length));\n};\ngoog.string.caseInsensitiveEndsWith = function(a, b) {\n  return 0 == goog.string.caseInsensitiveCompare(b, a.substr(a.length - b.length, b.length));\n};\ngoog.string.caseInsensitiveEquals = function(a, b) {\n  return a.toLowerCase() == b.toLowerCase();\n};\ngoog.string.subs = function(a, b) {\n  for (var c = a.split(\"%s\"), d = \"\", e = Array.prototype.slice.call(arguments, 1); e.length && 1 < c.length;) {\n    d += c.shift() + e.shift();\n  }\n  return d + c.join(\"%s\");\n};\ngoog.string.collapseWhitespace = function(a) {\n  return a.replace(/[\\s\\xa0]+/g, \" \").replace(/^\\s+|\\s+$/g, \"\");\n};\ngoog.string.isEmptyOrWhitespace = function(a) {\n  return /^[\\s\\xa0]*$/.test(a);\n};\ngoog.string.isEmptyString = function(a) {\n  return 0 == a.length;\n};\ngoog.string.isEmpty = goog.string.isEmptyOrWhitespace;\ngoog.string.isEmptyOrWhitespaceSafe = function(a) {\n  return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(a));\n};\ngoog.string.isEmptySafe = goog.string.isEmptyOrWhitespaceSafe;\ngoog.string.isBreakingWhitespace = function(a) {\n  return !/[^\\t\\n\\r ]/.test(a);\n};\ngoog.string.isAlpha = function(a) {\n  return !/[^a-zA-Z]/.test(a);\n};\ngoog.string.isNumeric = function(a) {\n  return !/[^0-9]/.test(a);\n};\ngoog.string.isAlphaNumeric = function(a) {\n  return !/[^a-zA-Z0-9]/.test(a);\n};\ngoog.string.isSpace = function(a) {\n  return \" \" == a;\n};\ngoog.string.isUnicodeChar = function(a) {\n  return 1 == a.length && \" \" <= a && \"~\" >= a || \"\\u0080\" <= a && \"\\ufffd\" >= a;\n};\ngoog.string.stripNewlines = function(a) {\n  return a.replace(/(\\r\\n|\\r|\\n)+/g, \" \");\n};\ngoog.string.canonicalizeNewlines = function(a) {\n  return a.replace(/(\\r\\n|\\r|\\n)/g, \"\\n\");\n};\ngoog.string.normalizeWhitespace = function(a) {\n  return a.replace(/\\xa0|\\s/g, \" \");\n};\ngoog.string.normalizeSpaces = function(a) {\n  return a.replace(/\\xa0|[ \\t]+/g, \" \");\n};\ngoog.string.collapseBreakingSpaces = function(a) {\n  return a.replace(/[\\t\\r\\n ]+/g, \" \").replace(/^[\\t\\r\\n ]+|[\\t\\r\\n ]+$/g, \"\");\n};\ngoog.string.trim = goog.TRUSTED_SITE && String.prototype.trim ? function(a) {\n  return a.trim();\n} : function(a) {\n  return a.replace(/^[\\s\\xa0]+|[\\s\\xa0]+$/g, \"\");\n};\ngoog.string.trimLeft = function(a) {\n  return a.replace(/^[\\s\\xa0]+/, \"\");\n};\ngoog.string.trimRight = function(a) {\n  return a.replace(/[\\s\\xa0]+$/, \"\");\n};\ngoog.string.caseInsensitiveCompare = function(a, b) {\n  var c = String(a).toLowerCase(), d = String(b).toLowerCase();\n  return c < d ? -1 : c == d ? 0 : 1;\n};\ngoog.string.numberAwareCompare_ = function(a, b, c) {\n  if (a == b) {\n    return 0;\n  }\n  if (!a) {\n    return -1;\n  }\n  if (!b) {\n    return 1;\n  }\n  for (var d = a.toLowerCase().match(c), e = b.toLowerCase().match(c), f = Math.min(d.length, e.length), g = 0; g < f; g++) {\n    c = d[g];\n    var h = e[g];\n    if (c != h) {\n      return a = parseInt(c, 10), !isNaN(a) && (b = parseInt(h, 10), !isNaN(b) && a - b) ? a - b : c < h ? -1 : 1;\n    }\n  }\n  return d.length != e.length ? d.length - e.length : a < b ? -1 : 1;\n};\ngoog.string.intAwareCompare = function(a, b) {\n  return goog.string.numberAwareCompare_(a, b, /\\d+|\\D+/g);\n};\ngoog.string.floatAwareCompare = function(a, b) {\n  return goog.string.numberAwareCompare_(a, b, /\\d+|\\.\\d+|\\D+/g);\n};\ngoog.string.numerateCompare = goog.string.floatAwareCompare;\ngoog.string.urlEncode = function(a) {\n  return encodeURIComponent(String(a));\n};\ngoog.string.urlDecode = function(a) {\n  return decodeURIComponent(a.replace(/\\+/g, \" \"));\n};\ngoog.string.newLineToBr = function(a, b) {\n  return a.replace(/(\\r\\n|\\r|\\n)/g, b ? \"<br />\" : \"<br>\");\n};\ngoog.string.htmlEscape = function(a, b) {\n  if (b) {\n    a = a.replace(goog.string.AMP_RE_, \"&amp;\").replace(goog.string.LT_RE_, \"&lt;\").replace(goog.string.GT_RE_, \"&gt;\").replace(goog.string.QUOT_RE_, \"&quot;\").replace(goog.string.SINGLE_QUOTE_RE_, \"&#39;\").replace(goog.string.NULL_RE_, \"&#0;\"), goog.string.DETECT_DOUBLE_ESCAPING && (a = a.replace(goog.string.E_RE_, \"&#101;\"));\n  } else {\n    if (!goog.string.ALL_RE_.test(a)) {\n      return a;\n    }\n    -1 != a.indexOf(\"&\") && (a = a.replace(goog.string.AMP_RE_, \"&amp;\"));\n    -1 != a.indexOf(\"<\") && (a = a.replace(goog.string.LT_RE_, \"&lt;\"));\n    -1 != a.indexOf(\">\") && (a = a.replace(goog.string.GT_RE_, \"&gt;\"));\n    -1 != a.indexOf('\"') && (a = a.replace(goog.string.QUOT_RE_, \"&quot;\"));\n    -1 != a.indexOf(\"'\") && (a = a.replace(goog.string.SINGLE_QUOTE_RE_, \"&#39;\"));\n    -1 != a.indexOf(\"\\x00\") && (a = a.replace(goog.string.NULL_RE_, \"&#0;\"));\n    goog.string.DETECT_DOUBLE_ESCAPING && -1 != a.indexOf(\"e\") && (a = a.replace(goog.string.E_RE_, \"&#101;\"));\n  }\n  return a;\n};\ngoog.string.AMP_RE_ = /&/g;\ngoog.string.LT_RE_ = /</g;\ngoog.string.GT_RE_ = />/g;\ngoog.string.QUOT_RE_ = /\"/g;\ngoog.string.SINGLE_QUOTE_RE_ = /'/g;\ngoog.string.NULL_RE_ = /\\x00/g;\ngoog.string.E_RE_ = /e/g;\ngoog.string.ALL_RE_ = goog.string.DETECT_DOUBLE_ESCAPING ? /[\\x00&<>\"'e]/ : /[\\x00&<>\"']/;\ngoog.string.unescapeEntities = function(a) {\n  return goog.string.contains(a, \"&\") ? !goog.string.FORCE_NON_DOM_HTML_UNESCAPING && \"document\" in goog.global ? goog.string.unescapeEntitiesUsingDom_(a) : goog.string.unescapePureXmlEntities_(a) : a;\n};\ngoog.string.unescapeEntitiesWithDocument = function(a, b) {\n  return goog.string.contains(a, \"&\") ? goog.string.unescapeEntitiesUsingDom_(a, b) : a;\n};\ngoog.string.unescapeEntitiesUsingDom_ = function(a, b) {\n  var c = {\"&amp;\":\"&\", \"&lt;\":\"<\", \"&gt;\":\">\", \"&quot;\":'\"'};\n  var d = b ? b.createElement(\"div\") : goog.global.document.createElement(\"div\");\n  return a.replace(goog.string.HTML_ENTITY_PATTERN_, function(a, b) {\n    var e = c[a];\n    if (e) {\n      return e;\n    }\n    if (\"#\" == b.charAt(0)) {\n      var f = Number(\"0\" + b.substr(1));\n      isNaN(f) || (e = String.fromCharCode(f));\n    }\n    e || (d.innerHTML = a + \" \", e = d.firstChild.nodeValue.slice(0, -1));\n    return c[a] = e;\n  });\n};\ngoog.string.unescapePureXmlEntities_ = function(a) {\n  return a.replace(/&([^;]+);/g, function(a, c) {\n    switch(c) {\n      case \"amp\":\n        return \"&\";\n      case \"lt\":\n        return \"<\";\n      case \"gt\":\n        return \">\";\n      case \"quot\":\n        return '\"';\n      default:\n        if (\"#\" == c.charAt(0)) {\n          var b = Number(\"0\" + c.substr(1));\n          if (!isNaN(b)) {\n            return String.fromCharCode(b);\n          }\n        }\n        return a;\n    }\n  });\n};\ngoog.string.HTML_ENTITY_PATTERN_ = /&([^;\\s<&]+);?/g;\ngoog.string.whitespaceEscape = function(a, b) {\n  return goog.string.newLineToBr(a.replace(/  /g, \" &#160;\"), b);\n};\ngoog.string.preserveSpaces = function(a) {\n  return a.replace(/(^|[\\n ]) /g, \"$1\" + goog.string.Unicode.NBSP);\n};\ngoog.string.stripQuotes = function(a, b) {\n  for (var c = b.length, d = 0; d < c; d++) {\n    var e = 1 == c ? b : b.charAt(d);\n    if (a.charAt(0) == e && a.charAt(a.length - 1) == e) {\n      return a.substring(1, a.length - 1);\n    }\n  }\n  return a;\n};\ngoog.string.truncate = function(a, b, c) {\n  c && (a = goog.string.unescapeEntities(a));\n  a.length > b && (a = a.substring(0, b - 3) + \"...\");\n  c && (a = goog.string.htmlEscape(a));\n  return a;\n};\ngoog.string.truncateMiddle = function(a, b, c, d) {\n  c && (a = goog.string.unescapeEntities(a));\n  if (d && a.length > b) {\n    d > b && (d = b);\n    var e = a.length - d;\n    a = a.substring(0, b - d) + \"...\" + a.substring(e);\n  } else {\n    a.length > b && (d = Math.floor(b / 2), e = a.length - d, a = a.substring(0, d + b % 2) + \"...\" + a.substring(e));\n  }\n  c && (a = goog.string.htmlEscape(a));\n  return a;\n};\ngoog.string.specialEscapeChars_ = {\"\\x00\":\"\\\\0\", \"\\b\":\"\\\\b\", \"\\f\":\"\\\\f\", \"\\n\":\"\\\\n\", \"\\r\":\"\\\\r\", \"\\t\":\"\\\\t\", \"\\x0B\":\"\\\\x0B\", '\"':'\\\\\"', \"\\\\\":\"\\\\\\\\\", \"<\":\"<\"};\ngoog.string.jsEscapeCache_ = {\"'\":\"\\\\'\"};\ngoog.string.quote = function(a) {\n  a = String(a);\n  for (var b = ['\"'], c = 0; c < a.length; c++) {\n    var d = a.charAt(c), e = d.charCodeAt(0);\n    b[c + 1] = goog.string.specialEscapeChars_[d] || (31 < e && 127 > e ? d : goog.string.escapeChar(d));\n  }\n  b.push('\"');\n  return b.join(\"\");\n};\ngoog.string.escapeString = function(a) {\n  for (var b = [], c = 0; c < a.length; c++) {\n    b[c] = goog.string.escapeChar(a.charAt(c));\n  }\n  return b.join(\"\");\n};\ngoog.string.escapeChar = function(a) {\n  if (a in goog.string.jsEscapeCache_) {\n    return goog.string.jsEscapeCache_[a];\n  }\n  if (a in goog.string.specialEscapeChars_) {\n    return goog.string.jsEscapeCache_[a] = goog.string.specialEscapeChars_[a];\n  }\n  var b = a.charCodeAt(0);\n  if (31 < b && 127 > b) {\n    var c = a;\n  } else {\n    if (256 > b) {\n      if (c = \"\\\\x\", 16 > b || 256 < b) {\n        c += \"0\";\n      }\n    } else {\n      c = \"\\\\u\", 4096 > b && (c += \"0\");\n    }\n    c += b.toString(16).toUpperCase();\n  }\n  return goog.string.jsEscapeCache_[a] = c;\n};\ngoog.string.contains = function(a, b) {\n  return -1 != a.indexOf(b);\n};\ngoog.string.caseInsensitiveContains = function(a, b) {\n  return goog.string.contains(a.toLowerCase(), b.toLowerCase());\n};\ngoog.string.countOf = function(a, b) {\n  return a && b ? a.split(b).length - 1 : 0;\n};\ngoog.string.removeAt = function(a, b, c) {\n  var d = a;\n  0 <= b && b < a.length && 0 < c && (d = a.substr(0, b) + a.substr(b + c, a.length - b - c));\n  return d;\n};\ngoog.string.remove = function(a, b) {\n  return a.replace(b, \"\");\n};\ngoog.string.removeAll = function(a, b) {\n  var c = new RegExp(goog.string.regExpEscape(b), \"g\");\n  return a.replace(c, \"\");\n};\ngoog.string.replaceAll = function(a, b, c) {\n  b = new RegExp(goog.string.regExpEscape(b), \"g\");\n  return a.replace(b, c.replace(/\\$/g, \"$$$$\"));\n};\ngoog.string.regExpEscape = function(a) {\n  return String(a).replace(/([-()\\[\\]{}+?*.$\\^|,:#<!\\\\])/g, \"\\\\$1\").replace(/\\x08/g, \"\\\\x08\");\n};\ngoog.string.repeat = String.prototype.repeat ? function(a, b) {\n  return a.repeat(b);\n} : function(a, b) {\n  return Array(b + 1).join(a);\n};\ngoog.string.padNumber = function(a, b, c) {\n  a = goog.isDef(c) ? a.toFixed(c) : String(a);\n  c = a.indexOf(\".\");\n  -1 == c && (c = a.length);\n  return goog.string.repeat(\"0\", Math.max(0, b - c)) + a;\n};\ngoog.string.makeSafe = function(a) {\n  return null == a ? \"\" : String(a);\n};\ngoog.string.buildString = function(a) {\n  return Array.prototype.join.call(arguments, \"\");\n};\ngoog.string.getRandomString = function() {\n  return Math.floor(2147483648 * Math.random()).toString(36) + Math.abs(Math.floor(2147483648 * Math.random()) ^ goog.now()).toString(36);\n};\ngoog.string.compareVersions = function(a, b) {\n  for (var c = 0, d = goog.string.trim(String(a)).split(\".\"), e = goog.string.trim(String(b)).split(\".\"), f = Math.max(d.length, e.length), g = 0; 0 == c && g < f; g++) {\n    var h = d[g] || \"\", k = e[g] || \"\";\n    do {\n      h = /(\\d*)(\\D*)(.*)/.exec(h) || [\"\", \"\", \"\", \"\"];\n      k = /(\\d*)(\\D*)(.*)/.exec(k) || [\"\", \"\", \"\", \"\"];\n      if (0 == h[0].length && 0 == k[0].length) {\n        break;\n      }\n      var c = 0 == h[1].length ? 0 : parseInt(h[1], 10), m = 0 == k[1].length ? 0 : parseInt(k[1], 10), c = goog.string.compareElements_(c, m) || goog.string.compareElements_(0 == h[2].length, 0 == k[2].length) || goog.string.compareElements_(h[2], k[2]), h = h[3], k = k[3];\n    } while (0 == c);\n  }\n  return c;\n};\ngoog.string.compareElements_ = function(a, b) {\n  return a < b ? -1 : a > b ? 1 : 0;\n};\ngoog.string.hashCode = function(a) {\n  for (var b = 0, c = 0; c < a.length; ++c) {\n    b = 31 * b + a.charCodeAt(c) >>> 0;\n  }\n  return b;\n};\ngoog.string.uniqueStringCounter_ = 2147483648 * Math.random() | 0;\ngoog.string.createUniqueString = function() {\n  return \"goog_\" + goog.string.uniqueStringCounter_++;\n};\ngoog.string.toNumber = function(a) {\n  var b = Number(a);\n  return 0 == b && goog.string.isEmptyOrWhitespace(a) ? NaN : b;\n};\ngoog.string.isLowerCamelCase = function(a) {\n  return /^[a-z]+([A-Z][a-z]*)*$/.test(a);\n};\ngoog.string.isUpperCamelCase = function(a) {\n  return /^([A-Z][a-z]*)+$/.test(a);\n};\ngoog.string.toCamelCase = function(a) {\n  return String(a).replace(/\\-([a-z])/g, function(a, c) {\n    return c.toUpperCase();\n  });\n};\ngoog.string.toSelectorCase = function(a) {\n  return String(a).replace(/([A-Z])/g, \"-$1\").toLowerCase();\n};\ngoog.string.toTitleCase = function(a, b) {\n  var c = goog.isString(b) ? goog.string.regExpEscape(b) : \"\\\\s\";\n  return a.replace(new RegExp(\"(^\" + (c ? \"|[\" + c + \"]+\" : \"\") + \")([a-z])\", \"g\"), function(a, b, c) {\n    return b + c.toUpperCase();\n  });\n};\ngoog.string.capitalize = function(a) {\n  return String(a.charAt(0)).toUpperCase() + String(a.substr(1)).toLowerCase();\n};\ngoog.string.parseInt = function(a) {\n  isFinite(a) && (a = String(a));\n  return goog.isString(a) ? /^\\s*-?0x/i.test(a) ? parseInt(a, 16) : parseInt(a, 10) : NaN;\n};\ngoog.string.splitLimit = function(a, b, c) {\n  a = a.split(b);\n  for (var d = []; 0 < c && a.length;) {\n    d.push(a.shift()), c--;\n  }\n  a.length && d.push(a.join(b));\n  return d;\n};\ngoog.string.lastComponent = function(a, b) {\n  if (b) {\n    \"string\" == typeof b && (b = [b]);\n  } else {\n    return a;\n  }\n  for (var c = -1, d = 0; d < b.length; d++) {\n    if (\"\" != b[d]) {\n      var e = a.lastIndexOf(b[d]);\n      e > c && (c = e);\n    }\n  }\n  return -1 == c ? a : a.slice(c + 1);\n};\ngoog.string.editDistance = function(a, b) {\n  var c = [], d = [];\n  if (a == b) {\n    return 0;\n  }\n  if (!a.length || !b.length) {\n    return Math.max(a.length, b.length);\n  }\n  for (var e = 0; e < b.length + 1; e++) {\n    c[e] = e;\n  }\n  for (e = 0; e < a.length; e++) {\n    d[0] = e + 1;\n    for (var f = 0; f < b.length; f++) {\n      d[f + 1] = Math.min(d[f] + 1, c[f + 1] + 1, c[f] + Number(a[e] != b[f]));\n    }\n    for (f = 0; f < c.length; f++) {\n      c[f] = d[f];\n    }\n  }\n  return d[b.length];\n};\ngoog.asserts = {};\ngoog.asserts.ENABLE_ASSERTS = goog.DEBUG;\ngoog.asserts.AssertionError = function(a, b) {\n  b.unshift(a);\n  goog.debug.Error.call(this, goog.string.subs.apply(null, b));\n  b.shift();\n  this.messagePattern = a;\n};\ngoog.inherits(goog.asserts.AssertionError, goog.debug.Error);\ngoog.asserts.AssertionError.prototype.name = \"AssertionError\";\ngoog.asserts.DEFAULT_ERROR_HANDLER = function(a) {\n  throw a;\n};\ngoog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;\ngoog.asserts.doAssertFailure_ = function(a, b, c, d) {\n  var e = \"Assertion failed\";\n  if (c) {\n    e += \": \" + c;\n    var f = d;\n  } else {\n    a && (e += \": \" + a, f = b);\n  }\n  a = new goog.asserts.AssertionError(\"\" + e, f || []);\n  goog.asserts.errorHandler_(a);\n};\ngoog.asserts.setErrorHandler = function(a) {\n  goog.asserts.ENABLE_ASSERTS && (goog.asserts.errorHandler_ = a);\n};\ngoog.asserts.assert = function(a, b, c) {\n  goog.asserts.ENABLE_ASSERTS && !a && goog.asserts.doAssertFailure_(\"\", null, b, Array.prototype.slice.call(arguments, 2));\n  return a;\n};\ngoog.asserts.fail = function(a, b) {\n  goog.asserts.ENABLE_ASSERTS && goog.asserts.errorHandler_(new goog.asserts.AssertionError(\"Failure\" + (a ? \": \" + a : \"\"), Array.prototype.slice.call(arguments, 1)));\n};\ngoog.asserts.assertNumber = function(a, b, c) {\n  goog.asserts.ENABLE_ASSERTS && !goog.isNumber(a) && goog.asserts.doAssertFailure_(\"Expected number but got %s: %s.\", [goog.typeOf(a), a], b, Array.prototype.slice.call(arguments, 2));\n  return a;\n};\ngoog.asserts.assertString = function(a, b, c) {\n  goog.asserts.ENABLE_ASSERTS && !goog.isString(a) && goog.asserts.doAssertFailure_(\"Expected string but got %s: %s.\", [goog.typeOf(a), a], b, Array.prototype.slice.call(arguments, 2));\n  return a;\n};\ngoog.asserts.assertFunction = function(a, b, c) {\n  goog.asserts.ENABLE_ASSERTS && !goog.isFunction(a) && goog.asserts.doAssertFailure_(\"Expected function but got %s: %s.\", [goog.typeOf(a), a], b, Array.prototype.slice.call(arguments, 2));\n  return a;\n};\ngoog.asserts.assertObject = function(a, b, c) {\n  goog.asserts.ENABLE_ASSERTS && !goog.isObject(a) && goog.asserts.doAssertFailure_(\"Expected object but got %s: %s.\", [goog.typeOf(a), a], b, Array.prototype.slice.call(arguments, 2));\n  return a;\n};\ngoog.asserts.assertArray = function(a, b, c) {\n  goog.asserts.ENABLE_ASSERTS && !goog.isArray(a) && goog.asserts.doAssertFailure_(\"Expected array but got %s: %s.\", [goog.typeOf(a), a], b, Array.prototype.slice.call(arguments, 2));\n  return a;\n};\ngoog.asserts.assertBoolean = function(a, b, c) {\n  goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(a) && goog.asserts.doAssertFailure_(\"Expected boolean but got %s: %s.\", [goog.typeOf(a), a], b, Array.prototype.slice.call(arguments, 2));\n  return a;\n};\ngoog.asserts.assertElement = function(a, b, c) {\n  !goog.asserts.ENABLE_ASSERTS || goog.isObject(a) && a.nodeType == goog.dom.NodeType.ELEMENT || goog.asserts.doAssertFailure_(\"Expected Element but got %s: %s.\", [goog.typeOf(a), a], b, Array.prototype.slice.call(arguments, 2));\n  return a;\n};\ngoog.asserts.assertInstanceof = function(a, b, c, d) {\n  !goog.asserts.ENABLE_ASSERTS || a instanceof b || goog.asserts.doAssertFailure_(\"Expected instanceof %s but got %s.\", [goog.asserts.getType_(b), goog.asserts.getType_(a)], c, Array.prototype.slice.call(arguments, 3));\n  return a;\n};\ngoog.asserts.assertObjectPrototypeIsIntact = function() {\n  for (var a in Object.prototype) {\n    goog.asserts.fail(a + \" should not be enumerable in Object.prototype.\");\n  }\n};\ngoog.asserts.getType_ = function(a) {\n  return a instanceof Function ? a.displayName || a.name || \"unknown type name\" : a instanceof Object ? a.constructor.displayName || a.constructor.name || Object.prototype.toString.call(a) : null === a ? \"null\" : typeof a;\n};\ngoog.object = {};\ngoog.object.is = function(a, b) {\n  return a === b ? 0 !== a || 1 / a === 1 / b : a !== a && b !== b;\n};\ngoog.object.forEach = function(a, b, c) {\n  for (var d in a) {\n    b.call(c, a[d], d, a);\n  }\n};\ngoog.object.filter = function(a, b, c) {\n  var d = {}, e;\n  for (e in a) {\n    b.call(c, a[e], e, a) && (d[e] = a[e]);\n  }\n  return d;\n};\ngoog.object.map = function(a, b, c) {\n  var d = {}, e;\n  for (e in a) {\n    d[e] = b.call(c, a[e], e, a);\n  }\n  return d;\n};\ngoog.object.some = function(a, b, c) {\n  for (var d in a) {\n    if (b.call(c, a[d], d, a)) {\n      return !0;\n    }\n  }\n  return !1;\n};\ngoog.object.every = function(a, b, c) {\n  for (var d in a) {\n    if (!b.call(c, a[d], d, a)) {\n      return !1;\n    }\n  }\n  return !0;\n};\ngoog.object.getCount = function(a) {\n  var b = 0, c;\n  for (c in a) {\n    b++;\n  }\n  return b;\n};\ngoog.object.getAnyKey = function(a) {\n  for (var b in a) {\n    return b;\n  }\n};\ngoog.object.getAnyValue = function(a) {\n  for (var b in a) {\n    return a[b];\n  }\n};\ngoog.object.contains = function(a, b) {\n  return goog.object.containsValue(a, b);\n};\ngoog.object.getValues = function(a) {\n  var b = [], c = 0, d;\n  for (d in a) {\n    b[c++] = a[d];\n  }\n  return b;\n};\ngoog.object.getKeys = function(a) {\n  var b = [], c = 0, d;\n  for (d in a) {\n    b[c++] = d;\n  }\n  return b;\n};\ngoog.object.getValueByKeys = function(a, b) {\n  for (var c = goog.isArrayLike(b), d = c ? b : arguments, c = c ? 0 : 1; c < d.length && (a = a[d[c]], goog.isDef(a)); c++) {\n  }\n  return a;\n};\ngoog.object.containsKey = function(a, b) {\n  return null !== a && b in a;\n};\ngoog.object.containsValue = function(a, b) {\n  for (var c in a) {\n    if (a[c] == b) {\n      return !0;\n    }\n  }\n  return !1;\n};\ngoog.object.findKey = function(a, b, c) {\n  for (var d in a) {\n    if (b.call(c, a[d], d, a)) {\n      return d;\n    }\n  }\n};\ngoog.object.findValue = function(a, b, c) {\n  return (b = goog.object.findKey(a, b, c)) && a[b];\n};\ngoog.object.isEmpty = function(a) {\n  for (var b in a) {\n    return !1;\n  }\n  return !0;\n};\ngoog.object.clear = function(a) {\n  for (var b in a) {\n    delete a[b];\n  }\n};\ngoog.object.remove = function(a, b) {\n  var c;\n  (c = b in a) && delete a[b];\n  return c;\n};\ngoog.object.add = function(a, b, c) {\n  if (null !== a && b in a) {\n    throw Error('The object already contains the key \"' + b + '\"');\n  }\n  goog.object.set(a, b, c);\n};\ngoog.object.get = function(a, b, c) {\n  return null !== a && b in a ? a[b] : c;\n};\ngoog.object.set = function(a, b, c) {\n  a[b] = c;\n};\ngoog.object.setIfUndefined = function(a, b, c) {\n  return b in a ? a[b] : a[b] = c;\n};\ngoog.object.setWithReturnValueIfNotSet = function(a, b, c) {\n  if (b in a) {\n    return a[b];\n  }\n  c = c();\n  return a[b] = c;\n};\ngoog.object.equals = function(a, b) {\n  for (var c in a) {\n    if (!(c in b) || a[c] !== b[c]) {\n      return !1;\n    }\n  }\n  for (c in b) {\n    if (!(c in a)) {\n      return !1;\n    }\n  }\n  return !0;\n};\ngoog.object.clone = function(a) {\n  var b = {}, c;\n  for (c in a) {\n    b[c] = a[c];\n  }\n  return b;\n};\ngoog.object.unsafeClone = function(a) {\n  var b = goog.typeOf(a);\n  if (\"object\" == b || \"array\" == b) {\n    if (goog.isFunction(a.clone)) {\n      return a.clone();\n    }\n    var b = \"array\" == b ? [] : {}, c;\n    for (c in a) {\n      b[c] = goog.object.unsafeClone(a[c]);\n    }\n    return b;\n  }\n  return a;\n};\ngoog.object.transpose = function(a) {\n  var b = {}, c;\n  for (c in a) {\n    b[a[c]] = c;\n  }\n  return b;\n};\ngoog.object.PROTOTYPE_FIELDS_ = \"constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf\".split(\" \");\ngoog.object.extend = function(a, b) {\n  for (var c, d, e = 1; e < arguments.length; e++) {\n    d = arguments[e];\n    for (c in d) {\n      a[c] = d[c];\n    }\n    for (var f = 0; f < goog.object.PROTOTYPE_FIELDS_.length; f++) {\n      c = goog.object.PROTOTYPE_FIELDS_[f], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);\n    }\n  }\n};\ngoog.object.create = function(a) {\n  var b = arguments.length;\n  if (1 == b && goog.isArray(arguments[0])) {\n    return goog.object.create.apply(null, arguments[0]);\n  }\n  if (b % 2) {\n    throw Error(\"Uneven number of arguments\");\n  }\n  for (var c = {}, d = 0; d < b; d += 2) {\n    c[arguments[d]] = arguments[d + 1];\n  }\n  return c;\n};\ngoog.object.createSet = function(a) {\n  var b = arguments.length;\n  if (1 == b && goog.isArray(arguments[0])) {\n    return goog.object.createSet.apply(null, arguments[0]);\n  }\n  for (var c = {}, d = 0; d < b; d++) {\n    c[arguments[d]] = !0;\n  }\n  return c;\n};\ngoog.object.createImmutableView = function(a) {\n  var b = a;\n  Object.isFrozen && !Object.isFrozen(a) && (b = Object.create(a), Object.freeze(b));\n  return b;\n};\ngoog.object.isImmutableView = function(a) {\n  return !!Object.isFrozen && Object.isFrozen(a);\n};\ngoog.object.getAllPropertyNames = function(a, b, c) {\n  if (!a) {\n    return [];\n  }\n  if (!Object.getOwnPropertyNames || !Object.getPrototypeOf) {\n    return goog.object.getKeys(a);\n  }\n  for (var d = {}; a && (a !== Object.prototype || b) && (a !== Function.prototype || c);) {\n    for (var e = Object.getOwnPropertyNames(a), f = 0; f < e.length; f++) {\n      d[e[f]] = !0;\n    }\n    a = Object.getPrototypeOf(a);\n  }\n  return goog.object.getKeys(d);\n};\ngoog.reflect = {};\ngoog.reflect.object = function(a, b) {\n  return b;\n};\ngoog.reflect.objectProperty = function(a, b) {\n  return a;\n};\ngoog.reflect.sinkValue = function(a) {\n  goog.reflect.sinkValue[\" \"](a);\n  return a;\n};\ngoog.reflect.sinkValue[\" \"] = goog.nullFunction;\ngoog.reflect.canAccessProperty = function(a, b) {\n  try {\n    return goog.reflect.sinkValue(a[b]), !0;\n  } catch (c) {\n  }\n  return !1;\n};\ngoog.reflect.cache = function(a, b, c, d) {\n  d = d ? d(b) : b;\n  return Object.prototype.hasOwnProperty.call(a, d) ? a[d] : a[d] = c(b);\n};\ngoog.math = {};\ngoog.math.Long = function(a, b) {\n  this.low_ = a | 0;\n  this.high_ = b | 0;\n};\ngoog.math.Long.IntCache_ = {};\ngoog.math.Long.valueCache_ = {};\ngoog.math.Long.getCachedIntValue_ = function(a) {\n  return goog.reflect.cache(goog.math.Long.IntCache_, a, function(a) {\n    return new goog.math.Long(a, 0 > a ? -1 : 0);\n  });\n};\ngoog.math.Long.MAX_VALUE_FOR_RADIX_ = \"  111111111111111111111111111111111111111111111111111111111111111 2021110011022210012102010021220101220221 13333333333333333333333333333333 1104332401304422434310311212 1540241003031030222122211 22341010611245052052300 777777777777777777777 67404283172107811827 9223372036854775807 1728002635214590697 41a792678515120367 10b269549075433c37 4340724c6c71dc7a7 160e2ad3246366807 7fffffffffffffff 33d3d8307b214008 16agh595df825fa7 ba643dci0ffeehh 5cbfjia3fh26ja7 2heiciiie82dh97 1adaibb21dckfa7 i6k448cf4192c2 acd772jnc9l0l7 64ie1focnn5g77 3igoecjbmca687 27c48l5b37oaop 1bk39f3ah3dmq7 q1se8f0m04isb hajppbc1fc207 bm03i95hia437 7vvvvvvvvvvvv 5hg4ck9jd4u37 3tdtk1v8j6tpp 2pijmikexrxp7 1y2p0ij32e8e7\".split(\" \");\ngoog.math.Long.MIN_VALUE_FOR_RADIX_ = \"  -1000000000000000000000000000000000000000000000000000000000000000 -2021110011022210012102010021220101220222 -20000000000000000000000000000000 -1104332401304422434310311213 -1540241003031030222122212 -22341010611245052052301 -1000000000000000000000 -67404283172107811828 -9223372036854775808 -1728002635214590698 -41a792678515120368 -10b269549075433c38 -4340724c6c71dc7a8 -160e2ad3246366808 -8000000000000000 -33d3d8307b214009 -16agh595df825fa8 -ba643dci0ffeehi -5cbfjia3fh26ja8 -2heiciiie82dh98 -1adaibb21dckfa8 -i6k448cf4192c3 -acd772jnc9l0l8 -64ie1focnn5g78 -3igoecjbmca688 -27c48l5b37oaoq -1bk39f3ah3dmq8 -q1se8f0m04isc -hajppbc1fc208 -bm03i95hia438 -8000000000000 -5hg4ck9jd4u38 -3tdtk1v8j6tpq -2pijmikexrxp8 -1y2p0ij32e8e8\".split(\" \");\ngoog.math.Long.fromInt = function(a) {\n  var b = a | 0;\n  goog.asserts.assert(a === b, \"value should be a 32-bit integer\");\n  return -128 <= b && 128 > b ? goog.math.Long.getCachedIntValue_(b) : new goog.math.Long(b, 0 > b ? -1 : 0);\n};\ngoog.math.Long.fromNumber = function(a) {\n  return isNaN(a) ? goog.math.Long.getZero() : a <= -goog.math.Long.TWO_PWR_63_DBL_ ? goog.math.Long.getMinValue() : a + 1 >= goog.math.Long.TWO_PWR_63_DBL_ ? goog.math.Long.getMaxValue() : 0 > a ? goog.math.Long.fromNumber(-a).negate() : new goog.math.Long(a % goog.math.Long.TWO_PWR_32_DBL_ | 0, a / goog.math.Long.TWO_PWR_32_DBL_ | 0);\n};\ngoog.math.Long.fromBits = function(a, b) {\n  return new goog.math.Long(a, b);\n};\ngoog.math.Long.fromString = function(a, b) {\n  if (0 == a.length) {\n    throw Error(\"number format error: empty string\");\n  }\n  var c = b || 10;\n  if (2 > c || 36 < c) {\n    throw Error(\"radix out of range: \" + c);\n  }\n  if (\"-\" == a.charAt(0)) {\n    return goog.math.Long.fromString(a.substring(1), c).negate();\n  }\n  if (0 <= a.indexOf(\"-\")) {\n    throw Error('number format error: interior \"-\" character: ' + a);\n  }\n  for (var d = goog.math.Long.fromNumber(Math.pow(c, 8)), e = goog.math.Long.getZero(), f = 0; f < a.length; f += 8) {\n    var g = Math.min(8, a.length - f), h = parseInt(a.substring(f, f + g), c);\n    8 > g ? (g = goog.math.Long.fromNumber(Math.pow(c, g)), e = e.multiply(g).add(goog.math.Long.fromNumber(h))) : (e = e.multiply(d), e = e.add(goog.math.Long.fromNumber(h)));\n  }\n  return e;\n};\ngoog.math.Long.isStringInRange = function(a, b) {\n  var c = b || 10;\n  if (2 > c || 36 < c) {\n    throw Error(\"radix out of range: \" + c);\n  }\n  c = \"-\" == a.charAt(0) ? goog.math.Long.MIN_VALUE_FOR_RADIX_[c] : goog.math.Long.MAX_VALUE_FOR_RADIX_[c];\n  return a.length < c.length ? !0 : a.length == c.length && a <= c ? !0 : !1;\n};\ngoog.math.Long.TWO_PWR_16_DBL_ = 65536;\ngoog.math.Long.TWO_PWR_32_DBL_ = goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;\ngoog.math.Long.TWO_PWR_64_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;\ngoog.math.Long.TWO_PWR_63_DBL_ = goog.math.Long.TWO_PWR_64_DBL_ / 2;\ngoog.math.Long.getZero = function() {\n  return goog.math.Long.getCachedIntValue_(0);\n};\ngoog.math.Long.getOne = function() {\n  return goog.math.Long.getCachedIntValue_(1);\n};\ngoog.math.Long.getNegOne = function() {\n  return goog.math.Long.getCachedIntValue_(-1);\n};\ngoog.math.Long.getMaxValue = function() {\n  return goog.reflect.cache(goog.math.Long.valueCache_, goog.math.Long.ValueCacheId_.MAX_VALUE, function() {\n    return goog.math.Long.fromBits(-1, 2147483647);\n  });\n};\ngoog.math.Long.getMinValue = function() {\n  return goog.reflect.cache(goog.math.Long.valueCache_, goog.math.Long.ValueCacheId_.MIN_VALUE, function() {\n    return goog.math.Long.fromBits(0, -2147483648);\n  });\n};\ngoog.math.Long.getTwoPwr24 = function() {\n  return goog.reflect.cache(goog.math.Long.valueCache_, goog.math.Long.ValueCacheId_.TWO_PWR_24, function() {\n    return goog.math.Long.fromInt(16777216);\n  });\n};\ngoog.math.Long.prototype.toInt = function() {\n  return this.low_;\n};\ngoog.math.Long.prototype.toNumber = function() {\n  return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();\n};\ngoog.math.Long.prototype.toString = function(a) {\n  a = a || 10;\n  if (2 > a || 36 < a) {\n    throw Error(\"radix out of range: \" + a);\n  }\n  if (this.isZero()) {\n    return \"0\";\n  }\n  if (this.isNegative()) {\n    if (this.equals(goog.math.Long.getMinValue())) {\n      var b = goog.math.Long.fromNumber(a);\n      var c = this.div(b);\n      b = c.multiply(b).subtract(this);\n      return c.toString(a) + b.toInt().toString(a);\n    }\n    return \"-\" + this.negate().toString(a);\n  }\n  c = goog.math.Long.fromNumber(Math.pow(a, 6));\n  b = this;\n  for (var d = \"\";;) {\n    var e = b.div(c), f = (b.subtract(e.multiply(c)).toInt() >>> 0).toString(a);\n    b = e;\n    if (b.isZero()) {\n      return f + d;\n    }\n    for (; 6 > f.length;) {\n      f = \"0\" + f;\n    }\n    d = \"\" + f + d;\n  }\n};\ngoog.math.Long.prototype.getHighBits = function() {\n  return this.high_;\n};\ngoog.math.Long.prototype.getLowBits = function() {\n  return this.low_;\n};\ngoog.math.Long.prototype.getLowBitsUnsigned = function() {\n  return 0 <= this.low_ ? this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;\n};\ngoog.math.Long.prototype.getNumBitsAbs = function() {\n  if (this.isNegative()) {\n    return this.equals(goog.math.Long.getMinValue()) ? 64 : this.negate().getNumBitsAbs();\n  }\n  for (var a = 0 != this.high_ ? this.high_ : this.low_, b = 31; 0 < b && 0 == (a & 1 << b); b--) {\n  }\n  return 0 != this.high_ ? b + 33 : b + 1;\n};\ngoog.math.Long.prototype.isZero = function() {\n  return 0 == this.high_ && 0 == this.low_;\n};\ngoog.math.Long.prototype.isNegative = function() {\n  return 0 > this.high_;\n};\ngoog.math.Long.prototype.isOdd = function() {\n  return 1 == (this.low_ & 1);\n};\ngoog.math.Long.prototype.equals = function(a) {\n  return this.high_ == a.high_ && this.low_ == a.low_;\n};\ngoog.math.Long.prototype.notEquals = function(a) {\n  return this.high_ != a.high_ || this.low_ != a.low_;\n};\ngoog.math.Long.prototype.lessThan = function(a) {\n  return 0 > this.compare(a);\n};\ngoog.math.Long.prototype.lessThanOrEqual = function(a) {\n  return 0 >= this.compare(a);\n};\ngoog.math.Long.prototype.greaterThan = function(a) {\n  return 0 < this.compare(a);\n};\ngoog.math.Long.prototype.greaterThanOrEqual = function(a) {\n  return 0 <= this.compare(a);\n};\ngoog.math.Long.prototype.compare = function(a) {\n  if (this.equals(a)) {\n    return 0;\n  }\n  var b = this.isNegative(), c = a.isNegative();\n  return b && !c ? -1 : !b && c ? 1 : this.subtract(a).isNegative() ? -1 : 1;\n};\ngoog.math.Long.prototype.negate = function() {\n  return this.equals(goog.math.Long.getMinValue()) ? goog.math.Long.getMinValue() : this.not().add(goog.math.Long.getOne());\n};\ngoog.math.Long.prototype.add = function(a) {\n  var b = this.high_ >>> 16, c = this.high_ & 65535, d = this.low_ >>> 16, e = a.high_ >>> 16, f = a.high_ & 65535, g = a.low_ >>> 16;\n  a = 0 + ((this.low_ & 65535) + (a.low_ & 65535));\n  g = 0 + (a >>> 16) + (d + g);\n  d = 0 + (g >>> 16);\n  d += c + f;\n  b = 0 + (d >>> 16) + (b + e) & 65535;\n  return goog.math.Long.fromBits((g & 65535) << 16 | a & 65535, b << 16 | d & 65535);\n};\ngoog.math.Long.prototype.subtract = function(a) {\n  return this.add(a.negate());\n};\ngoog.math.Long.prototype.multiply = function(a) {\n  if (this.isZero() || a.isZero()) {\n    return goog.math.Long.getZero();\n  }\n  if (this.equals(goog.math.Long.getMinValue())) {\n    return a.isOdd() ? goog.math.Long.getMinValue() : goog.math.Long.getZero();\n  }\n  if (a.equals(goog.math.Long.getMinValue())) {\n    return this.isOdd() ? goog.math.Long.getMinValue() : goog.math.Long.getZero();\n  }\n  if (this.isNegative()) {\n    return a.isNegative() ? this.negate().multiply(a.negate()) : this.negate().multiply(a).negate();\n  }\n  if (a.isNegative()) {\n    return this.multiply(a.negate()).negate();\n  }\n  if (this.lessThan(goog.math.Long.getTwoPwr24()) && a.lessThan(goog.math.Long.getTwoPwr24())) {\n    return goog.math.Long.fromNumber(this.toNumber() * a.toNumber());\n  }\n  var b = this.high_ >>> 16, c = this.high_ & 65535, d = this.low_ >>> 16, e = this.low_ & 65535, f = a.high_ >>> 16, g = a.high_ & 65535, h = a.low_ >>> 16;\n  a = a.low_ & 65535;\n  var k = 0 + e * a;\n  var m = 0 + (k >>> 16) + d * a;\n  var l = 0 + (m >>> 16);\n  m = (m & 65535) + e * h;\n  l += m >>> 16;\n  l += c * a;\n  var n = 0 + (l >>> 16);\n  l = (l & 65535) + d * h;\n  n += l >>> 16;\n  l = (l & 65535) + e * g;\n  n = n + (l >>> 16) + (b * a + c * h + d * g + e * f) & 65535;\n  return goog.math.Long.fromBits((m & 65535) << 16 | k & 65535, n << 16 | l & 65535);\n};\ngoog.math.Long.prototype.div = function(a) {\n  if (a.isZero()) {\n    throw Error(\"division by zero\");\n  }\n  if (this.isZero()) {\n    return goog.math.Long.getZero();\n  }\n  if (this.equals(goog.math.Long.getMinValue())) {\n    if (a.equals(goog.math.Long.getOne()) || a.equals(goog.math.Long.getNegOne())) {\n      return goog.math.Long.getMinValue();\n    }\n    if (a.equals(goog.math.Long.getMinValue())) {\n      return goog.math.Long.getOne();\n    }\n    var b = this.shiftRight(1);\n    b = b.div(a).shiftLeft(1);\n    if (b.equals(goog.math.Long.getZero())) {\n      return a.isNegative() ? goog.math.Long.getOne() : goog.math.Long.getNegOne();\n    }\n    var c = this.subtract(a.multiply(b));\n    return b.add(c.div(a));\n  }\n  if (a.equals(goog.math.Long.getMinValue())) {\n    return goog.math.Long.getZero();\n  }\n  if (this.isNegative()) {\n    return a.isNegative() ? this.negate().div(a.negate()) : this.negate().div(a).negate();\n  }\n  if (a.isNegative()) {\n    return this.div(a.negate()).negate();\n  }\n  var d = goog.math.Long.getZero();\n  for (c = this; c.greaterThanOrEqual(a);) {\n    b = Math.max(1, Math.floor(c.toNumber() / a.toNumber()));\n    for (var e = Math.ceil(Math.log(b) / Math.LN2), e = 48 >= e ? 1 : Math.pow(2, e - 48), f = goog.math.Long.fromNumber(b), g = f.multiply(a); g.isNegative() || g.greaterThan(c);) {\n      b -= e, f = goog.math.Long.fromNumber(b), g = f.multiply(a);\n    }\n    f.isZero() && (f = goog.math.Long.getOne());\n    d = d.add(f);\n    c = c.subtract(g);\n  }\n  return d;\n};\ngoog.math.Long.prototype.modulo = function(a) {\n  return this.subtract(this.div(a).multiply(a));\n};\ngoog.math.Long.prototype.not = function() {\n  return goog.math.Long.fromBits(~this.low_, ~this.high_);\n};\ngoog.math.Long.prototype.and = function(a) {\n  return goog.math.Long.fromBits(this.low_ & a.low_, this.high_ & a.high_);\n};\ngoog.math.Long.prototype.or = function(a) {\n  return goog.math.Long.fromBits(this.low_ | a.low_, this.high_ | a.high_);\n};\ngoog.math.Long.prototype.xor = function(a) {\n  return goog.math.Long.fromBits(this.low_ ^ a.low_, this.high_ ^ a.high_);\n};\ngoog.math.Long.prototype.shiftLeft = function(a) {\n  a &= 63;\n  if (0 == a) {\n    return this;\n  }\n  var b = this.low_;\n  return 32 > a ? goog.math.Long.fromBits(b << a, this.high_ << a | b >>> 32 - a) : goog.math.Long.fromBits(0, b << a - 32);\n};\ngoog.math.Long.prototype.shiftRight = function(a) {\n  a &= 63;\n  if (0 == a) {\n    return this;\n  }\n  var b = this.high_;\n  return 32 > a ? goog.math.Long.fromBits(this.low_ >>> a | b << 32 - a, b >> a) : goog.math.Long.fromBits(b >> a - 32, 0 <= b ? 0 : -1);\n};\ngoog.math.Long.prototype.shiftRightUnsigned = function(a) {\n  a &= 63;\n  if (0 == a) {\n    return this;\n  }\n  var b = this.high_;\n  return 32 > a ? goog.math.Long.fromBits(this.low_ >>> a | b << 32 - a, b >>> a) : 32 == a ? goog.math.Long.fromBits(b, 0) : goog.math.Long.fromBits(b >>> a - 32, 0);\n};\ngoog.math.Long.ValueCacheId_ = {MAX_VALUE:1, MIN_VALUE:2, TWO_PWR_24:6};\nvar com = {cognitect:{}};\ncom.cognitect.transit = {};\ncom.cognitect.transit.delimiters = {};\ncom.cognitect.transit.delimiters.ESC = \"~\";\ncom.cognitect.transit.delimiters.TAG = \"#\";\ncom.cognitect.transit.delimiters.SUB = \"^\";\ncom.cognitect.transit.delimiters.RES = \"`\";\ncom.cognitect.transit.delimiters.ESC_TAG = \"~#\";\ncom.cognitect.transit.caching = {};\ncom.cognitect.transit.caching.MIN_SIZE_CACHEABLE = 3;\ncom.cognitect.transit.caching.BASE_CHAR_IDX = 48;\ncom.cognitect.transit.caching.CACHE_CODE_DIGITS = 44;\ncom.cognitect.transit.caching.MAX_CACHE_ENTRIES = com.cognitect.transit.caching.CACHE_CODE_DIGITS * com.cognitect.transit.caching.CACHE_CODE_DIGITS;\ncom.cognitect.transit.caching.MAX_CACHE_SIZE = 4096;\ncom.cognitect.transit.caching.isCacheable = function(a, b) {\n  if (a.length > com.cognitect.transit.caching.MIN_SIZE_CACHEABLE) {\n    if (b) {\n      return !0;\n    }\n    var c = a.charAt(0), d = a.charAt(1);\n    return c === com.cognitect.transit.delimiters.ESC ? \":\" === d || \"$\" === d || \"#\" === d : !1;\n  }\n  return !1;\n};\ncom.cognitect.transit.caching.idxToCode = function(a) {\n  var b = Math.floor(a / com.cognitect.transit.caching.CACHE_CODE_DIGITS);\n  a = String.fromCharCode(a % com.cognitect.transit.caching.CACHE_CODE_DIGITS + com.cognitect.transit.caching.BASE_CHAR_IDX);\n  return 0 === b ? com.cognitect.transit.delimiters.SUB + a : com.cognitect.transit.delimiters.SUB + String.fromCharCode(b + com.cognitect.transit.caching.BASE_CHAR_IDX) + a;\n};\ncom.cognitect.transit.caching.WriteCache = function() {\n  this.cacheSize = this.gen = this.idx = 0;\n  this.cache = {};\n};\ncom.cognitect.transit.caching.WriteCache.prototype.write = function(a, b) {\n  if (com.cognitect.transit.caching.isCacheable(a, b)) {\n    this.cacheSize === com.cognitect.transit.caching.MAX_CACHE_SIZE ? (this.clear(), this.gen = 0, this.cache = {}) : this.idx === com.cognitect.transit.caching.MAX_CACHE_ENTRIES && this.clear();\n    var c = this.cache[a];\n    return null == c ? (this.cache[a] = [com.cognitect.transit.caching.idxToCode(this.idx), this.gen], this.idx++, a) : c[1] != this.gen ? (c[1] = this.gen, c[0] = com.cognitect.transit.caching.idxToCode(this.idx), this.idx++, a) : c[0];\n  }\n  return a;\n};\ncom.cognitect.transit.caching.WriteCache.prototype.clear = function() {\n  this.idx = 0;\n  this.gen++;\n};\ncom.cognitect.transit.caching.writeCache = function() {\n  return new com.cognitect.transit.caching.WriteCache;\n};\ncom.cognitect.transit.caching.isCacheCode = function(a) {\n  return a.charAt(0) === com.cognitect.transit.delimiters.SUB && \" \" !== a.charAt(1);\n};\ncom.cognitect.transit.caching.codeToIdx = function(a) {\n  if (2 === a.length) {\n    return a.charCodeAt(1) - com.cognitect.transit.caching.BASE_CHAR_IDX;\n  }\n  var b = (a.charCodeAt(1) - com.cognitect.transit.caching.BASE_CHAR_IDX) * com.cognitect.transit.caching.CACHE_CODE_DIGITS;\n  a = a.charCodeAt(2) - com.cognitect.transit.caching.BASE_CHAR_IDX;\n  return b + a;\n};\ncom.cognitect.transit.caching.ReadCache = function() {\n  this.idx = 0;\n  this.cache = [];\n};\ncom.cognitect.transit.caching.ReadCache.prototype.write = function(a, b) {\n  this.idx == com.cognitect.transit.caching.MAX_CACHE_ENTRIES && (this.idx = 0);\n  this.cache[this.idx] = a;\n  this.idx++;\n  return a;\n};\ncom.cognitect.transit.caching.ReadCache.prototype.read = function(a, b) {\n  return this.cache[com.cognitect.transit.caching.codeToIdx(a)];\n};\ncom.cognitect.transit.caching.ReadCache.prototype.clear = function() {\n  this.idx = 0;\n};\ncom.cognitect.transit.caching.readCache = function() {\n  return new com.cognitect.transit.caching.ReadCache;\n};\ncom.cognitect.transit.util = {};\ncom.cognitect.transit.util.objectKeys = \"undefined\" != typeof Object.keys ? function(a) {\n  return Object.keys(a);\n} : function(a) {\n  return goog.object.getKeys(a);\n};\ncom.cognitect.transit.util.isArray = \"undefined\" != typeof Array.isArray ? function(a) {\n  return Array.isArray(a);\n} : function(a) {\n  return \"array\" === goog.typeOf(a);\n};\ncom.cognitect.transit.util.chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\ncom.cognitect.transit.util.randInt = function(a) {\n  return Math.round(Math.random() * a);\n};\ncom.cognitect.transit.util.randHex = function() {\n  return com.cognitect.transit.util.randInt(15).toString(16);\n};\ncom.cognitect.transit.util.randomUUID = function() {\n  var a = (8 | 3 & com.cognitect.transit.util.randInt(14)).toString(16);\n  return com.cognitect.transit.util.randHex() + com.cognitect.transit.util.randHex() + com.cognitect.transit.util.randHex() + com.cognitect.transit.util.randHex() + com.cognitect.transit.util.randHex() + com.cognitect.transit.util.randHex() + com.cognitect.transit.util.randHex() + com.cognitect.transit.util.randHex() + \"-\" + com.cognitect.transit.util.randHex() + com.cognitect.transit.util.randHex() + com.cognitect.transit.util.randHex() + com.cognitect.transit.util.randHex() + \"-4\" + com.cognitect.transit.util.randHex() + \n  com.cognitect.transit.util.randHex() + com.cognitect.transit.util.randHex() + \"-\" + a + com.cognitect.transit.util.randHex() + com.cognitect.transit.util.randHex() + com.cognitect.transit.util.randHex() + \"-\" + com.cognitect.transit.util.randHex() + com.cognitect.transit.util.randHex() + com.cognitect.transit.util.randHex() + com.cognitect.transit.util.randHex() + com.cognitect.transit.util.randHex() + com.cognitect.transit.util.randHex() + com.cognitect.transit.util.randHex() + com.cognitect.transit.util.randHex() + \n  com.cognitect.transit.util.randHex() + com.cognitect.transit.util.randHex() + com.cognitect.transit.util.randHex() + com.cognitect.transit.util.randHex();\n};\ncom.cognitect.transit.util.btoa = function(a) {\n  if (\"undefined\" != typeof btoa) {\n    return btoa(a);\n  }\n  a = String(a);\n  for (var b, c, d = 0, e = com.cognitect.transit.util.chars, f = \"\"; a.charAt(d | 0) || (e = \"=\", d % 1); f += e.charAt(63 & b >> 8 - d % 1 * 8)) {\n    c = a.charCodeAt(d += .75);\n    if (255 < c) {\n      throw Error(\"'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\");\n    }\n    b = b << 8 | c;\n  }\n  return f;\n};\ncom.cognitect.transit.util.atob = function(a) {\n  if (\"undefined\" != typeof atob) {\n    return atob(a);\n  }\n  a = String(a).replace(/=+$/, \"\");\n  if (1 == a.length % 4) {\n    throw Error(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n  }\n  for (var b = 0, c, d, e = 0, f = \"\"; d = a.charAt(e++); ~d && (c = b % 4 ? 64 * c + d : d, b++ % 4) ? f += String.fromCharCode(255 & c >> (-2 * b & 6)) : 0) {\n    d = com.cognitect.transit.util.chars.indexOf(d);\n  }\n  return f;\n};\ncom.cognitect.transit.util.Uint8ToBase64 = function(a) {\n  for (var b = 0, c = a.length, d = \"\", e; b < c;) {\n    e = a.subarray(b, Math.min(b + 32768, c)), d += String.fromCharCode.apply(null, e), b += 32768;\n  }\n  return com.cognitect.transit.util.btoa(d);\n};\ncom.cognitect.transit.util.Base64ToUint8 = function(a) {\n  a = com.cognitect.transit.util.atob(a);\n  for (var b = a.length, c = new Uint8Array(b), d = 0; d < b; d++) {\n    var e = a.charCodeAt(d);\n    c[d] = e;\n  }\n  return c;\n};\ncom.cognitect.transit.eq = {};\ncom.cognitect.transit.eq.hashCodeProperty = \"transit$hashCode$\";\ncom.cognitect.transit.eq.hashCodeCounter = 1;\ncom.cognitect.transit.eq.equals = function(a, b) {\n  if (null == a) {\n    return null == b;\n  }\n  if (a === b) {\n    return !0;\n  }\n  if (\"object\" === typeof a) {\n    if (com.cognitect.transit.util.isArray(a)) {\n      if (com.cognitect.transit.util.isArray(b) && a.length === b.length) {\n        for (var c = 0; c < a.length; c++) {\n          if (!com.cognitect.transit.eq.equals(a[c], b[c])) {\n            return !1;\n          }\n        }\n        return !0;\n      }\n      return !1;\n    }\n    if (a.com$cognitect$transit$equals) {\n      return a.com$cognitect$transit$equals(b);\n    }\n    if (null != b && \"object\" === typeof b) {\n      if (b.com$cognitect$transit$equals) {\n        return b.com$cognitect$transit$equals(a);\n      }\n      var c = 0, d = com.cognitect.transit.util.objectKeys(b).length, e;\n      for (e in a) {\n        if (a.hasOwnProperty(e) && (c++, !b.hasOwnProperty(e) || !com.cognitect.transit.eq.equals(a[e], b[e]))) {\n          return !1;\n        }\n      }\n      return c === d;\n    }\n  }\n  return !1;\n};\ncom.cognitect.transit.eq.hashCombine = function(a, b) {\n  return a ^ b + 2654435769 + (a << 6) + (a >> 2);\n};\ncom.cognitect.transit.eq.stringCodeCache = {};\ncom.cognitect.transit.eq.stringCodeCacheSize = 0;\ncom.cognitect.transit.eq.STR_CACHE_MAX = 256;\ncom.cognitect.transit.eq.hashString = function(a) {\n  var b = com.cognitect.transit.eq.stringCodeCache[a];\n  if (null != b) {\n    return b;\n  }\n  for (var c = b = 0; c < a.length; ++c) {\n    b = 31 * b + a.charCodeAt(c), b %= 4294967296;\n  }\n  com.cognitect.transit.eq.stringCodeCacheSize++;\n  com.cognitect.transit.eq.stringCodeCacheSize >= com.cognitect.transit.eq.STR_CACHE_MAX && (com.cognitect.transit.eq.stringCodeCache = {}, com.cognitect.transit.eq.stringCodeCacheSize = 1);\n  return com.cognitect.transit.eq.stringCodeCache[a] = b;\n};\ncom.cognitect.transit.eq.hashMapLike = function(a) {\n  var b = 0;\n  if (null != a.forEach) {\n    a.forEach(function(a, c, d) {\n      b = (b + (com.cognitect.transit.eq.hashCode(c) ^ com.cognitect.transit.eq.hashCode(a))) % 4503599627370496;\n    });\n  } else {\n    for (var c = com.cognitect.transit.util.objectKeys(a), d = 0; d < c.length; d++) {\n      var e = c[d], f = a[e], b = (b + (com.cognitect.transit.eq.hashCode(e) ^ com.cognitect.transit.eq.hashCode(f))) % 4503599627370496;\n    }\n  }\n  return b;\n};\ncom.cognitect.transit.eq.hashArrayLike = function(a) {\n  var b = 0;\n  if (com.cognitect.transit.util.isArray(a)) {\n    for (var c = 0; c < a.length; c++) {\n      b = com.cognitect.transit.eq.hashCombine(b, com.cognitect.transit.eq.hashCode(a[c]));\n    }\n  } else {\n    a.forEach && a.forEach(function(a, c) {\n      b = com.cognitect.transit.eq.hashCombine(b, com.cognitect.transit.eq.hashCode(a));\n    });\n  }\n  return b;\n};\ncom.cognitect.transit.eq.hashCode = function(a) {\n  if (null == a) {\n    return 0;\n  }\n  switch(typeof a) {\n    case \"number\":\n      return a;\n    case \"boolean\":\n      return !0 === a ? 1 : 0;\n    case \"string\":\n      return com.cognitect.transit.eq.hashString(a);\n    case \"function\":\n      var b = a[com.cognitect.transit.eq.hashCodeProperty];\n      b || (b = com.cognitect.transit.eq.hashCodeCounter, \"undefined\" != typeof Object.defineProperty ? Object.defineProperty(a, com.cognitect.transit.eq.hashCodeProperty, {value:b, enumerable:!1}) : a[com.cognitect.transit.eq.hashCodeProperty] = b, com.cognitect.transit.eq.hashCodeCounter++);\n      return b;\n    default:\n      return a instanceof Date ? a.valueOf() : com.cognitect.transit.util.isArray(a) ? com.cognitect.transit.eq.hashArrayLike(a) : a.com$cognitect$transit$hashCode ? a.com$cognitect$transit$hashCode() : com.cognitect.transit.eq.hashMapLike(a);\n  }\n};\ncom.cognitect.transit.eq.extendToEQ = function(a, b) {\n  a.com$cognitect$transit$hashCode = b.hashCode;\n  a.com$cognitect$transit$equals = b.equals;\n  return a;\n};\ncom.cognitect.transit.types = {};\ncom.cognitect.transit.types.ITERATOR = \"undefined\" != typeof Symbol ? Symbol.iterator : \"@@iterator\";\ncom.cognitect.transit.types.TaggedValue = function(a, b) {\n  this.tag = a;\n  this.rep = b;\n  this.hashCode = -1;\n};\ncom.cognitect.transit.types.TaggedValue.prototype.toString = function() {\n  return \"[TaggedValue: \" + this.tag + \", \" + this.rep + \"]\";\n};\ncom.cognitect.transit.types.TaggedValue.prototype.equiv = function(a) {\n  return com.cognitect.transit.eq.equals(this, a);\n};\ncom.cognitect.transit.types.TaggedValue.prototype.equiv = com.cognitect.transit.types.TaggedValue.prototype.equiv;\ncom.cognitect.transit.types.TaggedValue.prototype.com$cognitect$transit$equals = function(a) {\n  return a instanceof com.cognitect.transit.types.TaggedValue ? this.tag === a.tag && com.cognitect.transit.eq.equals(this.rep, a.rep) : !1;\n};\ncom.cognitect.transit.types.TaggedValue.prototype.com$cognitect$transit$hashCode = function() {\n  -1 === this.hashCode && (this.hashCode = com.cognitect.transit.eq.hashCombine(com.cognitect.transit.eq.hashCode(this.tag), com.cognitect.transit.eq.hashCode(this.rep)));\n  return this.hashCode;\n};\ncom.cognitect.transit.types.taggedValue = function(a, b) {\n  return new com.cognitect.transit.types.TaggedValue(a, b);\n};\ncom.cognitect.transit.types.isTaggedValue = function(a) {\n  return a instanceof com.cognitect.transit.types.TaggedValue;\n};\ncom.cognitect.transit.types.nullValue = function() {\n  return null;\n};\ncom.cognitect.transit.types.boolValue = function(a) {\n  return \"t\" === a;\n};\ncom.cognitect.transit.types.MAX_INT = goog.math.Long.fromString(\"9007199254740991\");\ncom.cognitect.transit.types.MIN_INT = goog.math.Long.fromString(\"-9007199254740991\");\ncom.cognitect.transit.types.intValue = function(a) {\n  if (\"number\" === typeof a || a instanceof goog.math.Long) {\n    return a;\n  }\n  a = goog.math.Long.fromString(a, 10);\n  return a.greaterThan(com.cognitect.transit.types.MAX_INT) || a.lessThan(com.cognitect.transit.types.MIN_INT) ? a : a.toNumber();\n};\ngoog.math.Long.prototype.equiv = function(a) {\n  return com.cognitect.transit.eq.equals(this, a);\n};\ngoog.math.Long.prototype.equiv = goog.math.Long.prototype.equiv;\ngoog.math.Long.prototype.com$cognitect$transit$equals = function(a) {\n  return a instanceof goog.math.Long && this.equals(a);\n};\ngoog.math.Long.prototype.com$cognitect$transit$hashCode = function() {\n  return this.toInt();\n};\ncom.cognitect.transit.types.isInteger = function(a) {\n  return a instanceof goog.math.Long ? !0 : \"number\" === typeof a && !isNaN(a) && Infinity !== a && parseFloat(a) === parseInt(a, 10);\n};\ncom.cognitect.transit.types.floatValue = function(a) {\n  return parseFloat(a);\n};\ncom.cognitect.transit.types.bigInteger = function(a) {\n  return com.cognitect.transit.types.taggedValue(\"n\", a);\n};\ncom.cognitect.transit.types.isBigInteger = function(a) {\n  return a instanceof com.cognitect.transit.types.TaggedValue && \"n\" === a.tag;\n};\ncom.cognitect.transit.types.bigDecimalValue = function(a) {\n  return com.cognitect.transit.types.taggedValue(\"f\", a);\n};\ncom.cognitect.transit.types.isBigDecimal = function(a) {\n  return a instanceof com.cognitect.transit.types.TaggedValue && \"f\" === a.tag;\n};\ncom.cognitect.transit.types.charValue = function(a) {\n  return a;\n};\ncom.cognitect.transit.types.Keyword = function(a) {\n  this._name = a;\n  this.hashCode = -1;\n};\ncom.cognitect.transit.types.Keyword.prototype.toString = function() {\n  return \":\" + this._name;\n};\ncom.cognitect.transit.types.Keyword.prototype.namespace = function() {\n  var a = this._name.indexOf(\"/\");\n  return -1 != a ? this._name.substring(0, a) : null;\n};\ncom.cognitect.transit.types.Keyword.prototype.name = function() {\n  var a = this._name.indexOf(\"/\");\n  return -1 != a ? this._name.substring(a + 1, this._name.length) : this._name;\n};\ncom.cognitect.transit.types.Keyword.prototype.equiv = function(a) {\n  return com.cognitect.transit.eq.equals(this, a);\n};\ncom.cognitect.transit.types.Keyword.prototype.equiv = com.cognitect.transit.types.Keyword.prototype.equiv;\ncom.cognitect.transit.types.Keyword.prototype.com$cognitect$transit$equals = function(a) {\n  return a instanceof com.cognitect.transit.types.Keyword && this._name == a._name;\n};\ncom.cognitect.transit.types.Keyword.prototype.com$cognitect$transit$hashCode = function() {\n  -1 === this.hashCode && (this.hashCode = com.cognitect.transit.eq.hashCode(this._name));\n  return this.hashCode;\n};\ncom.cognitect.transit.types.keyword = function(a) {\n  return new com.cognitect.transit.types.Keyword(a);\n};\ncom.cognitect.transit.types.isKeyword = function(a) {\n  return a instanceof com.cognitect.transit.types.Keyword;\n};\ncom.cognitect.transit.types.Symbol = function(a) {\n  this._name = a;\n  this.hashCode = -1;\n};\ncom.cognitect.transit.types.Symbol.prototype.namespace = function() {\n  var a = this._name.indexOf(\"/\");\n  return -1 != a ? this._name.substring(0, a) : null;\n};\ncom.cognitect.transit.types.Symbol.prototype.name = function() {\n  var a = this._name.indexOf(\"/\");\n  return -1 != a ? this._name.substring(a + 1, this._name.length) : this._name;\n};\ncom.cognitect.transit.types.Symbol.prototype.toString = function() {\n  return this._name;\n};\ncom.cognitect.transit.types.Symbol.prototype.equiv = function(a) {\n  return com.cognitect.transit.eq.equals(this, a);\n};\ncom.cognitect.transit.types.Symbol.prototype.equiv = com.cognitect.transit.types.Symbol.prototype.equiv;\ncom.cognitect.transit.types.Symbol.prototype.com$cognitect$transit$equals = function(a) {\n  return a instanceof com.cognitect.transit.types.Symbol && this._name == a._name;\n};\ncom.cognitect.transit.types.Symbol.prototype.com$cognitect$transit$hashCode = function() {\n  -1 === this.hashCode && (this.hashCode = com.cognitect.transit.eq.hashCode(this._name));\n  return this.hashCode;\n};\ncom.cognitect.transit.types.symbol = function(a) {\n  return new com.cognitect.transit.types.Symbol(a);\n};\ncom.cognitect.transit.types.isSymbol = function(a) {\n  return a instanceof com.cognitect.transit.types.Symbol;\n};\ncom.cognitect.transit.types.hexFor = function(a, b, c) {\n  var d = \"\";\n  c = c || b + 1;\n  for (var e = 8 * (7 - b), f = goog.math.Long.fromInt(255).shiftLeft(e); b < c; b++, e -= 8, f = f.shiftRightUnsigned(8)) {\n    var g = a.and(f).shiftRightUnsigned(e).toString(16);\n    1 == g.length && (g = \"0\" + g);\n    d += g;\n  }\n  return d;\n};\ncom.cognitect.transit.types.UUID = function(a, b) {\n  this.high = a;\n  this.low = b;\n  this.hashCode = -1;\n};\ncom.cognitect.transit.types.UUID.prototype.getLeastSignificantBits = function() {\n  return this.low;\n};\ncom.cognitect.transit.types.UUID.prototype.getMostSignificantBits = function() {\n  return this.high;\n};\ncom.cognitect.transit.types.UUID.prototype.toString = function() {\n  var a = this.high, b = this.low;\n  var c = \"\" + (com.cognitect.transit.types.hexFor(a, 0, 4) + \"-\");\n  c += com.cognitect.transit.types.hexFor(a, 4, 6) + \"-\";\n  c += com.cognitect.transit.types.hexFor(a, 6, 8) + \"-\";\n  c += com.cognitect.transit.types.hexFor(b, 0, 2) + \"-\";\n  return c += com.cognitect.transit.types.hexFor(b, 2, 8);\n};\ncom.cognitect.transit.types.UUID.prototype.equiv = function(a) {\n  return com.cognitect.transit.eq.equals(this, a);\n};\ncom.cognitect.transit.types.UUID.prototype.equiv = com.cognitect.transit.types.UUID.prototype.equiv;\ncom.cognitect.transit.types.UUID.prototype.com$cognitect$transit$equals = function(a) {\n  return a instanceof com.cognitect.transit.types.UUID && this.high.equals(a.high) && this.low.equals(a.low);\n};\ncom.cognitect.transit.types.UUID.prototype.com$cognitect$transit$hashCode = function() {\n  -1 === this.hashCode && (this.hashCode = com.cognitect.transit.eq.hashCode(this.toString()));\n  return this.hashCode;\n};\ncom.cognitect.transit.types.UUIDfromString = function(a) {\n  a = a.replace(/-/g, \"\");\n  var b, c;\n  var d = b = 0;\n  for (c = 24; 8 > d; d += 2, c -= 8) {\n    b |= parseInt(a.substring(d, d + 2), 16) << c;\n  }\n  var e = 0;\n  d = 8;\n  for (c = 24; 16 > d; d += 2, c -= 8) {\n    e |= parseInt(a.substring(d, d + 2), 16) << c;\n  }\n  var f = goog.math.Long.fromBits(e, b);\n  b = 0;\n  d = 16;\n  for (c = 24; 24 > d; d += 2, c -= 8) {\n    b |= parseInt(a.substring(d, d + 2), 16) << c;\n  }\n  e = 0;\n  for (c = d = 24; 32 > d; d += 2, c -= 8) {\n    e |= parseInt(a.substring(d, d + 2), 16) << c;\n  }\n  a = goog.math.Long.fromBits(e, b);\n  return new com.cognitect.transit.types.UUID(f, a);\n};\ncom.cognitect.transit.types.uuid = function(a) {\n  return com.cognitect.transit.types.UUIDfromString(a);\n};\ncom.cognitect.transit.types.isUUID = function(a) {\n  return a instanceof com.cognitect.transit.types.UUID;\n};\ncom.cognitect.transit.types.date = function(a) {\n  a = \"number\" === typeof a ? a : parseInt(a, 10);\n  return new Date(a);\n};\ncom.cognitect.transit.types.verboseDate = function(a) {\n  return new Date(a);\n};\nDate.prototype.com$cognitect$transit$equals = function(a) {\n  return a instanceof Date ? this.valueOf() === a.valueOf() : !1;\n};\nDate.prototype.com$cognitect$transit$hashCode = function() {\n  return this.valueOf();\n};\ncom.cognitect.transit.types.binary = function(a, b) {\n  return b && !1 === b.preferBuffers || \"undefined\" == typeof goog.global.Buffer ? \"undefined\" != typeof Uint8Array ? com.cognitect.transit.util.Base64ToUint8(a) : com.cognitect.transit.types.taggedValue(\"b\", a) : new goog.global.Buffer(a, \"base64\");\n};\ncom.cognitect.transit.types.isBinary = function(a) {\n  return \"undefined\" != typeof goog.global.Buffer && a instanceof goog.global.Buffer ? !0 : \"undefined\" != typeof Uint8Array && a instanceof Uint8Array ? !0 : a instanceof com.cognitect.transit.types.TaggedValue && \"b\" === a.tag;\n};\ncom.cognitect.transit.types.uri = function(a) {\n  return com.cognitect.transit.types.taggedValue(\"r\", a);\n};\ncom.cognitect.transit.types.isURI = function(a) {\n  return a instanceof com.cognitect.transit.types.TaggedValue && \"r\" === a.tag;\n};\ncom.cognitect.transit.types.KEYS = 0;\ncom.cognitect.transit.types.VALUES = 1;\ncom.cognitect.transit.types.ENTRIES = 2;\ncom.cognitect.transit.types.TransitArrayMapIterator = function(a, b) {\n  this.entries = a;\n  this.type = b || com.cognitect.transit.types.KEYS;\n  this.idx = 0;\n};\ncom.cognitect.transit.types.TransitArrayMapIterator.prototype.next = function() {\n  if (this.idx < this.entries.length) {\n    var a = {value:this.type === com.cognitect.transit.types.KEYS ? this.entries[this.idx] : this.type === com.cognitect.transit.types.VALUES ? this.entries[this.idx + 1] : [this.entries[this.idx], this.entries[this.idx + 1]], done:!1};\n    this.idx += 2;\n    return a;\n  }\n  return {value:null, done:!0};\n};\ncom.cognitect.transit.types.TransitArrayMapIterator.prototype.next = com.cognitect.transit.types.TransitArrayMapIterator.prototype.next;\ncom.cognitect.transit.types.TransitArrayMapIterator.prototype[com.cognitect.transit.types.ITERATOR] = function() {\n  return this;\n};\ncom.cognitect.transit.types.TransitMapIterator = function(a, b) {\n  this.map = a;\n  this.type = b || com.cognitect.transit.types.KEYS;\n  this.keys = this.map.getKeys();\n  this.idx = 0;\n  this.bucket = null;\n  this.bucketIdx = 0;\n};\ncom.cognitect.transit.types.TransitMapIterator.prototype.next = function() {\n  if (this.idx < this.map.size) {\n    null != this.bucket && this.bucketIdx < this.bucket.length || (this.bucket = this.map.map[this.keys[this.idx]], this.bucketIdx = 0);\n    var a = {value:this.type === com.cognitect.transit.types.KEYS ? this.bucket[this.bucketIdx] : this.type === com.cognitect.transit.types.VALUES ? this.bucket[this.bucketIdx + 1] : [this.bucket[this.bucketIdx], this.bucket[this.bucketIdx + 1]], done:!1};\n    this.idx++;\n    this.bucketIdx += 2;\n    return a;\n  }\n  return {value:null, done:!0};\n};\ncom.cognitect.transit.types.TransitMapIterator.prototype.next = com.cognitect.transit.types.TransitMapIterator.prototype.next;\ncom.cognitect.transit.types.TransitMapIterator.prototype[com.cognitect.transit.types.ITERATOR] = function() {\n  return this;\n};\ncom.cognitect.transit.types.mapEquals = function(a, b) {\n  if (a instanceof com.cognitect.transit.types.TransitMap && com.cognitect.transit.types.isMap(b)) {\n    if (a.size !== b.size) {\n      return !1;\n    }\n    for (var c in a.map) {\n      for (var d = a.map[c], e = 0; e < d.length; e += 2) {\n        if (!com.cognitect.transit.eq.equals(d[e + 1], b.get(d[e]))) {\n          return !1;\n        }\n      }\n    }\n    return !0;\n  }\n  if (a instanceof com.cognitect.transit.types.TransitArrayMap && com.cognitect.transit.types.isMap(b)) {\n    if (a.size !== b.size) {\n      return !1;\n    }\n    c = a._entries;\n    for (e = 0; e < c.length; e += 2) {\n      if (!com.cognitect.transit.eq.equals(c[e + 1], b.get(c[e]))) {\n        return !1;\n      }\n    }\n    return !0;\n  }\n  if (null != b && \"object\" === typeof b && (e = com.cognitect.transit.util.objectKeys(b), c = e.length, a.size === c)) {\n    for (d = 0; d < c; d++) {\n      var f = e[d];\n      if (!a.has(f) || !com.cognitect.transit.eq.equals(b[f], a.get(f))) {\n        return !1;\n      }\n    }\n    return !0;\n  }\n  return !1;\n};\ncom.cognitect.transit.types.SMALL_ARRAY_MAP_THRESHOLD = 8;\ncom.cognitect.transit.types.ARRAY_MAP_THRESHOLD = 32;\ncom.cognitect.transit.types.ARRAY_MAP_ACCESS_THRESHOLD = 32;\ncom.cognitect.transit.types.print = function(a) {\n  return null == a ? \"null\" : goog.isArray(a) ? \"[\" + a.toString() + \"]\" : goog.isString(a) ? '\"' + a + '\"' : a.toString();\n};\ncom.cognitect.transit.types.printMap = function(a) {\n  var b = 0, c = \"TransitMap {\";\n  a.forEach(function(d, e) {\n    c += com.cognitect.transit.types.print(e) + \" => \" + com.cognitect.transit.types.print(d);\n    b < a.size - 1 && (c += \", \");\n    b++;\n  });\n  return c + \"}\";\n};\ncom.cognitect.transit.types.printSet = function(a) {\n  var b = 0, c = \"TransitSet {\";\n  a.forEach(function(d) {\n    c += com.cognitect.transit.types.print(d);\n    b < a.size - 1 && (c += \", \");\n    b++;\n  });\n  return c + \"}\";\n};\ncom.cognitect.transit.types.TransitArrayMap = function(a) {\n  this._entries = a;\n  this.backingMap = null;\n  this.hashCode = -1;\n  this.size = a.length / 2;\n  this.accesses = 0;\n};\ncom.cognitect.transit.types.TransitArrayMap.prototype.toString = function() {\n  return com.cognitect.transit.types.printMap(this);\n};\ncom.cognitect.transit.types.TransitArrayMap.prototype.inspect = function() {\n  return this.toString();\n};\ncom.cognitect.transit.types.TransitArrayMap.prototype.convert = function() {\n  if (this.backingMap) {\n    throw Error(\"Invalid operation, already converted\");\n  }\n  if (this.size < com.cognitect.transit.types.SMALL_ARRAY_MAP_THRESHOLD) {\n    return !1;\n  }\n  this.accesses++;\n  return this.accesses > com.cognitect.transit.types.ARRAY_MAP_ACCESS_THRESHOLD ? (this.backingMap = com.cognitect.transit.types.map(this._entries, !1, !0), this._entries = [], !0) : !1;\n};\ncom.cognitect.transit.types.TransitArrayMap.prototype.clear = function() {\n  this.hashCode = -1;\n  this.backingMap ? this.backingMap.clear() : this._entries = [];\n  this.size = 0;\n};\ncom.cognitect.transit.types.TransitArrayMap.prototype.clear = com.cognitect.transit.types.TransitArrayMap.prototype.clear;\ncom.cognitect.transit.types.TransitArrayMap.prototype.keys = function() {\n  return this.backingMap ? this.backingMap.keys() : new com.cognitect.transit.types.TransitArrayMapIterator(this._entries, com.cognitect.transit.types.KEYS);\n};\ncom.cognitect.transit.types.TransitArrayMap.prototype.keys = com.cognitect.transit.types.TransitArrayMap.prototype.keys;\ncom.cognitect.transit.types.TransitArrayMap.prototype.keySet = function() {\n  if (this.backingMap) {\n    return this.backingMap.keySet();\n  }\n  for (var a = [], b = 0, c = 0; c < this._entries.length; b++, c += 2) {\n    a[b] = this._entries[c];\n  }\n  return a;\n};\ncom.cognitect.transit.types.TransitArrayMap.prototype.keySet = com.cognitect.transit.types.TransitArrayMap.prototype.keySet;\ncom.cognitect.transit.types.TransitArrayMap.prototype.entries = function() {\n  return this.backingMap ? this.backingMap.entries() : new com.cognitect.transit.types.TransitArrayMapIterator(this._entries, com.cognitect.transit.types.ENTRIES);\n};\ncom.cognitect.transit.types.TransitArrayMap.prototype.entries = com.cognitect.transit.types.TransitArrayMap.prototype.entries;\ncom.cognitect.transit.types.TransitArrayMap.prototype.values = function() {\n  return this.backingMap ? this.backingMap.values() : new com.cognitect.transit.types.TransitArrayMapIterator(this._entries, com.cognitect.transit.types.VALUES);\n};\ncom.cognitect.transit.types.TransitArrayMap.prototype.values = com.cognitect.transit.types.TransitArrayMap.prototype.values;\ncom.cognitect.transit.types.TransitArrayMap.prototype.forEach = function(a) {\n  if (this.backingMap) {\n    this.backingMap.forEach(a);\n  } else {\n    for (var b = 0; b < this._entries.length; b += 2) {\n      a(this._entries[b + 1], this._entries[b]);\n    }\n  }\n};\ncom.cognitect.transit.types.TransitArrayMap.prototype.forEach = com.cognitect.transit.types.TransitArrayMap.prototype.forEach;\ncom.cognitect.transit.types.TransitArrayMap.prototype.get = function(a, b) {\n  if (this.backingMap) {\n    return this.backingMap.get(a);\n  }\n  if (this.convert()) {\n    return this.get(a);\n  }\n  for (var c = 0; c < this._entries.length; c += 2) {\n    if (com.cognitect.transit.eq.equals(this._entries[c], a)) {\n      return this._entries[c + 1];\n    }\n  }\n  return b;\n};\ncom.cognitect.transit.types.TransitArrayMap.prototype.get = com.cognitect.transit.types.TransitArrayMap.prototype.get;\ncom.cognitect.transit.types.TransitArrayMap.prototype.has = function(a) {\n  if (this.backingMap) {\n    return this.backingMap.has(a);\n  }\n  if (this.convert()) {\n    return this.has(a);\n  }\n  for (var b = 0; b < this._entries.length; b += 2) {\n    if (com.cognitect.transit.eq.equals(this._entries[b], a)) {\n      return !0;\n    }\n  }\n  return !1;\n};\ncom.cognitect.transit.types.TransitArrayMap.prototype.has = com.cognitect.transit.types.TransitArrayMap.prototype.has;\ncom.cognitect.transit.types.TransitArrayMap.prototype.set = function(a, b) {\n  this.hashCode = -1;\n  if (this.backingMap) {\n    this.backingMap.set(a, b), this.size = this.backingMap.size;\n  } else {\n    for (var c = 0; c < this._entries.length; c += 2) {\n      if (com.cognitect.transit.eq.equals(this._entries[c], a)) {\n        this._entries[c + 1] = b;\n        return;\n      }\n    }\n    this._entries.push(a);\n    this._entries.push(b);\n    this.size++;\n    this.size > com.cognitect.transit.types.ARRAY_MAP_THRESHOLD && (this.backingMap = com.cognitect.transit.types.map(this._entries, !1, !0), this._entries = null);\n  }\n};\ncom.cognitect.transit.types.TransitArrayMap.prototype.set = com.cognitect.transit.types.TransitArrayMap.prototype.set;\ncom.cognitect.transit.types.TransitArrayMap.prototype[\"delete\"] = function(a) {\n  this.hashCode = -1;\n  if (this.backingMap) {\n    return a = this.backingMap[\"delete\"](a), this.size = this.backingMap.size, a;\n  }\n  for (var b = 0; b < this._entries.length; b += 2) {\n    if (com.cognitect.transit.eq.equals(this._entries[b], a)) {\n      return a = this._entries[b + 1], this._entries.splice(b, 2), this.size--, a;\n    }\n  }\n};\ncom.cognitect.transit.types.TransitArrayMap.prototype.clone = function() {\n  var a = com.cognitect.transit.types.map();\n  this.forEach(function(b, c) {\n    a.set(c, b);\n  });\n  return a;\n};\ncom.cognitect.transit.types.TransitArrayMap.prototype.clone = com.cognitect.transit.types.TransitArrayMap.prototype.clone;\ncom.cognitect.transit.types.TransitArrayMap.prototype[com.cognitect.transit.types.ITERATOR] = function() {\n  return this.entries();\n};\ncom.cognitect.transit.types.TransitArrayMap.prototype.com$cognitect$transit$hashCode = function() {\n  if (this.backingMap) {\n    return this.backingMap.com$cognitect$transit$hashCode();\n  }\n  -1 === this.hashCode && (this.hashCode = com.cognitect.transit.eq.hashMapLike(this));\n  return this.hashCode;\n};\ncom.cognitect.transit.types.TransitArrayMap.prototype.com$cognitect$transit$equals = function(a) {\n  return this.backingMap ? com.cognitect.transit.types.mapEquals(this.backingMap, a) : com.cognitect.transit.types.mapEquals(this, a);\n};\ncom.cognitect.transit.types.TransitMap = function(a, b, c) {\n  this.map = b || {};\n  this._keys = a || [];\n  this.size = c || 0;\n  this.hashCode = -1;\n};\ncom.cognitect.transit.types.TransitMap.prototype.toString = function() {\n  return com.cognitect.transit.types.printMap(this);\n};\ncom.cognitect.transit.types.TransitMap.prototype.inspect = function() {\n  return this.toString();\n};\ncom.cognitect.transit.types.TransitMap.prototype.clear = function() {\n  this.hashCode = -1;\n  this.map = {};\n  this._keys = [];\n  this.size = 0;\n};\ncom.cognitect.transit.types.TransitMap.prototype.clear = com.cognitect.transit.types.TransitMap.prototype.clear;\ncom.cognitect.transit.types.TransitMap.prototype.getKeys = function() {\n  return null != this._keys ? this._keys : com.cognitect.transit.util.objectKeys(this.map);\n};\ncom.cognitect.transit.types.TransitMap.prototype[\"delete\"] = function(a) {\n  this.hashCode = -1;\n  this._keys = null;\n  for (var b = com.cognitect.transit.eq.hashCode(a), c = this.map[b], d = 0; d < c.length; d += 2) {\n    if (com.cognitect.transit.eq.equals(a, c[d])) {\n      return a = c[d + 1], c.splice(d, 2), 0 === c.length && delete this.map[b], this.size--, a;\n    }\n  }\n};\ncom.cognitect.transit.types.TransitMap.prototype.entries = function() {\n  return new com.cognitect.transit.types.TransitMapIterator(this, com.cognitect.transit.types.ENTRIES);\n};\ncom.cognitect.transit.types.TransitMap.prototype.entries = com.cognitect.transit.types.TransitMap.prototype.entries;\ncom.cognitect.transit.types.TransitMap.prototype.forEach = function(a) {\n  for (var b = this.getKeys(), c = 0; c < b.length; c++) {\n    for (var d = this.map[b[c]], e = 0; e < d.length; e += 2) {\n      a(d[e + 1], d[e], this);\n    }\n  }\n};\ncom.cognitect.transit.types.TransitMap.prototype.forEach = com.cognitect.transit.types.TransitMap.prototype.forEach;\ncom.cognitect.transit.types.TransitMap.prototype.get = function(a, b) {\n  var c = com.cognitect.transit.eq.hashCode(a), c = this.map[c];\n  if (null != c) {\n    for (var d = 0; d < c.length; d += 2) {\n      if (com.cognitect.transit.eq.equals(a, c[d])) {\n        return c[d + 1];\n      }\n    }\n  } else {\n    return b;\n  }\n};\ncom.cognitect.transit.types.TransitMap.prototype.get = com.cognitect.transit.types.TransitMap.prototype.get;\ncom.cognitect.transit.types.TransitMap.prototype.has = function(a) {\n  var b = com.cognitect.transit.eq.hashCode(a), b = this.map[b];\n  if (null != b) {\n    for (var c = 0; c < b.length; c += 2) {\n      if (com.cognitect.transit.eq.equals(a, b[c])) {\n        return !0;\n      }\n    }\n  }\n  return !1;\n};\ncom.cognitect.transit.types.TransitMap.prototype.has = com.cognitect.transit.types.TransitMap.prototype.has;\ncom.cognitect.transit.types.TransitMap.prototype.keys = function() {\n  return new com.cognitect.transit.types.TransitMapIterator(this, com.cognitect.transit.types.KEYS);\n};\ncom.cognitect.transit.types.TransitMap.prototype.keys = com.cognitect.transit.types.TransitMap.prototype.keys;\ncom.cognitect.transit.types.TransitMap.prototype.keySet = function() {\n  for (var a = this.getKeys(), b = [], c = 0; c < a.length; c++) {\n    for (var d = this.map[a[c]], e = 0; e < d.length; e += 2) {\n      b.push(d[e]);\n    }\n  }\n  return b;\n};\ncom.cognitect.transit.types.TransitMap.prototype.keySet = com.cognitect.transit.types.TransitMap.prototype.keySet;\ncom.cognitect.transit.types.TransitMap.prototype.set = function(a, b) {\n  this.hashCode = -1;\n  var c = com.cognitect.transit.eq.hashCode(a), d = this.map[c];\n  if (null == d) {\n    this._keys && this._keys.push(c), this.map[c] = [a, b], this.size++;\n  } else {\n    for (var c = !0, e = 0; e < d.length; e += 2) {\n      if (com.cognitect.transit.eq.equals(b, d[e])) {\n        c = !1;\n        d[e] = b;\n        break;\n      }\n    }\n    c && (d.push(a), d.push(b), this.size++);\n  }\n};\ncom.cognitect.transit.types.TransitMap.prototype.set = com.cognitect.transit.types.TransitMap.prototype.set;\ncom.cognitect.transit.types.TransitMap.prototype.values = function() {\n  return new com.cognitect.transit.types.TransitMapIterator(this, com.cognitect.transit.types.VALUES);\n};\ncom.cognitect.transit.types.TransitMap.prototype.values = com.cognitect.transit.types.TransitMap.prototype.values;\ncom.cognitect.transit.types.TransitMap.prototype.clone = function() {\n  var a = com.cognitect.transit.types.map();\n  this.forEach(function(b, c) {\n    a.set(c, b);\n  });\n  return a;\n};\ncom.cognitect.transit.types.TransitMap.prototype.clone = com.cognitect.transit.types.TransitMap.prototype.clone;\ncom.cognitect.transit.types.TransitMap.prototype[com.cognitect.transit.types.ITERATOR] = function() {\n  return this.entries();\n};\ncom.cognitect.transit.types.TransitMap.prototype.com$cognitect$transit$hashCode = function() {\n  -1 === this.hashCode && (this.hashCode = com.cognitect.transit.eq.hashMapLike(this));\n  return this.hashCode;\n};\ncom.cognitect.transit.types.TransitMap.prototype.com$cognitect$transit$equals = function(a) {\n  return com.cognitect.transit.types.mapEquals(this, a);\n};\ncom.cognitect.transit.types.map = function(a, b, c) {\n  a = a || [];\n  b = !1 === b ? b : !0;\n  if ((!0 !== c || !c) && a.length <= 2 * com.cognitect.transit.types.ARRAY_MAP_THRESHOLD) {\n    if (b) {\n      var d = a;\n      a = [];\n      for (b = 0; b < d.length; b += 2) {\n        var e = !1;\n        for (c = 0; c < a.length; c += 2) {\n          if (com.cognitect.transit.eq.equals(a[c], d[b])) {\n            a[c + 1] = d[b + 1];\n            e = !0;\n            break;\n          }\n        }\n        e || (a.push(d[b]), a.push(d[b + 1]));\n      }\n    }\n    return new com.cognitect.transit.types.TransitArrayMap(a);\n  }\n  var d = {}, e = [], f = 0;\n  for (b = 0; b < a.length; b += 2) {\n    c = com.cognitect.transit.eq.hashCode(a[b]);\n    var g = d[c];\n    if (null == g) {\n      e.push(c), d[c] = [a[b], a[b + 1]], f++;\n    } else {\n      var h = !0;\n      for (c = 0; c < g.length; c += 2) {\n        if (com.cognitect.transit.eq.equals(g[c], a[b])) {\n          g[c + 1] = a[b + 1];\n          h = !1;\n          break;\n        }\n      }\n      h && (g.push(a[b]), g.push(a[b + 1]), f++);\n    }\n  }\n  return new com.cognitect.transit.types.TransitMap(e, d, f);\n};\ncom.cognitect.transit.types.isArrayMap = function(a) {\n  return a instanceof com.cognitect.transit.types.TransitArrayMap;\n};\ncom.cognitect.transit.types.isMap = function(a) {\n  return a instanceof com.cognitect.transit.types.TransitArrayMap || a instanceof com.cognitect.transit.types.TransitMap;\n};\ncom.cognitect.transit.types.TransitSet = function(a) {\n  this.map = a;\n  this.size = a.size;\n};\ncom.cognitect.transit.types.TransitSet.prototype.toString = function() {\n  return com.cognitect.transit.types.printSet(this);\n};\ncom.cognitect.transit.types.TransitSet.prototype.inspect = function() {\n  return this.toString();\n};\ncom.cognitect.transit.types.TransitSet.prototype.add = function(a) {\n  this.map.set(a, a);\n  this.size = this.map.size;\n};\ncom.cognitect.transit.types.TransitSet.prototype.add = com.cognitect.transit.types.TransitSet.prototype.add;\ncom.cognitect.transit.types.TransitSet.prototype.clear = function() {\n  this.map = new com.cognitect.transit.types.TransitMap;\n  this.size = 0;\n};\ncom.cognitect.transit.types.TransitSet.prototype.clear = com.cognitect.transit.types.TransitSet.prototype.clear;\ncom.cognitect.transit.types.TransitSet.prototype[\"delete\"] = function(a) {\n  a = this.map[\"delete\"](a);\n  this.size = this.map.size;\n  return a;\n};\ncom.cognitect.transit.types.TransitSet.prototype.entries = function() {\n  return this.map.entries();\n};\ncom.cognitect.transit.types.TransitSet.prototype.entries = com.cognitect.transit.types.TransitSet.prototype.entries;\ncom.cognitect.transit.types.TransitSet.prototype.forEach = function(a, b) {\n  var c = this;\n  this.map.forEach(function(b, e, f) {\n    a(e, c);\n  });\n};\ncom.cognitect.transit.types.TransitSet.prototype.forEach = com.cognitect.transit.types.TransitSet.prototype.forEach;\ncom.cognitect.transit.types.TransitSet.prototype.has = function(a) {\n  return this.map.has(a);\n};\ncom.cognitect.transit.types.TransitSet.prototype.has = com.cognitect.transit.types.TransitSet.prototype.has;\ncom.cognitect.transit.types.TransitSet.prototype.keys = function() {\n  return this.map.keys();\n};\ncom.cognitect.transit.types.TransitSet.prototype.keys = com.cognitect.transit.types.TransitSet.prototype.keys;\ncom.cognitect.transit.types.TransitSet.prototype.keySet = function() {\n  return this.map.keySet();\n};\ncom.cognitect.transit.types.TransitSet.prototype.keySet = com.cognitect.transit.types.TransitSet.prototype.keySet;\ncom.cognitect.transit.types.TransitSet.prototype.values = function() {\n  return this.map.values();\n};\ncom.cognitect.transit.types.TransitSet.prototype.values = com.cognitect.transit.types.TransitSet.prototype.values;\ncom.cognitect.transit.types.TransitSet.prototype.clone = function() {\n  var a = com.cognitect.transit.types.set();\n  this.forEach(function(b) {\n    a.add(b);\n  });\n  return a;\n};\ncom.cognitect.transit.types.TransitSet.prototype.clone = com.cognitect.transit.types.TransitSet.prototype.clone;\ncom.cognitect.transit.types.TransitSet.prototype[com.cognitect.transit.types.ITERATOR] = function() {\n  return this.values();\n};\ncom.cognitect.transit.types.TransitSet.prototype.com$cognitect$transit$equals = function(a) {\n  if (a instanceof com.cognitect.transit.types.TransitSet) {\n    if (this.size === a.size) {\n      return com.cognitect.transit.eq.equals(this.map, a.map);\n    }\n  } else {\n    return !1;\n  }\n};\ncom.cognitect.transit.types.TransitSet.prototype.com$cognitect$transit$hashCode = function(a) {\n  return com.cognitect.transit.eq.hashCode(this.map);\n};\ncom.cognitect.transit.types.set = function(a) {\n  a = a || [];\n  for (var b = {}, c = [], d = 0, e = 0; e < a.length; e++) {\n    var f = com.cognitect.transit.eq.hashCode(a[e]), g = b[f];\n    if (null == g) {\n      c.push(f), b[f] = [a[e], a[e]], d++;\n    } else {\n      for (var f = !0, h = 0; h < g.length; h += 2) {\n        if (com.cognitect.transit.eq.equals(g[h], a[e])) {\n          f = !1;\n          break;\n        }\n      }\n      f && (g.push(a[e]), g.push(a[e]), d++);\n    }\n  }\n  return new com.cognitect.transit.types.TransitSet(new com.cognitect.transit.types.TransitMap(c, b, d));\n};\ncom.cognitect.transit.types.isSet = function(a) {\n  return a instanceof com.cognitect.transit.types.TransitSet;\n};\ncom.cognitect.transit.types.quoted = function(a) {\n  return com.cognitect.transit.types.taggedValue(\"'\", a);\n};\ncom.cognitect.transit.types.isQuoted = function(a) {\n  return a instanceof com.cognitect.transit.types.TaggedValue && \"'\" === a.tag;\n};\ncom.cognitect.transit.types.list = function(a) {\n  return com.cognitect.transit.types.taggedValue(\"list\", a);\n};\ncom.cognitect.transit.types.isList = function(a) {\n  return a instanceof com.cognitect.transit.types.TaggedValue && \"list\" === a.tag;\n};\ncom.cognitect.transit.types.link = function(a) {\n  return com.cognitect.transit.types.taggedValue(\"link\", a);\n};\ncom.cognitect.transit.types.isLink = function(a) {\n  return a instanceof com.cognitect.transit.types.TaggedValue && \"link\" === a.tag;\n};\ncom.cognitect.transit.types.specialDouble = function(a) {\n  switch(a) {\n    case \"-INF\":\n      return -Infinity;\n    case \"INF\":\n      return Infinity;\n    case \"NaN\":\n      return NaN;\n    default:\n      throw Error(\"Invalid special double value \" + a);\n  }\n};\ncom.cognitect.transit.handlers = {};\ncom.cognitect.transit.handlers.ctorGuid = 0;\ncom.cognitect.transit.handlers.ctorGuidProperty = \"transit$guid$\" + com.cognitect.transit.util.randomUUID();\ncom.cognitect.transit.handlers.typeTag = function(a) {\n  if (null == a) {\n    return \"null\";\n  }\n  if (a === String) {\n    return \"string\";\n  }\n  if (a === Boolean) {\n    return \"boolean\";\n  }\n  if (a === Number) {\n    return \"number\";\n  }\n  if (a === Array) {\n    return \"array\";\n  }\n  if (a === Object) {\n    return \"map\";\n  }\n  var b = a[com.cognitect.transit.handlers.ctorGuidProperty];\n  null == b && (\"undefined\" != typeof Object.defineProperty ? (b = ++com.cognitect.transit.handlers.ctorGuid, Object.defineProperty(a, com.cognitect.transit.handlers.ctorGuidProperty, {value:b, enumerable:!1})) : a[com.cognitect.transit.handlers.ctorGuidProperty] = b = ++com.cognitect.transit.handlers.ctorGuid);\n  return b;\n};\ncom.cognitect.transit.handlers.constructor = function(a) {\n  return null == a ? null : a.constructor;\n};\ncom.cognitect.transit.handlers.padZeros = function(a, b) {\n  for (var c = a.toString(), d = c.length; d < b; d++) {\n    c = \"0\" + c;\n  }\n  return c;\n};\ncom.cognitect.transit.handlers.stringableKeys = function(a) {\n  a = com.cognitect.transit.util.objectKeys(a);\n  for (var b = 0; b < a.length; b++) {\n  }\n  return !0;\n};\ncom.cognitect.transit.handlers.NilHandler = function() {\n};\ncom.cognitect.transit.handlers.NilHandler.prototype.tag = function(a) {\n  return \"_\";\n};\ncom.cognitect.transit.handlers.NilHandler.prototype.rep = function(a) {\n  return null;\n};\ncom.cognitect.transit.handlers.NilHandler.prototype.stringRep = function(a) {\n  return \"null\";\n};\ncom.cognitect.transit.handlers.StringHandler = function() {\n};\ncom.cognitect.transit.handlers.StringHandler.prototype.tag = function(a) {\n  return \"s\";\n};\ncom.cognitect.transit.handlers.StringHandler.prototype.rep = function(a) {\n  return a;\n};\ncom.cognitect.transit.handlers.StringHandler.prototype.stringRep = function(a) {\n  return a;\n};\ncom.cognitect.transit.handlers.NumberHandler = function() {\n};\ncom.cognitect.transit.handlers.NumberHandler.prototype.tag = function(a) {\n  return \"i\";\n};\ncom.cognitect.transit.handlers.NumberHandler.prototype.rep = function(a) {\n  return a;\n};\ncom.cognitect.transit.handlers.NumberHandler.prototype.stringRep = function(a) {\n  return a.toString();\n};\ncom.cognitect.transit.handlers.IntegerHandler = function() {\n};\ncom.cognitect.transit.handlers.IntegerHandler.prototype.tag = function(a) {\n  return \"i\";\n};\ncom.cognitect.transit.handlers.IntegerHandler.prototype.rep = function(a) {\n  return a.toString();\n};\ncom.cognitect.transit.handlers.IntegerHandler.prototype.stringRep = function(a) {\n  return a.toString();\n};\ncom.cognitect.transit.handlers.BooleanHandler = function() {\n};\ncom.cognitect.transit.handlers.BooleanHandler.prototype.tag = function(a) {\n  return \"?\";\n};\ncom.cognitect.transit.handlers.BooleanHandler.prototype.rep = function(a) {\n  return a;\n};\ncom.cognitect.transit.handlers.BooleanHandler.prototype.stringRep = function(a) {\n  return a.toString();\n};\ncom.cognitect.transit.handlers.ArrayHandler = function() {\n};\ncom.cognitect.transit.handlers.ArrayHandler.prototype.tag = function(a) {\n  return \"array\";\n};\ncom.cognitect.transit.handlers.ArrayHandler.prototype.rep = function(a) {\n  return a;\n};\ncom.cognitect.transit.handlers.ArrayHandler.prototype.stringRep = function(a) {\n  return null;\n};\ncom.cognitect.transit.handlers.MapHandler = function() {\n};\ncom.cognitect.transit.handlers.MapHandler.prototype.tag = function(a) {\n  return \"map\";\n};\ncom.cognitect.transit.handlers.MapHandler.prototype.rep = function(a) {\n  return a;\n};\ncom.cognitect.transit.handlers.MapHandler.prototype.stringRep = function(a) {\n  return null;\n};\ncom.cognitect.transit.handlers.VerboseDateHandler = function() {\n};\ncom.cognitect.transit.handlers.VerboseDateHandler.prototype.tag = function(a) {\n  return \"t\";\n};\ncom.cognitect.transit.handlers.VerboseDateHandler.prototype.rep = function(a) {\n  return a.getUTCFullYear() + \"-\" + com.cognitect.transit.handlers.padZeros(a.getUTCMonth() + 1, 2) + \"-\" + com.cognitect.transit.handlers.padZeros(a.getUTCDate(), 2) + \"T\" + com.cognitect.transit.handlers.padZeros(a.getUTCHours(), 2) + \":\" + com.cognitect.transit.handlers.padZeros(a.getUTCMinutes(), 2) + \":\" + com.cognitect.transit.handlers.padZeros(a.getUTCSeconds(), 2) + \".\" + com.cognitect.transit.handlers.padZeros(a.getUTCMilliseconds(), 3) + \"Z\";\n};\ncom.cognitect.transit.handlers.VerboseDateHandler.prototype.stringRep = function(a, b) {\n  return b.rep(a);\n};\ncom.cognitect.transit.handlers.DateHandler = function() {\n};\ncom.cognitect.transit.handlers.DateHandler.prototype.tag = function(a) {\n  return \"m\";\n};\ncom.cognitect.transit.handlers.DateHandler.prototype.rep = function(a) {\n  return a.valueOf();\n};\ncom.cognitect.transit.handlers.DateHandler.prototype.stringRep = function(a) {\n  return a.valueOf().toString();\n};\ncom.cognitect.transit.handlers.DateHandler.prototype.getVerboseHandler = function(a) {\n  return new com.cognitect.transit.handlers.VerboseDateHandler;\n};\ncom.cognitect.transit.handlers.UUIDHandler = function() {\n};\ncom.cognitect.transit.handlers.UUIDHandler.prototype.tag = function(a) {\n  return \"u\";\n};\ncom.cognitect.transit.handlers.UUIDHandler.prototype.rep = function(a) {\n  return a.toString();\n};\ncom.cognitect.transit.handlers.UUIDHandler.prototype.stringRep = function(a) {\n  return a.toString();\n};\ncom.cognitect.transit.handlers.KeywordHandler = function() {\n};\ncom.cognitect.transit.handlers.KeywordHandler.prototype.tag = function(a) {\n  return \":\";\n};\ncom.cognitect.transit.handlers.KeywordHandler.prototype.rep = function(a) {\n  return a._name;\n};\ncom.cognitect.transit.handlers.KeywordHandler.prototype.stringRep = function(a, b) {\n  return b.rep(a);\n};\ncom.cognitect.transit.handlers.SymbolHandler = function() {\n};\ncom.cognitect.transit.handlers.SymbolHandler.prototype.tag = function(a) {\n  return \"$\";\n};\ncom.cognitect.transit.handlers.SymbolHandler.prototype.rep = function(a) {\n  return a._name;\n};\ncom.cognitect.transit.handlers.SymbolHandler.prototype.stringRep = function(a, b) {\n  return b.rep(a);\n};\ncom.cognitect.transit.handlers.TaggedHandler = function() {\n};\ncom.cognitect.transit.handlers.TaggedHandler.prototype.tag = function(a) {\n  return a.tag;\n};\ncom.cognitect.transit.handlers.TaggedHandler.prototype.rep = function(a) {\n  return a.rep;\n};\ncom.cognitect.transit.handlers.TaggedHandler.prototype.stringRep = function(a, b) {\n  return null;\n};\ncom.cognitect.transit.handlers.TransitSetHandler = function() {\n};\ncom.cognitect.transit.handlers.TransitSetHandler.prototype.tag = function(a) {\n  return \"set\";\n};\ncom.cognitect.transit.handlers.TransitSetHandler.prototype.rep = function(a) {\n  var b = [];\n  a.forEach(function(a, d) {\n    b.push(a);\n  });\n  return com.cognitect.transit.types.taggedValue(\"array\", b);\n};\ncom.cognitect.transit.handlers.TransitSetHandler.prototype.stringRep = function(a, b) {\n  return null;\n};\ncom.cognitect.transit.handlers.TransitArrayMapHandler = function() {\n};\ncom.cognitect.transit.handlers.TransitArrayMapHandler.prototype.tag = function(a) {\n  return \"map\";\n};\ncom.cognitect.transit.handlers.TransitArrayMapHandler.prototype.rep = function(a) {\n  return a;\n};\ncom.cognitect.transit.handlers.TransitArrayMapHandler.prototype.stringRep = function(a, b) {\n  return null;\n};\ncom.cognitect.transit.handlers.TransitMapHandler = function() {\n};\ncom.cognitect.transit.handlers.TransitMapHandler.prototype.tag = function(a) {\n  return \"map\";\n};\ncom.cognitect.transit.handlers.TransitMapHandler.prototype.rep = function(a) {\n  return a;\n};\ncom.cognitect.transit.handlers.TransitMapHandler.prototype.stringRep = function(a, b) {\n  return null;\n};\ncom.cognitect.transit.handlers.BufferHandler = function() {\n};\ncom.cognitect.transit.handlers.BufferHandler.prototype.tag = function(a) {\n  return \"b\";\n};\ncom.cognitect.transit.handlers.BufferHandler.prototype.rep = function(a) {\n  return a.toString(\"base64\");\n};\ncom.cognitect.transit.handlers.BufferHandler.prototype.stringRep = function(a, b) {\n  return null;\n};\ncom.cognitect.transit.handlers.Uint8ArrayHandler = function() {\n};\ncom.cognitect.transit.handlers.Uint8ArrayHandler.prototype.tag = function(a) {\n  return \"b\";\n};\ncom.cognitect.transit.handlers.Uint8ArrayHandler.prototype.rep = function(a) {\n  return com.cognitect.transit.util.Uint8ToBase64(a);\n};\ncom.cognitect.transit.handlers.Uint8ArrayHandler.prototype.stringRep = function(a, b) {\n  return null;\n};\ncom.cognitect.transit.handlers.defaultHandlers = function(a) {\n  a.set(null, new com.cognitect.transit.handlers.NilHandler);\n  a.set(String, new com.cognitect.transit.handlers.StringHandler);\n  a.set(Number, new com.cognitect.transit.handlers.NumberHandler);\n  a.set(goog.math.Long, new com.cognitect.transit.handlers.IntegerHandler);\n  a.set(Boolean, new com.cognitect.transit.handlers.BooleanHandler);\n  a.set(Array, new com.cognitect.transit.handlers.ArrayHandler);\n  a.set(Object, new com.cognitect.transit.handlers.MapHandler);\n  a.set(Date, new com.cognitect.transit.handlers.DateHandler);\n  a.set(com.cognitect.transit.types.UUID, new com.cognitect.transit.handlers.UUIDHandler);\n  a.set(com.cognitect.transit.types.Keyword, new com.cognitect.transit.handlers.KeywordHandler);\n  a.set(com.cognitect.transit.types.Symbol, new com.cognitect.transit.handlers.SymbolHandler);\n  a.set(com.cognitect.transit.types.TaggedValue, new com.cognitect.transit.handlers.TaggedHandler);\n  a.set(com.cognitect.transit.types.TransitSet, new com.cognitect.transit.handlers.TransitSetHandler);\n  a.set(com.cognitect.transit.types.TransitArrayMap, new com.cognitect.transit.handlers.TransitArrayMapHandler);\n  a.set(com.cognitect.transit.types.TransitMap, new com.cognitect.transit.handlers.TransitMapHandler);\n  \"undefined\" != typeof goog.global.Buffer && a.set(goog.global.Buffer, new com.cognitect.transit.handlers.BufferHandler);\n  \"undefined\" != typeof Uint8Array && a.set(Uint8Array, new com.cognitect.transit.handlers.Uint8ArrayHandler);\n  return a;\n};\ncom.cognitect.transit.handlers.Handlers = function() {\n  this.handlers = {};\n  com.cognitect.transit.handlers.defaultHandlers(this);\n};\ncom.cognitect.transit.handlers.Handlers.prototype.get = function(a) {\n  a = \"string\" === typeof a ? this.handlers[a] : this.handlers[com.cognitect.transit.handlers.typeTag(a)];\n  return null != a ? a : this.handlers[\"default\"];\n};\ncom.cognitect.transit.handlers.Handlers.prototype.get = com.cognitect.transit.handlers.Handlers.prototype.get;\ncom.cognitect.transit.handlers.validTag = function(a) {\n  switch(a) {\n    case \"null\":\n    case \"string\":\n    case \"boolean\":\n    case \"number\":\n    case \"array\":\n    case \"map\":\n      return !1;\n  }\n  return !0;\n};\ncom.cognitect.transit.handlers.Handlers.prototype.set = function(a, b) {\n  \"string\" === typeof a && com.cognitect.transit.handlers.validTag(a) ? this.handlers[a] = b : this.handlers[com.cognitect.transit.handlers.typeTag(a)] = b;\n};\ncom.cognitect.transit.impl = {};\ncom.cognitect.transit.impl.decoder = {};\ncom.cognitect.transit.impl.decoder.Tag = function(a) {\n  this.str = a;\n};\ncom.cognitect.transit.impl.decoder.tag = function(a) {\n  return new com.cognitect.transit.impl.decoder.Tag(a);\n};\ncom.cognitect.transit.impl.decoder.isTag = function(a) {\n  return a && a instanceof com.cognitect.transit.impl.decoder.Tag;\n};\ncom.cognitect.transit.impl.decoder.isGroundHandler = function(a) {\n  switch(a) {\n    case \"_\":\n    case \"s\":\n    case \"?\":\n    case \"i\":\n    case \"d\":\n    case \"b\":\n    case \"'\":\n    case \"array\":\n    case \"map\":\n      return !0;\n  }\n  return !1;\n};\ncom.cognitect.transit.impl.decoder.Decoder = function(a) {\n  this.options = a || {};\n  this.handlers = {};\n  for (var b in this.defaults.handlers) {\n    this.handlers[b] = this.defaults.handlers[b];\n  }\n  for (b in this.options.handlers) {\n    if (com.cognitect.transit.impl.decoder.isGroundHandler(b)) {\n      throw Error('Cannot override handler for ground type \"' + b + '\"');\n    }\n    this.handlers[b] = this.options.handlers[b];\n  }\n  this.preferStrings = null != this.options.preferStrings ? this.options.preferStrings : this.defaults.preferStrings;\n  this.preferBuffers = null != this.options.preferBuffers ? this.options.preferBuffers : this.defaults.preferBuffers;\n  this.defaultHandler = this.options.defaultHandler || this.defaults.defaultHandler;\n  this.mapBuilder = this.options.mapBuilder;\n  this.arrayBuilder = this.options.arrayBuilder;\n};\ncom.cognitect.transit.impl.decoder.Decoder.prototype.defaults = {handlers:{_:function(a, b) {\n  return com.cognitect.transit.types.nullValue();\n}, \"?\":function(a, b) {\n  return com.cognitect.transit.types.boolValue(a);\n}, b:function(a, b) {\n  return com.cognitect.transit.types.binary(a, b);\n}, i:function(a, b) {\n  return com.cognitect.transit.types.intValue(a);\n}, n:function(a, b) {\n  return com.cognitect.transit.types.bigInteger(a);\n}, d:function(a, b) {\n  return com.cognitect.transit.types.floatValue(a);\n}, f:function(a, b) {\n  return com.cognitect.transit.types.bigDecimalValue(a);\n}, c:function(a, b) {\n  return com.cognitect.transit.types.charValue(a);\n}, \":\":function(a, b) {\n  return com.cognitect.transit.types.keyword(a);\n}, $:function(a, b) {\n  return com.cognitect.transit.types.symbol(a);\n}, r:function(a, b) {\n  return com.cognitect.transit.types.uri(a);\n}, z:function(a, b) {\n  return com.cognitect.transit.types.specialDouble(a);\n}, \"'\":function(a, b) {\n  return a;\n}, m:function(a, b) {\n  return com.cognitect.transit.types.date(a);\n}, t:function(a, b) {\n  return com.cognitect.transit.types.verboseDate(a);\n}, u:function(a, b) {\n  return com.cognitect.transit.types.uuid(a);\n}, set:function(a, b) {\n  return com.cognitect.transit.types.set(a);\n}, list:function(a, b) {\n  return com.cognitect.transit.types.list(a);\n}, link:function(a, b) {\n  return com.cognitect.transit.types.link(a);\n}, cmap:function(a, b) {\n  return com.cognitect.transit.types.map(a, !1);\n}}, defaultHandler:function(a, b) {\n  return com.cognitect.transit.types.taggedValue(a, b);\n}, preferStrings:!0, preferBuffers:!0};\ncom.cognitect.transit.impl.decoder.Decoder.prototype.decode = function(a, b, c, d) {\n  if (null == a) {\n    return null;\n  }\n  switch(typeof a) {\n    case \"string\":\n      return this.decodeString(a, b, c, d);\n    case \"object\":\n      return com.cognitect.transit.util.isArray(a) ? \"^ \" === a[0] ? this.decodeArrayHash(a, b, c, d) : this.decodeArray(a, b, c, d) : this.decodeHash(a, b, c, d);\n  }\n  return a;\n};\ncom.cognitect.transit.impl.decoder.Decoder.prototype.decode = com.cognitect.transit.impl.decoder.Decoder.prototype.decode;\ncom.cognitect.transit.impl.decoder.Decoder.prototype.decodeString = function(a, b, c, d) {\n  return com.cognitect.transit.caching.isCacheable(a, c) ? (a = this.parseString(a, b, !1), b && b.write(a, c), a) : com.cognitect.transit.caching.isCacheCode(a) ? b.read(a, c) : this.parseString(a, b, c);\n};\ncom.cognitect.transit.impl.decoder.Decoder.prototype.decodeHash = function(a, b, c, d) {\n  c = com.cognitect.transit.util.objectKeys(a);\n  var e = c[0];\n  d = 1 == c.length ? this.decode(e, b, !1, !1) : null;\n  if (com.cognitect.transit.impl.decoder.isTag(d)) {\n    return a = a[e], c = this.handlers[d.str], null != c ? c(this.decode(a, b, !1, !0), this) : com.cognitect.transit.types.taggedValue(d.str, this.decode(a, b, !1, !1));\n  }\n  if (this.mapBuilder) {\n    if (c.length < 2 * com.cognitect.transit.types.SMALL_ARRAY_MAP_THRESHOLD && this.mapBuilder.fromArray) {\n      var f = [];\n      for (e = 0; e < c.length; e++) {\n        d = c[e], f.push(this.decode(d, b, !0, !1)), f.push(this.decode(a[d], b, !1, !1));\n      }\n      return this.mapBuilder.fromArray(f, a);\n    }\n    f = this.mapBuilder.init(a);\n    for (e = 0; e < c.length; e++) {\n      d = c[e], f = this.mapBuilder.add(f, this.decode(d, b, !0, !1), this.decode(a[d], b, !1, !1), a);\n    }\n    return this.mapBuilder.finalize(f, a);\n  }\n  f = [];\n  for (e = 0; e < c.length; e++) {\n    d = c[e], f.push(this.decode(d, b, !0, !1)), f.push(this.decode(a[d], b, !1, !1));\n  }\n  return com.cognitect.transit.types.map(f, !1);\n};\ncom.cognitect.transit.impl.decoder.Decoder.prototype.decodeArrayHash = function(a, b, c, d) {\n  if (this.mapBuilder) {\n    if (a.length < 2 * com.cognitect.transit.types.SMALL_ARRAY_MAP_THRESHOLD + 1 && this.mapBuilder.fromArray) {\n      d = [];\n      for (c = 1; c < a.length; c += 2) {\n        d.push(this.decode(a[c], b, !0, !1)), d.push(this.decode(a[c + 1], b, !1, !1));\n      }\n      return this.mapBuilder.fromArray(d, a);\n    }\n    d = this.mapBuilder.init(a);\n    for (c = 1; c < a.length; c += 2) {\n      d = this.mapBuilder.add(d, this.decode(a[c], b, !0, !1), this.decode(a[c + 1], b, !1, !1), a);\n    }\n    return this.mapBuilder.finalize(d, a);\n  }\n  d = [];\n  for (c = 1; c < a.length; c += 2) {\n    d.push(this.decode(a[c], b, !0, !1)), d.push(this.decode(a[c + 1], b, !1, !1));\n  }\n  return com.cognitect.transit.types.map(d, !1);\n};\ncom.cognitect.transit.impl.decoder.Decoder.prototype.decodeArray = function(a, b, c, d) {\n  if (d) {\n    var e = [];\n    for (d = 0; d < a.length; d++) {\n      e.push(this.decode(a[d], b, c, !1));\n    }\n    return e;\n  }\n  e = b && b.idx;\n  if (2 === a.length && \"string\" === typeof a[0] && (d = this.decode(a[0], b, !1, !1), com.cognitect.transit.impl.decoder.isTag(d))) {\n    return e = a[1], a = this.handlers[d.str], null != a ? e = a(this.decode(e, b, c, !0), this) : com.cognitect.transit.types.taggedValue(d.str, this.decode(e, b, c, !1));\n  }\n  b && e != b.idx && (b.idx = e);\n  if (this.arrayBuilder) {\n    if (32 >= a.length && this.arrayBuilder.fromArray) {\n      e = [];\n      for (d = 0; d < a.length; d++) {\n        e.push(this.decode(a[d], b, c, !1));\n      }\n      return this.arrayBuilder.fromArray(e, a);\n    }\n    e = this.arrayBuilder.init(a);\n    for (d = 0; d < a.length; d++) {\n      e = this.arrayBuilder.add(e, this.decode(a[d], b, c, !1), a);\n    }\n    return this.arrayBuilder.finalize(e, a);\n  }\n  e = [];\n  for (d = 0; d < a.length; d++) {\n    e.push(this.decode(a[d], b, c, !1));\n  }\n  return e;\n};\ncom.cognitect.transit.impl.decoder.Decoder.prototype.parseString = function(a, b, c) {\n  if (a.charAt(0) === com.cognitect.transit.delimiters.ESC) {\n    b = a.charAt(1);\n    if (b === com.cognitect.transit.delimiters.ESC || b === com.cognitect.transit.delimiters.SUB || b === com.cognitect.transit.delimiters.RES) {\n      return a.substring(1);\n    }\n    if (b === com.cognitect.transit.delimiters.TAG) {\n      return com.cognitect.transit.impl.decoder.tag(a.substring(2));\n    }\n    c = this.handlers[b];\n    return null == c ? this.defaultHandler(b, a.substring(2)) : c(a.substring(2), this);\n  }\n  return a;\n};\ncom.cognitect.transit.impl.decoder.decoder = function(a) {\n  return new com.cognitect.transit.impl.decoder.Decoder(a);\n};\ncom.cognitect.transit.impl.reader = {};\ncom.cognitect.transit.impl.reader.JSONUnmarshaller = function(a) {\n  this.decoder = new com.cognitect.transit.impl.decoder.Decoder(a);\n};\ncom.cognitect.transit.impl.reader.JSONUnmarshaller.prototype.unmarshal = function(a, b) {\n  return this.decoder.decode(JSON.parse(a), b);\n};\ncom.cognitect.transit.impl.reader.Reader = function(a, b) {\n  this.unmarshaller = a;\n  this.options = b || {};\n  this.cache = this.options.cache ? this.options.cache : new com.cognitect.transit.caching.ReadCache;\n};\ncom.cognitect.transit.impl.reader.Reader.prototype.read = function(a) {\n  a = this.unmarshaller.unmarshal(a, this.cache);\n  this.cache.clear();\n  return a;\n};\ncom.cognitect.transit.impl.reader.Reader.prototype.read = com.cognitect.transit.impl.reader.Reader.prototype.read;\ncom.cognitect.transit.impl.writer = {};\ncom.cognitect.transit.impl.writer.escape = function(a) {\n  if (0 < a.length) {\n    var b = a.charAt(0);\n    return b === com.cognitect.transit.delimiters.ESC || b === com.cognitect.transit.delimiters.SUB || b === com.cognitect.transit.delimiters.RES ? com.cognitect.transit.delimiters.ESC + a : a;\n  }\n  return a;\n};\ncom.cognitect.transit.impl.writer.JSONMarshaller = function(a) {\n  this.opts = a || {};\n  this.preferStrings = null != this.opts.preferStrings ? this.opts.preferStrings : !0;\n  this.objectBuilder = this.opts.objectBuilder || null;\n  this.transform = this.opts.transform || null;\n  this.handlers = new com.cognitect.transit.handlers.Handlers;\n  if (a = this.opts.handlers) {\n    if (com.cognitect.transit.util.isArray(a) || !a.forEach) {\n      throw Error('transit writer \"handlers\" option must be a map');\n    }\n    var b = this;\n    a.forEach(function(a, d) {\n      if (void 0 !== d) {\n        b.handlers.set(d, a);\n      } else {\n        throw Error(\"Cannot create handler for JavaScript undefined\");\n      }\n    });\n  }\n  this.handlerForForeign = this.opts.handlerForForeign;\n  this.unpack = this.opts.unpack || function(a) {\n    return com.cognitect.transit.types.isArrayMap(a) && null === a.backingMap ? a._entries : !1;\n  };\n  this.verbose = this.opts && this.opts.verbose || !1;\n};\ncom.cognitect.transit.impl.writer.JSONMarshaller.prototype.handler = function(a) {\n  var b = this.handlers.get(com.cognitect.transit.handlers.constructor(a));\n  return null != b ? b : (a = a && a.transitTag) ? this.handlers.get(a) : null;\n};\ncom.cognitect.transit.impl.writer.JSONMarshaller.prototype.registerHandler = function(a, b) {\n  this.handlers.set(a, b);\n};\ncom.cognitect.transit.impl.writer.JSONMarshaller.prototype.emitNil = function(a, b) {\n  return a ? this.emitString(com.cognitect.transit.delimiters.ESC, \"_\", \"\", a, b) : null;\n};\ncom.cognitect.transit.impl.writer.JSONMarshaller.prototype.emitString = function(a, b, c, d, e) {\n  a = a + b + c;\n  return e ? e.write(a, d) : a;\n};\ncom.cognitect.transit.impl.writer.JSONMarshaller.prototype.emitBoolean = function(a, b, c) {\n  return b ? this.emitString(com.cognitect.transit.delimiters.ESC, \"?\", a.toString()[0], b, c) : a;\n};\ncom.cognitect.transit.impl.writer.JSONMarshaller.prototype.emitInteger = function(a, b, c) {\n  return Infinity === a ? this.emitString(com.cognitect.transit.delimiters.ESC, \"z\", \"INF\", b, c) : -Infinity === a ? this.emitString(com.cognitect.transit.delimiters.ESC, \"z\", \"-INF\", b, c) : isNaN(a) ? this.emitString(com.cognitect.transit.delimiters.ESC, \"z\", \"NaN\", b, c) : b || \"string\" === typeof a || a instanceof goog.math.Long ? this.emitString(com.cognitect.transit.delimiters.ESC, \"i\", a.toString(), b, c) : a;\n};\ncom.cognitect.transit.impl.writer.JSONMarshaller.prototype.emitDouble = function(a, b, c) {\n  return b ? this.emitString(a.ESC, \"d\", a, b, c) : a;\n};\ncom.cognitect.transit.impl.writer.JSONMarshaller.prototype.emitBinary = function(a, b, c) {\n  return this.emitString(com.cognitect.transit.delimiters.ESC, \"b\", a, b, c);\n};\ncom.cognitect.transit.impl.writer.JSONMarshaller.prototype.emitQuoted = function(a, b, c) {\n  if (a.verbose) {\n    a = {};\n    var d = this.emitString(com.cognitect.transit.delimiters.ESC_TAG, \"'\", \"\", !0, c);\n    a[d] = com.cognitect.transit.impl.writer.marshal(this, b, !1, c);\n    return a;\n  }\n  return [this.emitString(com.cognitect.transit.delimiters.ESC_TAG, \"'\", \"\", !0, c), com.cognitect.transit.impl.writer.marshal(this, b, !1, c)];\n};\ncom.cognitect.transit.impl.writer.emitObjects = function(a, b, c) {\n  var d = [];\n  if (com.cognitect.transit.util.isArray(b)) {\n    for (var e = 0; e < b.length; e++) {\n      d.push(com.cognitect.transit.impl.writer.marshal(a, b[e], !1, c));\n    }\n  } else {\n    b.forEach(function(b, e) {\n      d.push(com.cognitect.transit.impl.writer.marshal(a, b, !1, c));\n    });\n  }\n  return d;\n};\ncom.cognitect.transit.impl.writer.emitArray = function(a, b, c, d) {\n  return com.cognitect.transit.impl.writer.emitObjects(a, b, d);\n};\ncom.cognitect.transit.impl.writer.isStringableKey = function(a, b) {\n  if (\"string\" !== typeof b) {\n    var c = a.handler(b);\n    return c && 1 === c.tag(b).length;\n  }\n  return !0;\n};\ncom.cognitect.transit.impl.writer.stringableKeys = function(a, b) {\n  var c = a.unpack(b), d = !0;\n  if (c) {\n    for (var e = 0; e < c.length && (d = com.cognitect.transit.impl.writer.isStringableKey(a, c[e]), d); e += 2) {\n    }\n    return d;\n  }\n  if (b.keys && (c = b.keys(), e = null, c.next)) {\n    for (e = c.next(); !e.done;) {\n      d = com.cognitect.transit.impl.writer.isStringableKey(a, e.value);\n      if (!d) {\n        break;\n      }\n      e = c.next();\n    }\n    return d;\n  }\n  if (b.forEach) {\n    return b.forEach(function(b, c) {\n      d = d && com.cognitect.transit.impl.writer.isStringableKey(a, c);\n    }), d;\n  }\n  throw Error(\"Cannot walk keys of object type \" + com.cognitect.transit.handlers.constructor(b).name);\n};\ncom.cognitect.transit.impl.writer.isForeignObject = function(a) {\n  if (a.constructor.transit$isObject) {\n    return !0;\n  }\n  var b = a.constructor.toString(), b = b.substr(9), b = b.substr(0, b.indexOf(\"(\")), b = \"Object\" == b;\n  \"undefined\" != typeof Object.defineProperty ? Object.defineProperty(a.constructor, \"transit$isObject\", {value:b, enumerable:!1}) : a.constructor.transit$isObject = b;\n  return b;\n};\ncom.cognitect.transit.impl.writer.emitMap = function(a, b, c, d) {\n  var e = null, f = null, g = null, e = null;\n  c = 0;\n  if (b.constructor === Object || null != b.forEach || a.handlerForForeign && com.cognitect.transit.impl.writer.isForeignObject(b)) {\n    if (a.verbose) {\n      if (null != b.forEach) {\n        if (com.cognitect.transit.impl.writer.stringableKeys(a, b)) {\n          var h = {};\n          b.forEach(function(b, c) {\n            h[com.cognitect.transit.impl.writer.marshal(a, c, !0, !1)] = com.cognitect.transit.impl.writer.marshal(a, b, !1, d);\n          });\n        } else {\n          e = a.unpack(b);\n          f = [];\n          g = a.emitString(com.cognitect.transit.delimiters.ESC_TAG, \"cmap\", \"\", !0, d);\n          if (e) {\n            for (; c < e.length; c += 2) {\n              f.push(com.cognitect.transit.impl.writer.marshal(a, e[c], !1, !1)), f.push(com.cognitect.transit.impl.writer.marshal(a, e[c + 1], !1, d));\n            }\n          } else {\n            b.forEach(function(b, c) {\n              f.push(com.cognitect.transit.impl.writer.marshal(a, c, !1, !1));\n              f.push(com.cognitect.transit.impl.writer.marshal(a, b, !1, d));\n            });\n          }\n          h = {};\n          h[g] = f;\n        }\n      } else {\n        for (e = com.cognitect.transit.util.objectKeys(b), h = {}; c < e.length; c++) {\n          h[com.cognitect.transit.impl.writer.marshal(a, e[c], !0, !1)] = com.cognitect.transit.impl.writer.marshal(a, b[e[c]], !1, d);\n        }\n      }\n      return h;\n    }\n    if (null != b.forEach) {\n      if (com.cognitect.transit.impl.writer.stringableKeys(a, b)) {\n        e = a.unpack(b);\n        h = [\"^ \"];\n        if (e) {\n          for (; c < e.length; c += 2) {\n            h.push(com.cognitect.transit.impl.writer.marshal(a, e[c], !0, d)), h.push(com.cognitect.transit.impl.writer.marshal(a, e[c + 1], !1, d));\n          }\n        } else {\n          b.forEach(function(b, c) {\n            h.push(com.cognitect.transit.impl.writer.marshal(a, c, !0, d));\n            h.push(com.cognitect.transit.impl.writer.marshal(a, b, !1, d));\n          });\n        }\n        return h;\n      }\n      e = a.unpack(b);\n      f = [];\n      g = a.emitString(com.cognitect.transit.delimiters.ESC_TAG, \"cmap\", \"\", !0, d);\n      if (e) {\n        for (; c < e.length; c += 2) {\n          f.push(com.cognitect.transit.impl.writer.marshal(a, e[c], !1, d)), f.push(com.cognitect.transit.impl.writer.marshal(a, e[c + 1], !1, d));\n        }\n      } else {\n        b.forEach(function(b, c) {\n          f.push(com.cognitect.transit.impl.writer.marshal(a, c, !1, d));\n          f.push(com.cognitect.transit.impl.writer.marshal(a, b, !1, d));\n        });\n      }\n      return [g, f];\n    }\n    h = [\"^ \"];\n    for (e = com.cognitect.transit.util.objectKeys(b); c < e.length; c++) {\n      h.push(com.cognitect.transit.impl.writer.marshal(a, e[c], !0, d)), h.push(com.cognitect.transit.impl.writer.marshal(a, b[e[c]], !1, d));\n    }\n    return h;\n  }\n  if (null != a.objectBuilder) {\n    return a.objectBuilder(b, function(b) {\n      return com.cognitect.transit.impl.writer.marshal(a, b, !0, d);\n    }, function(b) {\n      return com.cognitect.transit.impl.writer.marshal(a, b, !1, d);\n    });\n  }\n  c = com.cognitect.transit.handlers.constructor(b).name;\n  e = Error(\"Cannot write \" + c);\n  e.data = {obj:b, type:c};\n  throw e;\n};\ncom.cognitect.transit.impl.writer.emitTaggedMap = function(a, b, c, d, e) {\n  return a.verbose ? (d = {}, d[a.emitString(com.cognitect.transit.delimiters.ESC_TAG, b, \"\", !0, e)] = com.cognitect.transit.impl.writer.marshal(a, c, !1, e), d) : [a.emitString(com.cognitect.transit.delimiters.ESC_TAG, b, \"\", !0, e), com.cognitect.transit.impl.writer.marshal(a, c, !1, e)];\n};\ncom.cognitect.transit.impl.writer.emitEncoded = function(a, b, c, d, e, f, g) {\n  if (1 === c.length) {\n    if (\"string\" === typeof d) {\n      return a.emitString(com.cognitect.transit.delimiters.ESC, c, d, f, g);\n    }\n    if (f || a.preferStrings) {\n      (d = a.verbose && b.getVerboseHandler()) ? (c = d.tag(e), d = d.stringRep(e, d)) : d = b.stringRep(e, b);\n      if (null !== d) {\n        return a.emitString(com.cognitect.transit.delimiters.ESC, c, d, f, g);\n      }\n      a = Error('Tag \"' + c + '\" cannot be encoded as string');\n      a.data = {tag:c, rep:d, obj:e};\n      throw a;\n    }\n  }\n  return com.cognitect.transit.impl.writer.emitTaggedMap(a, c, d, f, g);\n};\ncom.cognitect.transit.impl.writer.marshal = function(a, b, c, d) {\n  null !== a.transform && (b = a.transform(b));\n  var e = a.handler(b) || (a.handlerForForeign ? a.handlerForForeign(b, a.handlers) : null), f = e ? e.tag(b) : null, g = e ? e.rep(b) : null;\n  if (null != e && null != f) {\n    switch(f) {\n      case \"_\":\n        return a.emitNil(c, d);\n      case \"s\":\n        return a.emitString(\"\", \"\", com.cognitect.transit.impl.writer.escape(g), c, d);\n      case \"?\":\n        return a.emitBoolean(g, c, d);\n      case \"i\":\n        return a.emitInteger(g, c, d);\n      case \"d\":\n        return a.emitDouble(g, c, d);\n      case \"b\":\n        return a.emitBinary(g, c, d);\n      case \"'\":\n        return a.emitQuoted(a, g, d);\n      case \"array\":\n        return com.cognitect.transit.impl.writer.emitArray(a, g, c, d);\n      case \"map\":\n        return com.cognitect.transit.impl.writer.emitMap(a, g, c, d);\n      default:\n        return com.cognitect.transit.impl.writer.emitEncoded(a, e, f, g, b, c, d);\n    }\n  } else {\n    throw a = com.cognitect.transit.handlers.constructor(b).name, c = Error(\"Cannot write \" + a), c.data = {obj:b, type:a}, c;\n  }\n};\ncom.cognitect.transit.impl.writer.maybeQuoted = function(a, b) {\n  var c = a.handler(b) || (a.handlerForForeign ? a.handlerForForeign(b, a.handlers) : null);\n  if (null != c) {\n    return 1 === c.tag(b).length ? com.cognitect.transit.types.quoted(b) : b;\n  }\n  var c = com.cognitect.transit.handlers.constructor(b).name, d = Error(\"Cannot write \" + c);\n  d.data = {obj:b, type:c};\n  throw d;\n};\ncom.cognitect.transit.impl.writer.marshalTop = function(a, b, c, d) {\n  return JSON.stringify(com.cognitect.transit.impl.writer.marshal(a, com.cognitect.transit.impl.writer.maybeQuoted(a, b), c, d));\n};\ncom.cognitect.transit.impl.writer.Writer = function(a, b) {\n  this._marshaller = a;\n  this.options = b || {};\n  this.cache = !1 === this.options.cache ? null : this.options.cache ? this.options.cache : new com.cognitect.transit.caching.WriteCache;\n};\ncom.cognitect.transit.impl.writer.Writer.prototype.marshaller = function() {\n  return this._marshaller;\n};\ncom.cognitect.transit.impl.writer.Writer.prototype.marshaller = com.cognitect.transit.impl.writer.Writer.prototype.marshaller;\ncom.cognitect.transit.impl.writer.Writer.prototype.write = function(a, b) {\n  var c = b || {};\n  var d = c.asMapKey || !1, e = this._marshaller.verbose ? !1 : this.cache;\n  c = !1 === c.marshalTop ? com.cognitect.transit.impl.writer.marshal(this._marshaller, a, d, e) : com.cognitect.transit.impl.writer.marshalTop(this._marshaller, a, d, e);\n  null != this.cache && this.cache.clear();\n  return c;\n};\ncom.cognitect.transit.impl.writer.Writer.prototype.write = com.cognitect.transit.impl.writer.Writer.prototype.write;\ncom.cognitect.transit.impl.writer.Writer.prototype.register = function(a, b) {\n  this._marshaller.registerHandler(a, b);\n};\ncom.cognitect.transit.impl.writer.Writer.prototype.register = com.cognitect.transit.impl.writer.Writer.prototype.register;\nvar TRANSIT_DEV = !0, TRANSIT_NODE_TARGET = !0, TRANSIT_BROWSER_TARGET = !1, TRANSIT_BROWSER_AMD_TARGET = !1;\ncom.cognitect.transit.reader = function(a, b) {\n  if (\"json\" === a || \"json-verbose\" === a || null == a) {\n    var c = new com.cognitect.transit.impl.reader.JSONUnmarshaller(b);\n    return new com.cognitect.transit.impl.reader.Reader(c, b);\n  }\n  throw Error(\"Cannot create reader of type \" + a);\n};\ncom.cognitect.transit.writer = function(a, b) {\n  if (\"json\" === a || \"json-verbose\" === a || null == a) {\n    \"json-verbose\" === a && (null == b && (b = {}), b.verbose = !0);\n    var c = new com.cognitect.transit.impl.writer.JSONMarshaller(b);\n    return new com.cognitect.transit.impl.writer.Writer(c, b);\n  }\n  c = Error('Type must be \"json\"');\n  c.data = {type:a};\n  throw c;\n};\ncom.cognitect.transit.makeWriteHandler = function(a) {\n  var b = function() {\n  };\n  b.prototype.tag = a.tag;\n  b.prototype.rep = a.rep;\n  b.prototype.stringRep = a.stringRep;\n  b.prototype.getVerboseHandler = a.getVerboseHandler;\n  return new b;\n};\ncom.cognitect.transit.makeBuilder = function(a) {\n  var b = function() {\n  };\n  b.prototype.init = a.init;\n  b.prototype.add = a.add;\n  b.prototype.finalize = a.finalize;\n  b.prototype.fromArray = a.fromArray;\n  return new b;\n};\ncom.cognitect.transit.date = com.cognitect.transit.types.date;\ncom.cognitect.transit.integer = com.cognitect.transit.types.intValue;\ncom.cognitect.transit.isInteger = com.cognitect.transit.types.isInteger;\ncom.cognitect.transit.uuid = com.cognitect.transit.types.uuid;\ncom.cognitect.transit.isUUID = com.cognitect.transit.types.isUUID;\ncom.cognitect.transit.bigInt = com.cognitect.transit.types.bigInteger;\ncom.cognitect.transit.isBigInt = com.cognitect.transit.types.isBigInteger;\ncom.cognitect.transit.bigDec = com.cognitect.transit.types.bigDecimalValue;\ncom.cognitect.transit.isBigDec = com.cognitect.transit.types.isBigDecimal;\ncom.cognitect.transit.keyword = com.cognitect.transit.types.keyword;\ncom.cognitect.transit.isKeyword = com.cognitect.transit.types.isKeyword;\ncom.cognitect.transit.symbol = com.cognitect.transit.types.symbol;\ncom.cognitect.transit.isSymbol = com.cognitect.transit.types.isSymbol;\ncom.cognitect.transit.binary = com.cognitect.transit.types.binary;\ncom.cognitect.transit.isBinary = com.cognitect.transit.types.isBinary;\ncom.cognitect.transit.uri = com.cognitect.transit.types.uri;\ncom.cognitect.transit.isURI = com.cognitect.transit.types.isURI;\ncom.cognitect.transit.map = com.cognitect.transit.types.map;\ncom.cognitect.transit.isMap = com.cognitect.transit.types.isMap;\ncom.cognitect.transit.set = com.cognitect.transit.types.set;\ncom.cognitect.transit.isSet = com.cognitect.transit.types.isSet;\ncom.cognitect.transit.list = com.cognitect.transit.types.list;\ncom.cognitect.transit.isList = com.cognitect.transit.types.isList;\ncom.cognitect.transit.quoted = com.cognitect.transit.types.quoted;\ncom.cognitect.transit.isQuoted = com.cognitect.transit.types.isQuoted;\ncom.cognitect.transit.tagged = com.cognitect.transit.types.taggedValue;\ncom.cognitect.transit.isTaggedValue = com.cognitect.transit.types.isTaggedValue;\ncom.cognitect.transit.link = com.cognitect.transit.types.link;\ncom.cognitect.transit.isLink = com.cognitect.transit.types.isLink;\ncom.cognitect.transit.hash = com.cognitect.transit.eq.hashCode;\ncom.cognitect.transit.hashMapLike = com.cognitect.transit.eq.hashMapLike;\ncom.cognitect.transit.hashArrayLike = com.cognitect.transit.eq.hashArrayLike;\ncom.cognitect.transit.equals = com.cognitect.transit.eq.equals;\ncom.cognitect.transit.extendToEQ = com.cognitect.transit.eq.extendToEQ;\ncom.cognitect.transit.mapToObject = function(a) {\n  var b = {};\n  a.forEach(function(a, d) {\n    if (\"string\" !== typeof d) {\n      throw Error(\"Cannot convert map with non-string keys\");\n    }\n    b[d] = a;\n  });\n  return b;\n};\ncom.cognitect.transit.objectToMap = function(a) {\n  var b = com.cognitect.transit.map(), c;\n  for (c in a) {\n    a.hasOwnProperty(c) && b.set(c, a[c]);\n  }\n  return b;\n};\ncom.cognitect.transit.decoder = com.cognitect.transit.impl.decoder.decoder;\ncom.cognitect.transit.readCache = com.cognitect.transit.caching.readCache;\ncom.cognitect.transit.writeCache = com.cognitect.transit.caching.writeCache;\ncom.cognitect.transit.UUIDfromString = com.cognitect.transit.types.UUIDfromString;\ncom.cognitect.transit.randomUUID = com.cognitect.transit.util.randomUUID;\ncom.cognitect.transit.stringableKeys = com.cognitect.transit.impl.writer.stringableKeys;\nTRANSIT_BROWSER_TARGET && (goog.exportSymbol(\"transit.reader\", com.cognitect.transit.reader), goog.exportSymbol(\"transit.writer\", com.cognitect.transit.writer), goog.exportSymbol(\"transit.makeBuilder\", com.cognitect.transit.makeBuilder), goog.exportSymbol(\"transit.makeWriteHandler\", com.cognitect.transit.makeWriteHandler), goog.exportSymbol(\"transit.date\", com.cognitect.transit.types.date), goog.exportSymbol(\"transit.integer\", com.cognitect.transit.types.intValue), goog.exportSymbol(\"transit.isInteger\", \ncom.cognitect.transit.types.isInteger), goog.exportSymbol(\"transit.uuid\", com.cognitect.transit.types.uuid), goog.exportSymbol(\"transit.isUUID\", com.cognitect.transit.types.isUUID), goog.exportSymbol(\"transit.bigInt\", com.cognitect.transit.types.bigInteger), goog.exportSymbol(\"transit.isBigInt\", com.cognitect.transit.types.isBigInteger), goog.exportSymbol(\"transit.bigDec\", com.cognitect.transit.types.bigDecimalValue), goog.exportSymbol(\"transit.isBigDec\", com.cognitect.transit.types.isBigDecimal), \ngoog.exportSymbol(\"transit.keyword\", com.cognitect.transit.types.keyword), goog.exportSymbol(\"transit.isKeyword\", com.cognitect.transit.types.isKeyword), goog.exportSymbol(\"transit.symbol\", com.cognitect.transit.types.symbol), goog.exportSymbol(\"transit.isSymbol\", com.cognitect.transit.types.isSymbol), goog.exportSymbol(\"transit.binary\", com.cognitect.transit.types.binary), goog.exportSymbol(\"transit.isBinary\", com.cognitect.transit.types.isBinary), goog.exportSymbol(\"transit.uri\", com.cognitect.transit.types.uri), \ngoog.exportSymbol(\"transit.isURI\", com.cognitect.transit.types.isURI), goog.exportSymbol(\"transit.map\", com.cognitect.transit.types.map), goog.exportSymbol(\"transit.isMap\", com.cognitect.transit.types.isMap), goog.exportSymbol(\"transit.set\", com.cognitect.transit.types.set), goog.exportSymbol(\"transit.isSet\", com.cognitect.transit.types.isSet), goog.exportSymbol(\"transit.list\", com.cognitect.transit.types.list), goog.exportSymbol(\"transit.isList\", com.cognitect.transit.types.isList), goog.exportSymbol(\"transit.quoted\", \ncom.cognitect.transit.types.quoted), goog.exportSymbol(\"transit.isQuoted\", com.cognitect.transit.types.isQuoted), goog.exportSymbol(\"transit.tagged\", com.cognitect.transit.types.taggedValue), goog.exportSymbol(\"transit.isTaggedValue\", com.cognitect.transit.types.isTaggedValue), goog.exportSymbol(\"transit.link\", com.cognitect.transit.types.link), goog.exportSymbol(\"transit.isLink\", com.cognitect.transit.types.isLink), goog.exportSymbol(\"transit.hash\", com.cognitect.transit.eq.hashCode), goog.exportSymbol(\"transit.hashMapLike\", \ncom.cognitect.transit.eq.hashMapLike), goog.exportSymbol(\"transit.hashArrayLike\", com.cognitect.transit.eq.hashArrayLike), goog.exportSymbol(\"transit.equals\", com.cognitect.transit.eq.equals), goog.exportSymbol(\"transit.extendToEQ\", com.cognitect.transit.eq.extendToEQ), goog.exportSymbol(\"transit.mapToObject\", com.cognitect.transit.mapToObject), goog.exportSymbol(\"transit.objectToMap\", com.cognitect.transit.objectToMap), goog.exportSymbol(\"transit.decoder\", com.cognitect.transit.impl.decoder.decoder), \ngoog.exportSymbol(\"transit.UUIDfromString\", com.cognitect.transit.types.UUIDfromString), goog.exportSymbol(\"transit.randomUUID\", com.cognitect.transit.util.randomUUID), goog.exportSymbol(\"transit.stringableKeys\", com.cognitect.transit.impl.writer.stringableKeys), goog.exportSymbol(\"transit.readCache\", com.cognitect.transit.caching.readCache), goog.exportSymbol(\"transit.writeCache\", com.cognitect.transit.caching.writeCache));\nTRANSIT_NODE_TARGET && (module.exports = {reader:com.cognitect.transit.reader, writer:com.cognitect.transit.writer, makeBuilder:com.cognitect.transit.makeBuilder, makeWriteHandler:com.cognitect.transit.makeWriteHandler, date:com.cognitect.transit.types.date, integer:com.cognitect.transit.types.intValue, isInteger:com.cognitect.transit.types.isInteger, uuid:com.cognitect.transit.types.uuid, isUUID:com.cognitect.transit.types.isUUID, bigInt:com.cognitect.transit.types.bigInteger, isBigInt:com.cognitect.transit.types.isBigInteger, \nbigDec:com.cognitect.transit.types.bigDecimalValue, isBigDec:com.cognitect.transit.types.isBigDecimal, keyword:com.cognitect.transit.types.keyword, isKeyword:com.cognitect.transit.types.isKeyword, symbol:com.cognitect.transit.types.symbol, isSymbol:com.cognitect.transit.types.isSymbol, binary:com.cognitect.transit.types.binary, isBinary:com.cognitect.transit.types.isBinary, uri:com.cognitect.transit.types.uri, isURI:com.cognitect.transit.types.isURI, map:com.cognitect.transit.types.map, isMap:com.cognitect.transit.types.isMap, \nset:com.cognitect.transit.types.set, isSet:com.cognitect.transit.types.isSet, list:com.cognitect.transit.types.list, isList:com.cognitect.transit.types.isList, quoted:com.cognitect.transit.types.quoted, isQuoted:com.cognitect.transit.types.isQuoted, tagged:com.cognitect.transit.types.taggedValue, isTaggedValue:com.cognitect.transit.types.isTaggedValue, link:com.cognitect.transit.types.link, isLink:com.cognitect.transit.types.isLink, hash:com.cognitect.transit.eq.hashCode, hashArrayLike:com.cognitect.transit.eq.hashArrayLike, \nhashMapLike:com.cognitect.transit.eq.hashMapLike, equals:com.cognitect.transit.eq.equals, extendToEQ:com.cognitect.transit.eq.extendToEQ, mapToObject:com.cognitect.transit.mapToObject, objectToMap:com.cognitect.transit.objectToMap, decoder:com.cognitect.transit.impl.decoder.decoder, UUIDfromString:com.cognitect.transit.types.UUIDfromString, randomUUID:com.cognitect.transit.util.randomUUID, stringableKeys:com.cognitect.transit.impl.writer.stringableKeys, readCache:com.cognitect.transit.caching.readCache, \nwriteCache:com.cognitect.transit.caching.writeCache});\n\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n/***/ }),\n\n/***/ \"./node_modules/uuid/lib/bytesToUuid.js\":\n/*!**********************************************!*\\\n  !*** ./node_modules/uuid/lib/bytesToUuid.js ***!\n  \\**********************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  return bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]];\n}\n\nmodule.exports = bytesToUuid;\n\n\n/***/ }),\n\n/***/ \"./node_modules/uuid/lib/rng-browser.js\":\n/*!**********************************************!*\\\n  !*** ./node_modules/uuid/lib/rng-browser.js ***!\n  \\**********************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\nvar rng;\n\nvar crypto = global.crypto || global.msCrypto; // for IE 11\nif (crypto && crypto.getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n  rng = function whatwgRNG() {\n    crypto.getRandomValues(rnds8);\n    return rnds8;\n  };\n}\n\nif (!rng) {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n  rng = function() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n\nmodule.exports = rng;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n/***/ }),\n\n/***/ \"./node_modules/uuid/v4.js\":\n/*!*********************************!*\\\n  !*** ./node_modules/uuid/v4.js ***!\n  \\*********************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar rng = __webpack_require__(/*! ./lib/rng */ \"./node_modules/uuid/lib/rng-browser.js\");\nvar bytesToUuid = __webpack_require__(/*! ./lib/bytesToUuid */ \"./node_modules/uuid/lib/bytesToUuid.js\");\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options == 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n\n\n/***/ }),\n\n/***/ \"./node_modules/webpack/buildin/global.js\":\n/*!***********************************!*\\\n  !*** (webpack)/buildin/global.js ***!\n  \\***********************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nvar g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n/***/ }),\n\n/***/ \"./src/automerge.js\":\n/*!**************************!*\\\n  !*** ./src/automerge.js ***!\n  \\**************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar transit = __webpack_require__(/*! transit-immutable-js */ \"./node_modules/transit-immutable-js/index.js\");\nvar uuid = __webpack_require__(/*! ./uuid */ \"./src/uuid.js\");\nvar Frontend = __webpack_require__(/*! ../frontend */ \"./frontend/index.js\");\nvar Backend = __webpack_require__(/*! ../backend */ \"./backend/index.js\");\n\nvar _require = __webpack_require__(/*! ./common */ \"./src/common.js\"),\n    isObject = _require.isObject;\n\n/**\n * Constructs a new frontend document that reflects the given list of changes.\n */\n\n\nfunction docFromChanges(actorId, changes) {\n  if (!actorId) throw new RangeError('actorId is required in docFromChanges');\n  var doc = Frontend.init({ actorId: actorId, backend: Backend });\n\n  var _Backend$applyChanges = Backend.applyChanges(Backend.init(actorId), changes),\n      _Backend$applyChanges2 = _slicedToArray(_Backend$applyChanges, 2),\n      state = _Backend$applyChanges2[0],\n      _ = _Backend$applyChanges2[1];\n\n  var patch = Backend.getPatch(state);\n  patch.state = state;\n  return Frontend.applyPatch(doc, patch);\n}\n\n///// Automerge.* API\n\nfunction init(actorId) {\n  return Frontend.init({ actorId: actorId, backend: Backend });\n}\n\nfunction change(doc, message, callback) {\n  var _Frontend$change = Frontend.change(doc, message, callback),\n      _Frontend$change2 = _slicedToArray(_Frontend$change, 2),\n      newDoc = _Frontend$change2[0],\n      change = _Frontend$change2[1];\n\n  return newDoc;\n}\n\nfunction emptyChange(doc, message) {\n  var _Frontend$emptyChange = Frontend.emptyChange(doc, message),\n      _Frontend$emptyChange2 = _slicedToArray(_Frontend$emptyChange, 2),\n      newDoc = _Frontend$emptyChange2[0],\n      change = _Frontend$emptyChange2[1];\n\n  return newDoc;\n}\n\nfunction undo(doc, message) {\n  var _Frontend$undo = Frontend.undo(doc, message),\n      _Frontend$undo2 = _slicedToArray(_Frontend$undo, 2),\n      newDoc = _Frontend$undo2[0],\n      change = _Frontend$undo2[1];\n\n  return newDoc;\n}\n\nfunction redo(doc, message) {\n  var _Frontend$redo = Frontend.redo(doc, message),\n      _Frontend$redo2 = _slicedToArray(_Frontend$redo, 2),\n      newDoc = _Frontend$redo2[0],\n      change = _Frontend$redo2[1];\n\n  return newDoc;\n}\n\nfunction load(string, actorId) {\n  return docFromChanges(actorId || uuid(), transit.fromJSON(string));\n}\n\nfunction save(doc) {\n  var state = Frontend.getBackendState(doc);\n  return transit.toJSON(state.getIn(['opSet', 'history']));\n}\n\nfunction merge(localDoc, remoteDoc) {\n  if (Frontend.getActorId(localDoc) === Frontend.getActorId(remoteDoc)) {\n    throw new RangeError('Cannot merge an actor with itself');\n  }\n  var localState = Frontend.getBackendState(localDoc);\n  var remoteState = Frontend.getBackendState(remoteDoc);\n\n  var _Backend$merge = Backend.merge(localState, remoteState),\n      _Backend$merge2 = _slicedToArray(_Backend$merge, 2),\n      state = _Backend$merge2[0],\n      patch = _Backend$merge2[1];\n\n  if (patch.diffs.length === 0) return localDoc;\n  patch.state = state;\n  return Frontend.applyPatch(localDoc, patch);\n}\n\nfunction diff(oldDoc, newDoc) {\n  var oldState = Frontend.getBackendState(oldDoc);\n  var newState = Frontend.getBackendState(newDoc);\n  var changes = Backend.getChanges(oldState, newState);\n\n  var _Backend$applyChanges3 = Backend.applyChanges(oldState, changes),\n      _Backend$applyChanges4 = _slicedToArray(_Backend$applyChanges3, 2),\n      state = _Backend$applyChanges4[0],\n      patch = _Backend$applyChanges4[1];\n\n  return patch.diffs;\n}\n\nfunction getChanges(oldDoc, newDoc) {\n  var oldState = Frontend.getBackendState(oldDoc);\n  var newState = Frontend.getBackendState(newDoc);\n  return Backend.getChanges(oldState, newState);\n}\n\nfunction applyChanges(doc, changes) {\n  var oldState = Frontend.getBackendState(doc);\n\n  var _Backend$applyChanges5 = Backend.applyChanges(oldState, changes),\n      _Backend$applyChanges6 = _slicedToArray(_Backend$applyChanges5, 2),\n      newState = _Backend$applyChanges6[0],\n      patch = _Backend$applyChanges6[1];\n\n  patch.state = newState;\n  return Frontend.applyPatch(doc, patch);\n}\n\nfunction getMissingDeps(doc) {\n  return Backend.getMissingDeps(Frontend.getBackendState(doc));\n}\n\nfunction equals(val1, val2) {\n  if (!isObject(val1) || !isObject(val2)) return val1 === val2;\n  var keys1 = Object.keys(val1).sort(),\n      keys2 = Object.keys(val2).sort();\n  if (keys1.length !== keys2.length) return false;\n  for (var i = 0; i < keys1.length; i++) {\n    if (keys1[i] !== keys2[i]) return false;\n    if (!equals(val1[keys1[i]], val2[keys2[i]])) return false;\n  }\n  return true;\n}\n\nfunction inspect(doc) {\n  return JSON.parse(JSON.stringify(doc));\n}\n\nfunction getHistory(doc) {\n  var state = Frontend.getBackendState(doc);\n  var actor = Frontend.getActorId(doc);\n  var history = state.getIn(['opSet', 'history']);\n  return history.map(function (change, index) {\n    return {\n      get change() {\n        return change.toJS();\n      },\n      get snapshot() {\n        return docFromChanges(actor, history.slice(0, index + 1));\n      }\n    };\n  }).toArray();\n}\n\nmodule.exports = {\n  init: init, change: change, emptyChange: emptyChange, undo: undo, redo: redo,\n  load: load, save: save, merge: merge, diff: diff, getChanges: getChanges, applyChanges: applyChanges, getMissingDeps: getMissingDeps,\n  equals: equals, inspect: inspect, getHistory: getHistory, uuid: uuid,\n  Frontend: Frontend, Backend: Backend,\n  DocSet: __webpack_require__(/*! ./doc_set */ \"./src/doc_set.js\"),\n  WatchableDoc: __webpack_require__(/*! ./watchable_doc */ \"./src/watchable_doc.js\"),\n  Connection: __webpack_require__(/*! ./connection */ \"./src/connection.js\")\n};\n\nvar _arr = ['canUndo', 'canRedo', 'getActorId', 'setActorId', 'getConflicts', 'Text'];\nfor (var _i = 0; _i < _arr.length; _i++) {\n  var name = _arr[_i];\n  module.exports[name] = Frontend[name];\n}\n\n/***/ }),\n\n/***/ \"./src/common.js\":\n/*!***********************!*\\\n  !*** ./src/common.js ***!\n  \\***********************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar ROOT_ID = '00000000-0000-0000-0000-000000000000';\n\nfunction isObject(obj) {\n  return (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && obj !== null;\n}\n\n/**\n * Returns true if all components of `clock1` are less than or equal to those\n * of `clock2` (both clocks given as Immutable.js Map objects). Returns false\n * if there is at least one component in which `clock1` is greater than\n * `clock2` (that is, either `clock1` is overall greater than `clock2`, or the\n * clocks are incomparable).\n */\nfunction lessOrEqual(clock1, clock2) {\n  return clock1.keySeq().concat(clock2.keySeq()).reduce(function (result, key) {\n    return result && clock1.get(key, 0) <= clock2.get(key, 0);\n  }, true);\n}\n\nmodule.exports = {\n  ROOT_ID: ROOT_ID, isObject: isObject, lessOrEqual: lessOrEqual\n};\n\n/***/ }),\n\n/***/ \"./src/connection.js\":\n/*!***************************!*\\\n  !*** ./src/connection.js ***!\n  \\***************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _require = __webpack_require__(/*! immutable */ \"./node_modules/immutable/dist/immutable.js\"),\n    Map = _require.Map,\n    fromJS = _require.fromJS;\n\nvar _require2 = __webpack_require__(/*! ./common */ \"./src/common.js\"),\n    lessOrEqual = _require2.lessOrEqual;\n\nvar Frontend = __webpack_require__(/*! ../frontend */ \"./frontend/index.js\");\nvar Backend = __webpack_require__(/*! ../backend */ \"./backend/index.js\");\n\n// Updates the vector clock for `docId` in `clockMap` (mapping from docId to vector clock)\n// by merging in the new vector clock `clock`. Returns the updated `clockMap`, in which each node's\n// sequence number has been set to the maximum for that node.\nfunction clockUnion(clockMap, docId, clock) {\n  clock = clockMap.get(docId, Map()).mergeWith(function (x, y) {\n    return Math.max(x, y);\n  }, clock);\n  return clockMap.set(docId, clock);\n}\n\n// Keeps track of the communication with one particular peer. Allows updates for many documents to\n// be multiplexed over a single connection.\n//\n// To integrate a connection with a particular networking stack, two functions are used:\n// * `sendMsg` (callback passed to the constructor, will be called when local state is updated)\n//   takes a message as argument, and sends it out to the remote peer.\n// * `receiveMsg` (method on the connection object) should be called by the network stack when a\n//   message is received from the remote peer.\n//\n// The documents to be synced are managed by a `DocSet`. Whenever a document is changed locally,\n// call `setDoc()` on the docSet. The connection registers a callback on the docSet, and it figures\n// out whenever there are changes that need to be sent to the remote peer.\n//\n// theirClock is the most recent VClock that we think the peer has (either because they've told us\n// that it's their clock, or because it corresponds to a state we have sent to them on this\n// connection). Thus, everything more recent than theirClock should be sent to the peer.\n//\n// ourClock is the most recent VClock that we've advertised to the peer (i.e. where we've\n// told the peer that we have it).\n\nvar Connection = function () {\n  function Connection(docSet, sendMsg) {\n    _classCallCheck(this, Connection);\n\n    this._docSet = docSet;\n    this._sendMsg = sendMsg;\n    this._theirClock = Map();\n    this._ourClock = Map();\n    this._docChangedHandler = this.docChanged.bind(this);\n  }\n\n  _createClass(Connection, [{\n    key: 'open',\n    value: function open() {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this._docSet.docIds[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var docId = _step.value;\n          this.docChanged(docId, this._docSet.getDoc(docId));\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      this._docSet.registerHandler(this._docChangedHandler);\n    }\n  }, {\n    key: 'close',\n    value: function close() {\n      this._docSet.unregisterHandler(this._docChangedHandler);\n    }\n  }, {\n    key: 'sendMsg',\n    value: function sendMsg(docId, clock, changes) {\n      var msg = { docId: docId, clock: clock.toJS() };\n      this._ourClock = clockUnion(this._ourClock, docId, clock);\n      if (changes) msg.changes = changes;\n      this._sendMsg(msg);\n    }\n  }, {\n    key: 'maybeSendChanges',\n    value: function maybeSendChanges(docId) {\n      var doc = this._docSet.getDoc(docId);\n      var state = Frontend.getBackendState(doc);\n      var clock = state.getIn(['opSet', 'clock']);\n\n      if (this._theirClock.has(docId)) {\n        var changes = Backend.getMissingChanges(state, this._theirClock.get(docId));\n        if (changes.length > 0) {\n          this._theirClock = clockUnion(this._theirClock, docId, clock);\n          this.sendMsg(docId, clock, changes);\n          return;\n        }\n      }\n\n      if (!clock.equals(this._ourClock.get(docId, Map()))) this.sendMsg(docId, clock);\n    }\n\n    // Callback that is called by the docSet whenever a document is changed\n\n  }, {\n    key: 'docChanged',\n    value: function docChanged(docId, doc) {\n      var state = Frontend.getBackendState(doc);\n      var clock = state.getIn(['opSet', 'clock']);\n      if (!clock) {\n        throw new TypeError('This object cannot be used for network sync. ' + 'Are you trying to sync a snapshot from the history?');\n      }\n\n      if (!lessOrEqual(this._ourClock.get(docId, Map()), clock)) {\n        throw new RangeError('Cannot pass an old state object to a connection');\n      }\n\n      this.maybeSendChanges(docId);\n    }\n  }, {\n    key: 'receiveMsg',\n    value: function receiveMsg(msg) {\n      if (msg.clock) {\n        this._theirClock = clockUnion(this._theirClock, msg.docId, fromJS(msg.clock));\n      }\n      if (msg.changes) {\n        return this._docSet.applyChanges(msg.docId, fromJS(msg.changes));\n      }\n\n      if (this._docSet.getDoc(msg.docId)) {\n        this.maybeSendChanges(msg.docId);\n      } else if (!this._ourClock.has(msg.docId)) {\n        // If the remote node has data that we don't, immediately ask for it.\n        // TODO should we sometimes exercise restraint in what we ask for?\n        this.sendMsg(msg.docId, Map());\n      }\n\n      return this._docSet.getDoc(msg.docId);\n    }\n  }]);\n\n  return Connection;\n}();\n\nmodule.exports = Connection;\n\n/***/ }),\n\n/***/ \"./src/doc_set.js\":\n/*!************************!*\\\n  !*** ./src/doc_set.js ***!\n  \\************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _require = __webpack_require__(/*! immutable */ \"./node_modules/immutable/dist/immutable.js\"),\n    Map = _require.Map,\n    Set = _require.Set;\n\nvar uuid = __webpack_require__(/*! ./uuid */ \"./src/uuid.js\");\nvar Frontend = __webpack_require__(/*! ../frontend */ \"./frontend/index.js\");\nvar Backend = __webpack_require__(/*! ../backend */ \"./backend/index.js\");\n\nvar DocSet = function () {\n  function DocSet() {\n    _classCallCheck(this, DocSet);\n\n    this.docs = Map();\n    this.handlers = Set();\n  }\n\n  _createClass(DocSet, [{\n    key: 'getDoc',\n    value: function getDoc(docId) {\n      return this.docs.get(docId);\n    }\n  }, {\n    key: 'setDoc',\n    value: function setDoc(docId, doc) {\n      this.docs = this.docs.set(docId, doc);\n      this.handlers.forEach(function (handler) {\n        return handler(docId, doc);\n      });\n    }\n  }, {\n    key: 'applyChanges',\n    value: function applyChanges(docId, changes) {\n      var doc = this.docs.get(docId) || Frontend.init({ backend: Backend });\n      var oldState = Frontend.getBackendState(doc);\n\n      var _Backend$applyChanges = Backend.applyChanges(oldState, changes),\n          _Backend$applyChanges2 = _slicedToArray(_Backend$applyChanges, 2),\n          newState = _Backend$applyChanges2[0],\n          patch = _Backend$applyChanges2[1];\n\n      patch.state = newState;\n      doc = Frontend.applyPatch(doc, patch);\n      this.setDoc(docId, doc);\n      return doc;\n    }\n  }, {\n    key: 'registerHandler',\n    value: function registerHandler(handler) {\n      this.handlers = this.handlers.add(handler);\n    }\n  }, {\n    key: 'unregisterHandler',\n    value: function unregisterHandler(handler) {\n      this.handlers = this.handlers.remove(handler);\n    }\n  }, {\n    key: 'docIds',\n    get: function get() {\n      return this.docs.keys();\n    }\n  }]);\n\n  return DocSet;\n}();\n\nmodule.exports = DocSet;\n\n/***/ }),\n\n/***/ \"./src/uuid.js\":\n/*!*********************!*\\\n  !*** ./src/uuid.js ***!\n  \\*********************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar uuid = __webpack_require__(/*! uuid/v4 */ \"./node_modules/uuid/v4.js\");\n\nvar factory = uuid;\n\nfunction makeUuid() {\n  return factory();\n}\n\nmakeUuid.setFactory = function (newFactory) {\n  return factory = newFactory;\n};\nmakeUuid.reset = function () {\n  return factory = uuid;\n};\n\nmodule.exports = makeUuid;\n\n/***/ }),\n\n/***/ \"./src/watchable_doc.js\":\n/*!******************************!*\\\n  !*** ./src/watchable_doc.js ***!\n  \\******************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _require = __webpack_require__(/*! immutable */ \"./node_modules/immutable/dist/immutable.js\"),\n    Set = _require.Set;\n\nvar Frontend = __webpack_require__(/*! ../frontend */ \"./frontend/index.js\");\nvar Backend = __webpack_require__(/*! ../backend */ \"./backend/index.js\");\n\nvar WatchableDoc = function () {\n  function WatchableDoc(doc) {\n    _classCallCheck(this, WatchableDoc);\n\n    if (!doc) throw new Error(\"doc argument is required\");\n    this.doc = doc;\n    this.handlers = Set();\n  }\n\n  _createClass(WatchableDoc, [{\n    key: 'get',\n    value: function get() {\n      return this.doc;\n    }\n  }, {\n    key: 'set',\n    value: function set(doc) {\n      this.doc = doc;\n      this.handlers.forEach(function (handler) {\n        return handler(doc);\n      });\n    }\n  }, {\n    key: 'applyChanges',\n    value: function applyChanges(changes) {\n      var oldState = Frontend.getBackendState(this.doc);\n\n      var _Backend$applyChanges = Backend.applyChanges(oldState, changes),\n          _Backend$applyChanges2 = _slicedToArray(_Backend$applyChanges, 2),\n          newState = _Backend$applyChanges2[0],\n          patch = _Backend$applyChanges2[1];\n\n      patch.state = newState;\n      var newDoc = Frontend.applyPatch(this.doc, patch);\n      this.set(newDoc);\n      return newDoc;\n    }\n  }, {\n    key: 'registerHandler',\n    value: function registerHandler(handler) {\n      this.handlers = this.handlers.add(handler);\n    }\n  }, {\n    key: 'unregisterHandler',\n    value: function unregisterHandler(handler) {\n      this.handlers = this.handlers.remove(handler);\n    }\n  }]);\n\n  return WatchableDoc;\n}();\n\nmodule.exports = WatchableDoc;\n\n/***/ })\n\n/******/ });\n});\n//# sourceMappingURL=automerge.js.map\n\n//# sourceURL=webpack:///./node_modules/automerge/dist/automerge.js?");

/***/ }),

/***/ "./node_modules/snabbdom/es/h.js":
/*!***************************************!*\
  !*** ./node_modules/snabbdom/es/h.js ***!
  \***************************************/
/*! exports provided: h, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return h; });\n/* harmony import */ var _vnode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vnode */ \"./node_modules/snabbdom/es/vnode.js\");\n/* harmony import */ var _is__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./is */ \"./node_modules/snabbdom/es/is.js\");\n\n\nfunction addNS(data, children, sel) {\n    data.ns = 'http://www.w3.org/2000/svg';\n    if (sel !== 'foreignObject' && children !== undefined) {\n        for (var i = 0; i < children.length; ++i) {\n            var childData = children[i].data;\n            if (childData !== undefined) {\n                addNS(childData, children[i].children, children[i].sel);\n            }\n        }\n    }\n}\nfunction h(sel, b, c) {\n    var data = {}, children, text, i;\n    if (c !== undefined) {\n        data = b;\n        if (_is__WEBPACK_IMPORTED_MODULE_1__[\"array\"](c)) {\n            children = c;\n        }\n        else if (_is__WEBPACK_IMPORTED_MODULE_1__[\"primitive\"](c)) {\n            text = c;\n        }\n        else if (c && c.sel) {\n            children = [c];\n        }\n    }\n    else if (b !== undefined) {\n        if (_is__WEBPACK_IMPORTED_MODULE_1__[\"array\"](b)) {\n            children = b;\n        }\n        else if (_is__WEBPACK_IMPORTED_MODULE_1__[\"primitive\"](b)) {\n            text = b;\n        }\n        else if (b && b.sel) {\n            children = [b];\n        }\n        else {\n            data = b;\n        }\n    }\n    if (children !== undefined) {\n        for (i = 0; i < children.length; ++i) {\n            if (_is__WEBPACK_IMPORTED_MODULE_1__[\"primitive\"](children[i]))\n                children[i] = Object(_vnode__WEBPACK_IMPORTED_MODULE_0__[\"vnode\"])(undefined, undefined, undefined, children[i], undefined);\n        }\n    }\n    if (sel[0] === 's' && sel[1] === 'v' && sel[2] === 'g' &&\n        (sel.length === 3 || sel[3] === '.' || sel[3] === '#')) {\n        addNS(data, children, sel);\n    }\n    return Object(_vnode__WEBPACK_IMPORTED_MODULE_0__[\"vnode\"])(sel, data, children, text, undefined);\n}\n;\n/* harmony default export */ __webpack_exports__[\"default\"] = (h);\n//# sourceMappingURL=h.js.map\n\n//# sourceURL=webpack:///./node_modules/snabbdom/es/h.js?");

/***/ }),

/***/ "./node_modules/snabbdom/es/htmldomapi.js":
/*!************************************************!*\
  !*** ./node_modules/snabbdom/es/htmldomapi.js ***!
  \************************************************/
/*! exports provided: htmlDomApi, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"htmlDomApi\", function() { return htmlDomApi; });\nfunction createElement(tagName) {\n    return document.createElement(tagName);\n}\nfunction createElementNS(namespaceURI, qualifiedName) {\n    return document.createElementNS(namespaceURI, qualifiedName);\n}\nfunction createTextNode(text) {\n    return document.createTextNode(text);\n}\nfunction createComment(text) {\n    return document.createComment(text);\n}\nfunction insertBefore(parentNode, newNode, referenceNode) {\n    parentNode.insertBefore(newNode, referenceNode);\n}\nfunction removeChild(node, child) {\n    node.removeChild(child);\n}\nfunction appendChild(node, child) {\n    node.appendChild(child);\n}\nfunction parentNode(node) {\n    return node.parentNode;\n}\nfunction nextSibling(node) {\n    return node.nextSibling;\n}\nfunction tagName(elm) {\n    return elm.tagName;\n}\nfunction setTextContent(node, text) {\n    node.textContent = text;\n}\nfunction getTextContent(node) {\n    return node.textContent;\n}\nfunction isElement(node) {\n    return node.nodeType === 1;\n}\nfunction isText(node) {\n    return node.nodeType === 3;\n}\nfunction isComment(node) {\n    return node.nodeType === 8;\n}\nvar htmlDomApi = {\n    createElement: createElement,\n    createElementNS: createElementNS,\n    createTextNode: createTextNode,\n    createComment: createComment,\n    insertBefore: insertBefore,\n    removeChild: removeChild,\n    appendChild: appendChild,\n    parentNode: parentNode,\n    nextSibling: nextSibling,\n    tagName: tagName,\n    setTextContent: setTextContent,\n    getTextContent: getTextContent,\n    isElement: isElement,\n    isText: isText,\n    isComment: isComment,\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (htmlDomApi);\n//# sourceMappingURL=htmldomapi.js.map\n\n//# sourceURL=webpack:///./node_modules/snabbdom/es/htmldomapi.js?");

/***/ }),

/***/ "./node_modules/snabbdom/es/is.js":
/*!****************************************!*\
  !*** ./node_modules/snabbdom/es/is.js ***!
  \****************************************/
/*! exports provided: array, primitive */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"array\", function() { return array; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"primitive\", function() { return primitive; });\nvar array = Array.isArray;\nfunction primitive(s) {\n    return typeof s === 'string' || typeof s === 'number';\n}\n//# sourceMappingURL=is.js.map\n\n//# sourceURL=webpack:///./node_modules/snabbdom/es/is.js?");

/***/ }),

/***/ "./node_modules/snabbdom/es/snabbdom.js":
/*!**********************************************!*\
  !*** ./node_modules/snabbdom/es/snabbdom.js ***!
  \**********************************************/
/*! exports provided: h, thunk, init */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"init\", function() { return init; });\n/* harmony import */ var _vnode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vnode */ \"./node_modules/snabbdom/es/vnode.js\");\n/* harmony import */ var _is__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./is */ \"./node_modules/snabbdom/es/is.js\");\n/* harmony import */ var _htmldomapi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./htmldomapi */ \"./node_modules/snabbdom/es/htmldomapi.js\");\n/* harmony import */ var _h__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./h */ \"./node_modules/snabbdom/es/h.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return _h__WEBPACK_IMPORTED_MODULE_3__[\"h\"]; });\n\n/* harmony import */ var _thunk__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./thunk */ \"./node_modules/snabbdom/es/thunk.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"thunk\", function() { return _thunk__WEBPACK_IMPORTED_MODULE_4__[\"thunk\"]; });\n\n\n\n\nfunction isUndef(s) { return s === undefined; }\nfunction isDef(s) { return s !== undefined; }\nvar emptyNode = Object(_vnode__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('', {}, [], undefined, undefined);\nfunction sameVnode(vnode1, vnode2) {\n    return vnode1.key === vnode2.key && vnode1.sel === vnode2.sel;\n}\nfunction isVnode(vnode) {\n    return vnode.sel !== undefined;\n}\nfunction createKeyToOldIdx(children, beginIdx, endIdx) {\n    var i, map = {}, key, ch;\n    for (i = beginIdx; i <= endIdx; ++i) {\n        ch = children[i];\n        if (ch != null) {\n            key = ch.key;\n            if (key !== undefined)\n                map[key] = i;\n        }\n    }\n    return map;\n}\nvar hooks = ['create', 'update', 'remove', 'destroy', 'pre', 'post'];\n\n\nfunction init(modules, domApi) {\n    var i, j, cbs = {};\n    var api = domApi !== undefined ? domApi : _htmldomapi__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\n    for (i = 0; i < hooks.length; ++i) {\n        cbs[hooks[i]] = [];\n        for (j = 0; j < modules.length; ++j) {\n            var hook = modules[j][hooks[i]];\n            if (hook !== undefined) {\n                cbs[hooks[i]].push(hook);\n            }\n        }\n    }\n    function emptyNodeAt(elm) {\n        var id = elm.id ? '#' + elm.id : '';\n        var c = elm.className ? '.' + elm.className.split(' ').join('.') : '';\n        return Object(_vnode__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(api.tagName(elm).toLowerCase() + id + c, {}, [], undefined, elm);\n    }\n    function createRmCb(childElm, listeners) {\n        return function rmCb() {\n            if (--listeners === 0) {\n                var parent_1 = api.parentNode(childElm);\n                api.removeChild(parent_1, childElm);\n            }\n        };\n    }\n    function createElm(vnode, insertedVnodeQueue) {\n        var i, data = vnode.data;\n        if (data !== undefined) {\n            if (isDef(i = data.hook) && isDef(i = i.init)) {\n                i(vnode);\n                data = vnode.data;\n            }\n        }\n        var children = vnode.children, sel = vnode.sel;\n        if (sel === '!') {\n            if (isUndef(vnode.text)) {\n                vnode.text = '';\n            }\n            vnode.elm = api.createComment(vnode.text);\n        }\n        else if (sel !== undefined) {\n            // Parse selector\n            var hashIdx = sel.indexOf('#');\n            var dotIdx = sel.indexOf('.', hashIdx);\n            var hash = hashIdx > 0 ? hashIdx : sel.length;\n            var dot = dotIdx > 0 ? dotIdx : sel.length;\n            var tag = hashIdx !== -1 || dotIdx !== -1 ? sel.slice(0, Math.min(hash, dot)) : sel;\n            var elm = vnode.elm = isDef(data) && isDef(i = data.ns) ? api.createElementNS(i, tag)\n                : api.createElement(tag);\n            if (hash < dot)\n                elm.setAttribute('id', sel.slice(hash + 1, dot));\n            if (dotIdx > 0)\n                elm.setAttribute('class', sel.slice(dot + 1).replace(/\\./g, ' '));\n            for (i = 0; i < cbs.create.length; ++i)\n                cbs.create[i](emptyNode, vnode);\n            if (_is__WEBPACK_IMPORTED_MODULE_1__[\"array\"](children)) {\n                for (i = 0; i < children.length; ++i) {\n                    var ch = children[i];\n                    if (ch != null) {\n                        api.appendChild(elm, createElm(ch, insertedVnodeQueue));\n                    }\n                }\n            }\n            else if (_is__WEBPACK_IMPORTED_MODULE_1__[\"primitive\"](vnode.text)) {\n                api.appendChild(elm, api.createTextNode(vnode.text));\n            }\n            i = vnode.data.hook; // Reuse variable\n            if (isDef(i)) {\n                if (i.create)\n                    i.create(emptyNode, vnode);\n                if (i.insert)\n                    insertedVnodeQueue.push(vnode);\n            }\n        }\n        else {\n            vnode.elm = api.createTextNode(vnode.text);\n        }\n        return vnode.elm;\n    }\n    function addVnodes(parentElm, before, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n        for (; startIdx <= endIdx; ++startIdx) {\n            var ch = vnodes[startIdx];\n            if (ch != null) {\n                api.insertBefore(parentElm, createElm(ch, insertedVnodeQueue), before);\n            }\n        }\n    }\n    function invokeDestroyHook(vnode) {\n        var i, j, data = vnode.data;\n        if (data !== undefined) {\n            if (isDef(i = data.hook) && isDef(i = i.destroy))\n                i(vnode);\n            for (i = 0; i < cbs.destroy.length; ++i)\n                cbs.destroy[i](vnode);\n            if (vnode.children !== undefined) {\n                for (j = 0; j < vnode.children.length; ++j) {\n                    i = vnode.children[j];\n                    if (i != null && typeof i !== \"string\") {\n                        invokeDestroyHook(i);\n                    }\n                }\n            }\n        }\n    }\n    function removeVnodes(parentElm, vnodes, startIdx, endIdx) {\n        for (; startIdx <= endIdx; ++startIdx) {\n            var i_1 = void 0, listeners = void 0, rm = void 0, ch = vnodes[startIdx];\n            if (ch != null) {\n                if (isDef(ch.sel)) {\n                    invokeDestroyHook(ch);\n                    listeners = cbs.remove.length + 1;\n                    rm = createRmCb(ch.elm, listeners);\n                    for (i_1 = 0; i_1 < cbs.remove.length; ++i_1)\n                        cbs.remove[i_1](ch, rm);\n                    if (isDef(i_1 = ch.data) && isDef(i_1 = i_1.hook) && isDef(i_1 = i_1.remove)) {\n                        i_1(ch, rm);\n                    }\n                    else {\n                        rm();\n                    }\n                }\n                else {\n                    api.removeChild(parentElm, ch.elm);\n                }\n            }\n        }\n    }\n    function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue) {\n        var oldStartIdx = 0, newStartIdx = 0;\n        var oldEndIdx = oldCh.length - 1;\n        var oldStartVnode = oldCh[0];\n        var oldEndVnode = oldCh[oldEndIdx];\n        var newEndIdx = newCh.length - 1;\n        var newStartVnode = newCh[0];\n        var newEndVnode = newCh[newEndIdx];\n        var oldKeyToIdx;\n        var idxInOld;\n        var elmToMove;\n        var before;\n        while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n            if (oldStartVnode == null) {\n                oldStartVnode = oldCh[++oldStartIdx]; // Vnode might have been moved left\n            }\n            else if (oldEndVnode == null) {\n                oldEndVnode = oldCh[--oldEndIdx];\n            }\n            else if (newStartVnode == null) {\n                newStartVnode = newCh[++newStartIdx];\n            }\n            else if (newEndVnode == null) {\n                newEndVnode = newCh[--newEndIdx];\n            }\n            else if (sameVnode(oldStartVnode, newStartVnode)) {\n                patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\n                oldStartVnode = oldCh[++oldStartIdx];\n                newStartVnode = newCh[++newStartIdx];\n            }\n            else if (sameVnode(oldEndVnode, newEndVnode)) {\n                patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\n                oldEndVnode = oldCh[--oldEndIdx];\n                newEndVnode = newCh[--newEndIdx];\n            }\n            else if (sameVnode(oldStartVnode, newEndVnode)) {\n                patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\n                api.insertBefore(parentElm, oldStartVnode.elm, api.nextSibling(oldEndVnode.elm));\n                oldStartVnode = oldCh[++oldStartIdx];\n                newEndVnode = newCh[--newEndIdx];\n            }\n            else if (sameVnode(oldEndVnode, newStartVnode)) {\n                patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\n                api.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n                oldEndVnode = oldCh[--oldEndIdx];\n                newStartVnode = newCh[++newStartIdx];\n            }\n            else {\n                if (oldKeyToIdx === undefined) {\n                    oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);\n                }\n                idxInOld = oldKeyToIdx[newStartVnode.key];\n                if (isUndef(idxInOld)) {\n                    api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm);\n                    newStartVnode = newCh[++newStartIdx];\n                }\n                else {\n                    elmToMove = oldCh[idxInOld];\n                    if (elmToMove.sel !== newStartVnode.sel) {\n                        api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm);\n                    }\n                    else {\n                        patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);\n                        oldCh[idxInOld] = undefined;\n                        api.insertBefore(parentElm, elmToMove.elm, oldStartVnode.elm);\n                    }\n                    newStartVnode = newCh[++newStartIdx];\n                }\n            }\n        }\n        if (oldStartIdx <= oldEndIdx || newStartIdx <= newEndIdx) {\n            if (oldStartIdx > oldEndIdx) {\n                before = newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].elm;\n                addVnodes(parentElm, before, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n            }\n            else {\n                removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n            }\n        }\n    }\n    function patchVnode(oldVnode, vnode, insertedVnodeQueue) {\n        var i, hook;\n        if (isDef(i = vnode.data) && isDef(hook = i.hook) && isDef(i = hook.prepatch)) {\n            i(oldVnode, vnode);\n        }\n        var elm = vnode.elm = oldVnode.elm;\n        var oldCh = oldVnode.children;\n        var ch = vnode.children;\n        if (oldVnode === vnode)\n            return;\n        if (vnode.data !== undefined) {\n            for (i = 0; i < cbs.update.length; ++i)\n                cbs.update[i](oldVnode, vnode);\n            i = vnode.data.hook;\n            if (isDef(i) && isDef(i = i.update))\n                i(oldVnode, vnode);\n        }\n        if (isUndef(vnode.text)) {\n            if (isDef(oldCh) && isDef(ch)) {\n                if (oldCh !== ch)\n                    updateChildren(elm, oldCh, ch, insertedVnodeQueue);\n            }\n            else if (isDef(ch)) {\n                if (isDef(oldVnode.text))\n                    api.setTextContent(elm, '');\n                addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n            }\n            else if (isDef(oldCh)) {\n                removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n            }\n            else if (isDef(oldVnode.text)) {\n                api.setTextContent(elm, '');\n            }\n        }\n        else if (oldVnode.text !== vnode.text) {\n            api.setTextContent(elm, vnode.text);\n        }\n        if (isDef(hook) && isDef(i = hook.postpatch)) {\n            i(oldVnode, vnode);\n        }\n    }\n    return function patch(oldVnode, vnode) {\n        var i, elm, parent;\n        var insertedVnodeQueue = [];\n        for (i = 0; i < cbs.pre.length; ++i)\n            cbs.pre[i]();\n        if (!isVnode(oldVnode)) {\n            oldVnode = emptyNodeAt(oldVnode);\n        }\n        if (sameVnode(oldVnode, vnode)) {\n            patchVnode(oldVnode, vnode, insertedVnodeQueue);\n        }\n        else {\n            elm = oldVnode.elm;\n            parent = api.parentNode(elm);\n            createElm(vnode, insertedVnodeQueue);\n            if (parent !== null) {\n                api.insertBefore(parent, vnode.elm, api.nextSibling(elm));\n                removeVnodes(parent, [oldVnode], 0, 0);\n            }\n        }\n        for (i = 0; i < insertedVnodeQueue.length; ++i) {\n            insertedVnodeQueue[i].data.hook.insert(insertedVnodeQueue[i]);\n        }\n        for (i = 0; i < cbs.post.length; ++i)\n            cbs.post[i]();\n        return vnode;\n    };\n}\n//# sourceMappingURL=snabbdom.js.map\n\n//# sourceURL=webpack:///./node_modules/snabbdom/es/snabbdom.js?");

/***/ }),

/***/ "./node_modules/snabbdom/es/thunk.js":
/*!*******************************************!*\
  !*** ./node_modules/snabbdom/es/thunk.js ***!
  \*******************************************/
/*! exports provided: thunk, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"thunk\", function() { return thunk; });\n/* harmony import */ var _h__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./h */ \"./node_modules/snabbdom/es/h.js\");\n\nfunction copyToThunk(vnode, thunk) {\n    thunk.elm = vnode.elm;\n    vnode.data.fn = thunk.data.fn;\n    vnode.data.args = thunk.data.args;\n    thunk.data = vnode.data;\n    thunk.children = vnode.children;\n    thunk.text = vnode.text;\n    thunk.elm = vnode.elm;\n}\nfunction init(thunk) {\n    var cur = thunk.data;\n    var vnode = cur.fn.apply(undefined, cur.args);\n    copyToThunk(vnode, thunk);\n}\nfunction prepatch(oldVnode, thunk) {\n    var i, old = oldVnode.data, cur = thunk.data;\n    var oldArgs = old.args, args = cur.args;\n    if (old.fn !== cur.fn || oldArgs.length !== args.length) {\n        copyToThunk(cur.fn.apply(undefined, args), thunk);\n        return;\n    }\n    for (i = 0; i < args.length; ++i) {\n        if (oldArgs[i] !== args[i]) {\n            copyToThunk(cur.fn.apply(undefined, args), thunk);\n            return;\n        }\n    }\n    copyToThunk(oldVnode, thunk);\n}\nvar thunk = function thunk(sel, key, fn, args) {\n    if (args === undefined) {\n        args = fn;\n        fn = key;\n        key = undefined;\n    }\n    return Object(_h__WEBPACK_IMPORTED_MODULE_0__[\"h\"])(sel, {\n        key: key,\n        hook: { init: init, prepatch: prepatch },\n        fn: fn,\n        args: args\n    });\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (thunk);\n//# sourceMappingURL=thunk.js.map\n\n//# sourceURL=webpack:///./node_modules/snabbdom/es/thunk.js?");

/***/ }),

/***/ "./node_modules/snabbdom/es/vnode.js":
/*!*******************************************!*\
  !*** ./node_modules/snabbdom/es/vnode.js ***!
  \*******************************************/
/*! exports provided: vnode, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"vnode\", function() { return vnode; });\nfunction vnode(sel, data, children, text, elm) {\n    var key = data === undefined ? undefined : data.key;\n    return { sel: sel, data: data, children: children,\n        text: text, elm: elm, key: key };\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (vnode);\n//# sourceMappingURL=vnode.js.map\n\n//# sourceURL=webpack:///./node_modules/snabbdom/es/vnode.js?");

/***/ }),

/***/ "./node_modules/snabbdom/h.js":
/*!************************************!*\
  !*** ./node_modules/snabbdom/h.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar vnode_1 = __webpack_require__(/*! ./vnode */ \"./node_modules/snabbdom/vnode.js\");\nvar is = __webpack_require__(/*! ./is */ \"./node_modules/snabbdom/is.js\");\nfunction addNS(data, children, sel) {\n    data.ns = 'http://www.w3.org/2000/svg';\n    if (sel !== 'foreignObject' && children !== undefined) {\n        for (var i = 0; i < children.length; ++i) {\n            var childData = children[i].data;\n            if (childData !== undefined) {\n                addNS(childData, children[i].children, children[i].sel);\n            }\n        }\n    }\n}\nfunction h(sel, b, c) {\n    var data = {}, children, text, i;\n    if (c !== undefined) {\n        data = b;\n        if (is.array(c)) {\n            children = c;\n        }\n        else if (is.primitive(c)) {\n            text = c;\n        }\n        else if (c && c.sel) {\n            children = [c];\n        }\n    }\n    else if (b !== undefined) {\n        if (is.array(b)) {\n            children = b;\n        }\n        else if (is.primitive(b)) {\n            text = b;\n        }\n        else if (b && b.sel) {\n            children = [b];\n        }\n        else {\n            data = b;\n        }\n    }\n    if (children !== undefined) {\n        for (i = 0; i < children.length; ++i) {\n            if (is.primitive(children[i]))\n                children[i] = vnode_1.vnode(undefined, undefined, undefined, children[i], undefined);\n        }\n    }\n    if (sel[0] === 's' && sel[1] === 'v' && sel[2] === 'g' &&\n        (sel.length === 3 || sel[3] === '.' || sel[3] === '#')) {\n        addNS(data, children, sel);\n    }\n    return vnode_1.vnode(sel, data, children, text, undefined);\n}\nexports.h = h;\n;\nexports.default = h;\n//# sourceMappingURL=h.js.map\n\n//# sourceURL=webpack:///./node_modules/snabbdom/h.js?");

/***/ }),

/***/ "./node_modules/snabbdom/htmldomapi.js":
/*!*********************************************!*\
  !*** ./node_modules/snabbdom/htmldomapi.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction createElement(tagName) {\n    return document.createElement(tagName);\n}\nfunction createElementNS(namespaceURI, qualifiedName) {\n    return document.createElementNS(namespaceURI, qualifiedName);\n}\nfunction createTextNode(text) {\n    return document.createTextNode(text);\n}\nfunction createComment(text) {\n    return document.createComment(text);\n}\nfunction insertBefore(parentNode, newNode, referenceNode) {\n    parentNode.insertBefore(newNode, referenceNode);\n}\nfunction removeChild(node, child) {\n    node.removeChild(child);\n}\nfunction appendChild(node, child) {\n    node.appendChild(child);\n}\nfunction parentNode(node) {\n    return node.parentNode;\n}\nfunction nextSibling(node) {\n    return node.nextSibling;\n}\nfunction tagName(elm) {\n    return elm.tagName;\n}\nfunction setTextContent(node, text) {\n    node.textContent = text;\n}\nfunction getTextContent(node) {\n    return node.textContent;\n}\nfunction isElement(node) {\n    return node.nodeType === 1;\n}\nfunction isText(node) {\n    return node.nodeType === 3;\n}\nfunction isComment(node) {\n    return node.nodeType === 8;\n}\nexports.htmlDomApi = {\n    createElement: createElement,\n    createElementNS: createElementNS,\n    createTextNode: createTextNode,\n    createComment: createComment,\n    insertBefore: insertBefore,\n    removeChild: removeChild,\n    appendChild: appendChild,\n    parentNode: parentNode,\n    nextSibling: nextSibling,\n    tagName: tagName,\n    setTextContent: setTextContent,\n    getTextContent: getTextContent,\n    isElement: isElement,\n    isText: isText,\n    isComment: isComment,\n};\nexports.default = exports.htmlDomApi;\n//# sourceMappingURL=htmldomapi.js.map\n\n//# sourceURL=webpack:///./node_modules/snabbdom/htmldomapi.js?");

/***/ }),

/***/ "./node_modules/snabbdom/is.js":
/*!*************************************!*\
  !*** ./node_modules/snabbdom/is.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.array = Array.isArray;\nfunction primitive(s) {\n    return typeof s === 'string' || typeof s === 'number';\n}\nexports.primitive = primitive;\n//# sourceMappingURL=is.js.map\n\n//# sourceURL=webpack:///./node_modules/snabbdom/is.js?");

/***/ }),

/***/ "./node_modules/snabbdom/modules/class.js":
/*!************************************************!*\
  !*** ./node_modules/snabbdom/modules/class.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction updateClass(oldVnode, vnode) {\n    var cur, name, elm = vnode.elm, oldClass = oldVnode.data.class, klass = vnode.data.class;\n    if (!oldClass && !klass)\n        return;\n    if (oldClass === klass)\n        return;\n    oldClass = oldClass || {};\n    klass = klass || {};\n    for (name in oldClass) {\n        if (!klass[name]) {\n            elm.classList.remove(name);\n        }\n    }\n    for (name in klass) {\n        cur = klass[name];\n        if (cur !== oldClass[name]) {\n            elm.classList[cur ? 'add' : 'remove'](name);\n        }\n    }\n}\nexports.classModule = { create: updateClass, update: updateClass };\nexports.default = exports.classModule;\n//# sourceMappingURL=class.js.map\n\n//# sourceURL=webpack:///./node_modules/snabbdom/modules/class.js?");

/***/ }),

/***/ "./node_modules/snabbdom/modules/dataset.js":
/*!**************************************************!*\
  !*** ./node_modules/snabbdom/modules/dataset.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CAPS_REGEX = /[A-Z]/g;\nfunction updateDataset(oldVnode, vnode) {\n    var elm = vnode.elm, oldDataset = oldVnode.data.dataset, dataset = vnode.data.dataset, key;\n    if (!oldDataset && !dataset)\n        return;\n    if (oldDataset === dataset)\n        return;\n    oldDataset = oldDataset || {};\n    dataset = dataset || {};\n    var d = elm.dataset;\n    for (key in oldDataset) {\n        if (!dataset[key]) {\n            if (d) {\n                if (key in d) {\n                    delete d[key];\n                }\n            }\n            else {\n                elm.removeAttribute('data-' + key.replace(CAPS_REGEX, '-$&').toLowerCase());\n            }\n        }\n    }\n    for (key in dataset) {\n        if (oldDataset[key] !== dataset[key]) {\n            if (d) {\n                d[key] = dataset[key];\n            }\n            else {\n                elm.setAttribute('data-' + key.replace(CAPS_REGEX, '-$&').toLowerCase(), dataset[key]);\n            }\n        }\n    }\n}\nexports.datasetModule = { create: updateDataset, update: updateDataset };\nexports.default = exports.datasetModule;\n//# sourceMappingURL=dataset.js.map\n\n//# sourceURL=webpack:///./node_modules/snabbdom/modules/dataset.js?");

/***/ }),

/***/ "./node_modules/snabbdom/modules/eventlisteners.js":
/*!*********************************************************!*\
  !*** ./node_modules/snabbdom/modules/eventlisteners.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction invokeHandler(handler, vnode, event) {\n    if (typeof handler === \"function\") {\n        // call function handler\n        handler.call(vnode, event, vnode);\n    }\n    else if (typeof handler === \"object\") {\n        // call handler with arguments\n        if (typeof handler[0] === \"function\") {\n            // special case for single argument for performance\n            if (handler.length === 2) {\n                handler[0].call(vnode, handler[1], event, vnode);\n            }\n            else {\n                var args = handler.slice(1);\n                args.push(event);\n                args.push(vnode);\n                handler[0].apply(vnode, args);\n            }\n        }\n        else {\n            // call multiple handlers\n            for (var i = 0; i < handler.length; i++) {\n                invokeHandler(handler[i]);\n            }\n        }\n    }\n}\nfunction handleEvent(event, vnode) {\n    var name = event.type, on = vnode.data.on;\n    // call event handler(s) if exists\n    if (on && on[name]) {\n        invokeHandler(on[name], vnode, event);\n    }\n}\nfunction createListener() {\n    return function handler(event) {\n        handleEvent(event, handler.vnode);\n    };\n}\nfunction updateEventListeners(oldVnode, vnode) {\n    var oldOn = oldVnode.data.on, oldListener = oldVnode.listener, oldElm = oldVnode.elm, on = vnode && vnode.data.on, elm = (vnode && vnode.elm), name;\n    // optimization for reused immutable handlers\n    if (oldOn === on) {\n        return;\n    }\n    // remove existing listeners which no longer used\n    if (oldOn && oldListener) {\n        // if element changed or deleted we remove all existing listeners unconditionally\n        if (!on) {\n            for (name in oldOn) {\n                // remove listener if element was changed or existing listeners removed\n                oldElm.removeEventListener(name, oldListener, false);\n            }\n        }\n        else {\n            for (name in oldOn) {\n                // remove listener if existing listener removed\n                if (!on[name]) {\n                    oldElm.removeEventListener(name, oldListener, false);\n                }\n            }\n        }\n    }\n    // add new listeners which has not already attached\n    if (on) {\n        // reuse existing listener or create new\n        var listener = vnode.listener = oldVnode.listener || createListener();\n        // update vnode for listener\n        listener.vnode = vnode;\n        // if element changed or added we add all needed listeners unconditionally\n        if (!oldOn) {\n            for (name in on) {\n                // add listener if element was changed or new listeners added\n                elm.addEventListener(name, listener, false);\n            }\n        }\n        else {\n            for (name in on) {\n                // add listener if new listener added\n                if (!oldOn[name]) {\n                    elm.addEventListener(name, listener, false);\n                }\n            }\n        }\n    }\n}\nexports.eventListenersModule = {\n    create: updateEventListeners,\n    update: updateEventListeners,\n    destroy: updateEventListeners\n};\nexports.default = exports.eventListenersModule;\n//# sourceMappingURL=eventlisteners.js.map\n\n//# sourceURL=webpack:///./node_modules/snabbdom/modules/eventlisteners.js?");

/***/ }),

/***/ "./node_modules/snabbdom/modules/props.js":
/*!************************************************!*\
  !*** ./node_modules/snabbdom/modules/props.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction updateProps(oldVnode, vnode) {\n    var key, cur, old, elm = vnode.elm, oldProps = oldVnode.data.props, props = vnode.data.props;\n    if (!oldProps && !props)\n        return;\n    if (oldProps === props)\n        return;\n    oldProps = oldProps || {};\n    props = props || {};\n    for (key in oldProps) {\n        if (!props[key]) {\n            delete elm[key];\n        }\n    }\n    for (key in props) {\n        cur = props[key];\n        old = oldProps[key];\n        if (old !== cur && (key !== 'value' || elm[key] !== cur)) {\n            elm[key] = cur;\n        }\n    }\n}\nexports.propsModule = { create: updateProps, update: updateProps };\nexports.default = exports.propsModule;\n//# sourceMappingURL=props.js.map\n\n//# sourceURL=webpack:///./node_modules/snabbdom/modules/props.js?");

/***/ }),

/***/ "./node_modules/snabbdom/modules/style.js":
/*!************************************************!*\
  !*** ./node_modules/snabbdom/modules/style.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar raf = (typeof window !== 'undefined' && window.requestAnimationFrame) || setTimeout;\nvar nextFrame = function (fn) { raf(function () { raf(fn); }); };\nvar reflowForced = false;\nfunction setNextFrame(obj, prop, val) {\n    nextFrame(function () { obj[prop] = val; });\n}\nfunction updateStyle(oldVnode, vnode) {\n    var cur, name, elm = vnode.elm, oldStyle = oldVnode.data.style, style = vnode.data.style;\n    if (!oldStyle && !style)\n        return;\n    if (oldStyle === style)\n        return;\n    oldStyle = oldStyle || {};\n    style = style || {};\n    var oldHasDel = 'delayed' in oldStyle;\n    for (name in oldStyle) {\n        if (!style[name]) {\n            if (name[0] === '-' && name[1] === '-') {\n                elm.style.removeProperty(name);\n            }\n            else {\n                elm.style[name] = '';\n            }\n        }\n    }\n    for (name in style) {\n        cur = style[name];\n        if (name === 'delayed' && style.delayed) {\n            for (var name2 in style.delayed) {\n                cur = style.delayed[name2];\n                if (!oldHasDel || cur !== oldStyle.delayed[name2]) {\n                    setNextFrame(elm.style, name2, cur);\n                }\n            }\n        }\n        else if (name !== 'remove' && cur !== oldStyle[name]) {\n            if (name[0] === '-' && name[1] === '-') {\n                elm.style.setProperty(name, cur);\n            }\n            else {\n                elm.style[name] = cur;\n            }\n        }\n    }\n}\nfunction applyDestroyStyle(vnode) {\n    var style, name, elm = vnode.elm, s = vnode.data.style;\n    if (!s || !(style = s.destroy))\n        return;\n    for (name in style) {\n        elm.style[name] = style[name];\n    }\n}\nfunction applyRemoveStyle(vnode, rm) {\n    var s = vnode.data.style;\n    if (!s || !s.remove) {\n        rm();\n        return;\n    }\n    if (!reflowForced) {\n        getComputedStyle(document.body).transform;\n        reflowForced = true;\n    }\n    var name, elm = vnode.elm, i = 0, compStyle, style = s.remove, amount = 0, applied = [];\n    for (name in style) {\n        applied.push(name);\n        elm.style[name] = style[name];\n    }\n    compStyle = getComputedStyle(elm);\n    var props = compStyle['transition-property'].split(', ');\n    for (; i < props.length; ++i) {\n        if (applied.indexOf(props[i]) !== -1)\n            amount++;\n    }\n    elm.addEventListener('transitionend', function (ev) {\n        if (ev.target === elm)\n            --amount;\n        if (amount === 0)\n            rm();\n    });\n}\nfunction forceReflow() {\n    reflowForced = false;\n}\nexports.styleModule = {\n    pre: forceReflow,\n    create: updateStyle,\n    update: updateStyle,\n    destroy: applyDestroyStyle,\n    remove: applyRemoveStyle\n};\nexports.default = exports.styleModule;\n//# sourceMappingURL=style.js.map\n\n//# sourceURL=webpack:///./node_modules/snabbdom/modules/style.js?");

/***/ }),

/***/ "./node_modules/snabbdom/tovnode.js":
/*!******************************************!*\
  !*** ./node_modules/snabbdom/tovnode.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar vnode_1 = __webpack_require__(/*! ./vnode */ \"./node_modules/snabbdom/vnode.js\");\nvar htmldomapi_1 = __webpack_require__(/*! ./htmldomapi */ \"./node_modules/snabbdom/htmldomapi.js\");\nfunction toVNode(node, domApi) {\n    var api = domApi !== undefined ? domApi : htmldomapi_1.default;\n    var text;\n    if (api.isElement(node)) {\n        var id = node.id ? '#' + node.id : '';\n        var cn = node.getAttribute('class');\n        var c = cn ? '.' + cn.split(' ').join('.') : '';\n        var sel = api.tagName(node).toLowerCase() + id + c;\n        var attrs = {};\n        var children = [];\n        var name_1;\n        var i = void 0, n = void 0;\n        var elmAttrs = node.attributes;\n        var elmChildren = node.childNodes;\n        for (i = 0, n = elmAttrs.length; i < n; i++) {\n            name_1 = elmAttrs[i].nodeName;\n            if (name_1 !== 'id' && name_1 !== 'class') {\n                attrs[name_1] = elmAttrs[i].nodeValue;\n            }\n        }\n        for (i = 0, n = elmChildren.length; i < n; i++) {\n            children.push(toVNode(elmChildren[i], domApi));\n        }\n        return vnode_1.default(sel, { attrs: attrs }, children, undefined, node);\n    }\n    else if (api.isText(node)) {\n        text = api.getTextContent(node);\n        return vnode_1.default(undefined, undefined, undefined, text, node);\n    }\n    else if (api.isComment(node)) {\n        text = api.getTextContent(node);\n        return vnode_1.default('!', {}, [], text, node);\n    }\n    else {\n        return vnode_1.default('', {}, [], undefined, node);\n    }\n}\nexports.toVNode = toVNode;\nexports.default = toVNode;\n//# sourceMappingURL=tovnode.js.map\n\n//# sourceURL=webpack:///./node_modules/snabbdom/tovnode.js?");

/***/ }),

/***/ "./node_modules/snabbdom/vnode.js":
/*!****************************************!*\
  !*** ./node_modules/snabbdom/vnode.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction vnode(sel, data, children, text, elm) {\n    var key = data === undefined ? undefined : data.key;\n    return { sel: sel, data: data, children: children,\n        text: text, elm: elm, key: key };\n}\nexports.vnode = vnode;\nexports.default = vnode;\n//# sourceMappingURL=vnode.js.map\n\n//# sourceURL=webpack:///./node_modules/snabbdom/vnode.js?");

/***/ }),

/***/ "./snabbdom.js":
/*!*********************!*\
  !*** ./snabbdom.js ***!
  \*********************/
/*! exports provided: patch, h, toVNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"patch\", function() { return patch; });\n/* harmony import */ var snabbdom_modules_class__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! snabbdom/modules/class */ \"./node_modules/snabbdom/modules/class.js\");\n/* harmony import */ var snabbdom_modules_class__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(snabbdom_modules_class__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var snabbdom_modules_props__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! snabbdom/modules/props */ \"./node_modules/snabbdom/modules/props.js\");\n/* harmony import */ var snabbdom_modules_props__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(snabbdom_modules_props__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var snabbdom_modules_style__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! snabbdom/modules/style */ \"./node_modules/snabbdom/modules/style.js\");\n/* harmony import */ var snabbdom_modules_style__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(snabbdom_modules_style__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var snabbdom_modules_dataset__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! snabbdom/modules/dataset */ \"./node_modules/snabbdom/modules/dataset.js\");\n/* harmony import */ var snabbdom_modules_dataset__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(snabbdom_modules_dataset__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var snabbdom_modules_eventlisteners__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! snabbdom/modules/eventlisteners */ \"./node_modules/snabbdom/modules/eventlisteners.js\");\n/* harmony import */ var snabbdom_modules_eventlisteners__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(snabbdom_modules_eventlisteners__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var snabbdom_h__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! snabbdom/h */ \"./node_modules/snabbdom/h.js\");\n/* harmony import */ var snabbdom_h__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(snabbdom_h__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony reexport (default from non-harmony) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return snabbdom_h__WEBPACK_IMPORTED_MODULE_5___default.a; });\n/* harmony import */ var snabbdom_tovnode__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! snabbdom/tovnode */ \"./node_modules/snabbdom/tovnode.js\");\n/* harmony import */ var snabbdom_tovnode__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(snabbdom_tovnode__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony reexport (default from non-harmony) */ __webpack_require__.d(__webpack_exports__, \"toVNode\", function() { return snabbdom_tovnode__WEBPACK_IMPORTED_MODULE_6___default.a; });\n\n\n\n\n\n\n\n\nconst snabbdom = __webpack_require__(/*! snabbdom */ \"./node_modules/snabbdom/es/snabbdom.js\");\n\nconst patch = snabbdom.init([\n  snabbdom_modules_class__WEBPACK_IMPORTED_MODULE_0___default.a,\n  snabbdom_modules_props__WEBPACK_IMPORTED_MODULE_1___default.a,\n  snabbdom_modules_style__WEBPACK_IMPORTED_MODULE_2___default.a,\n  snabbdom_modules_dataset__WEBPACK_IMPORTED_MODULE_3___default.a,\n  snabbdom_modules_eventlisteners__WEBPACK_IMPORTED_MODULE_4___default.a\n]);\n\n\n\n\n//# sourceURL=webpack:///./snabbdom.js?");

/***/ })

/******/ });